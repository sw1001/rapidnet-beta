/* A RapidNet application. Generated by RapidNet compiler. */

#include "vtbp.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::vtbp;

const string Vtbp::EPRETURN = "ePReturn";
const string Vtbp::EPROVQUERY = "eProvQuery";
const string Vtbp::ERRETURN = "eRReturn";
const string Vtbp::ERULEQUERY = "eRuleQuery";
const string Vtbp::EMATRIXTEMP = "ematrixTemp";
const string Vtbp::EMATRIXTEMPDELETE = "ematrixTempDelete";
const string Vtbp::EMATRIXTEMPTEMP = "ematrixTempTemp";
const string Vtbp::EMATRIXTEMPTEMPDELETE = "ematrixTempTempDelete";
const string Vtbp::EMAXPROB = "emaxProb";
const string Vtbp::EMAXPROBDELETE = "emaxProbDelete";
const string Vtbp::EMAXPROBTEMP = "emaxProbTemp";
const string Vtbp::EMAXPROBTEMPDELETE = "emaxProbTempDelete";
const string Vtbp::EMISSION = "emission";
const string Vtbp::ESHARESULT = "eshaResult";
const string Vtbp::ESHARESULTDELETE = "eshaResultDelete";
const string Vtbp::ESHARESULTTEMP = "eshaResultTemp";
const string Vtbp::ESHARESULTTEMPDELETE = "eshaResultTempDelete";
const string Vtbp::MATRIXTEMP = "matrixTemp";
const string Vtbp::MAXPROB = "maxProb";
const string Vtbp::OBSERVATION = "observation";
const string Vtbp::PITERATE = "pIterate";
const string Vtbp::PQLIST = "pQList";
const string Vtbp::PRESULTTMP = "pResultTmp";
const string Vtbp::PRETURN = "pReturn";
const string Vtbp::PTEMPQUERY = "pTempQuery";
const string Vtbp::PROV = "prov";
const string Vtbp::PROVQUERY = "provQuery";
const string Vtbp::RITERATE = "rIterate";
const string Vtbp::RQLIST = "rQList";
const string Vtbp::RRESULTTMP = "rResultTmp";
const string Vtbp::RRETURN = "rReturn";
const string Vtbp::RULEEXEC = "ruleExec";
const string Vtbp::RULEQUERY = "ruleQuery";
const string Vtbp::SHARESULT = "shaResult";
const string Vtbp::TEMPLIST = "tempList";
const string Vtbp::TRANSITION = "transition";

NS_LOG_COMPONENT_DEFINE ("Vtbp");
NS_OBJECT_ENSURE_REGISTERED (Vtbp);

TypeId
Vtbp::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::vtbp::Vtbp")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<Vtbp> ()
    ;
  return tid;
}

Vtbp::Vtbp()
{
  NS_LOG_FUNCTION_NOARGS ();
}

Vtbp::~Vtbp()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
Vtbp::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
Vtbp::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("Vtbp Application Started");
}

void
Vtbp::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("Vtbp Application Stopped");
}

void
Vtbp::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (EMISSION, attrdeflist (
    attrdef ("emission_attr1", IPV4),
    attrdef ("emission_attr2", STR),
    attrdef ("emission_attr3", STR),
    attrdef ("emission_attr4", REAL)));

  AddRelationWithKeys (MATRIXTEMP, attrdeflist (
    attrdef ("matrixTemp_attr1", IPV4),
    attrdef ("matrixTemp_attr2", STR),
    attrdef ("matrixTemp_attr3", STR),
    attrdef ("matrixTemp_attr4", INT32)));

  AddRelationWithKeys (MAXPROB, attrdeflist (
    attrdef ("maxProb_attr1", IPV4),
    attrdef ("maxProb_attr2", STR),
    attrdef ("maxProb_attr3", STR),
    attrdef ("maxProb_attr4", INT32)));

  AddRelationWithKeys (OBSERVATION, attrdeflist (
    attrdef ("observation_attr1", IPV4),
    attrdef ("observation_attr2", STR),
    attrdef ("observation_attr3", INT32),
    attrdef ("observation_attr4", REAL)));

  AddRelationWithKeys (PQLIST, attrdeflist (
    attrdef ("pQList_attr1", IPV4),
    attrdef ("pQList_attr2", ID)));

  AddRelationWithKeys (PRESULTTMP, attrdeflist (
    attrdef ("pResultTmp_attr1", IPV4),
    attrdef ("pResultTmp_attr2", ID)));

  AddRelationWithKeys (PROV, attrdeflist (
    attrdef ("prov_attr1", IPV4),
    attrdef ("prov_attr2", ID),
    attrdef ("prov_attr3", ID)));

  AddRelationWithKeys (RQLIST, attrdeflist (
    attrdef ("rQList_attr1", IPV4),
    attrdef ("rQList_attr2", ID)));

  AddRelationWithKeys (RRESULTTMP, attrdeflist (
    attrdef ("rResultTmp_attr1", IPV4),
    attrdef ("rResultTmp_attr2", ID)));

  AddRelationWithKeys (RULEEXEC, attrdeflist (
    attrdef ("ruleExec_attr1", IPV4),
    attrdef ("ruleExec_attr2", ID)));

  AddRelationWithKeys (SHARESULT, attrdeflist (
    attrdef ("shaResult_attr1", IPV4),
    attrdef ("shaResult_attr2", ID),
    attrdef ("shaResult_attr3", STR)));

  AddRelationWithKeys (TRANSITION, attrdeflist (
    attrdef ("transition_attr1", IPV4),
    attrdef ("transition_attr2", STR),
    attrdef ("transition_attr3", STR),
    attrdef ("transition_attr4", REAL)));

}

void
Vtbp::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsInsertEvent (tuple, TRANSITION))
    {
      Prov_r1_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, TRANSITION))
    {
      Prov_r1_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, EMISSION))
    {
      Prov_r1_1Eca3Ins (tuple);
    }
  if (IsDeleteEvent (tuple, EMISSION))
    {
      Prov_r1_1Eca3Del (tuple);
    }
  if (IsInsertEvent (tuple, OBSERVATION))
    {
      Prov_r1_1Eca7Ins (tuple);
    }
  if (IsDeleteEvent (tuple, OBSERVATION))
    {
      Prov_r1_1Eca7Del (tuple);
    }
  if (IsRecvEvent (tuple, EMATRIXTEMPTEMP))
    {
      Prov_r1_2_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EMATRIXTEMPTEMPDELETE))
    {
      Prov_r1_2_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EMATRIXTEMPTEMP))
    {
      Prov_r1_3_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EMATRIXTEMPTEMPDELETE))
    {
      Prov_r1_3_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EMATRIXTEMP))
    {
      Prov_r1_4_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EMATRIXTEMPDELETE))
    {
      Prov_r1_4_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EMATRIXTEMP))
    {
      Prov_r1_5_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EMATRIXTEMPDELETE))
    {
      Prov_r1_5_ecaDel (tuple);
    }
  if (IsInsertEvent (tuple, MATRIXTEMP))
    {
      Prov_r2_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, MATRIXTEMP))
    {
      Prov_r2_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, TRANSITION))
    {
      Prov_r2_1Eca3Ins (tuple);
    }
  if (IsDeleteEvent (tuple, TRANSITION))
    {
      Prov_r2_1Eca3Del (tuple);
    }
  if (IsInsertEvent (tuple, EMISSION))
    {
      Prov_r2_1Eca7Ins (tuple);
    }
  if (IsDeleteEvent (tuple, EMISSION))
    {
      Prov_r2_1Eca7Del (tuple);
    }
  if (IsInsertEvent (tuple, OBSERVATION))
    {
      Prov_r2_1Eca11Ins (tuple);
    }
  if (IsDeleteEvent (tuple, OBSERVATION))
    {
      Prov_r2_1Eca11Del (tuple);
    }
  if (IsInsertEvent (tuple, MATRIXTEMP))
    {
      Prov_r3_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, MATRIXTEMP))
    {
      Prov_r3_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, TRANSITION))
    {
      Prov_r3_1Eca3Ins (tuple);
    }
  if (IsDeleteEvent (tuple, TRANSITION))
    {
      Prov_r3_1Eca3Del (tuple);
    }
  if (IsInsertEvent (tuple, OBSERVATION))
    {
      Prov_r3_1Eca7Ins (tuple);
    }
  if (IsDeleteEvent (tuple, OBSERVATION))
    {
      Prov_r3_1Eca7Del (tuple);
    }
  if (IsInsertEvent (tuple, MATRIXTEMP))
    {
      Prov_r4_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, MATRIXTEMP))
    {
      Prov_r4_1Eca0Del (tuple);
    }
  if (IsRecvEvent (tuple, EMAXPROBTEMP))
    {
      Prov_r4_2_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EMAXPROBTEMPDELETE))
    {
      Prov_r4_2_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EMAXPROBTEMP))
    {
      Prov_r4_3_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EMAXPROBTEMPDELETE))
    {
      Prov_r4_3_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EMAXPROB))
    {
      Prov_r4_4_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EMAXPROBDELETE))
    {
      Prov_r4_4_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EMAXPROB))
    {
      Prov_r4_5_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EMAXPROBDELETE))
    {
      Prov_r4_5_ecaDel (tuple);
    }
  if (IsInsertEvent (tuple, EMISSION))
    {
      Prov_sr1_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, EMISSION))
    {
      Prov_sr1_1Eca0Del (tuple);
    }
  if (IsRecvEvent (tuple, ESHARESULTTEMP))
    {
      Prov_sr1_2_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ESHARESULTTEMPDELETE))
    {
      Prov_sr1_2_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ESHARESULTTEMP))
    {
      Prov_sr1_3_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ESHARESULTTEMPDELETE))
    {
      Prov_sr1_3_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ESHARESULT))
    {
      Prov_sr1_4_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ESHARESULTDELETE))
    {
      Prov_sr1_4_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ESHARESULT))
    {
      Prov_sr1_5_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ESHARESULTDELETE))
    {
      Prov_sr1_5_ecaDel (tuple);
    }
  if (IsInsertEvent (tuple, TRANSITION))
    {
      Prov_sr2_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, TRANSITION))
    {
      Prov_sr2_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, OBSERVATION))
    {
      Prov_sr3_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, OBSERVATION))
    {
      Prov_sr3_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, MATRIXTEMP))
    {
      Prov_sr4_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, MATRIXTEMP))
    {
      Prov_sr4_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, MAXPROB))
    {
      Prov_sr5_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, MAXPROB))
    {
      Prov_sr5_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, EMISSION))
    {
      Prov_edb_1Eca1Ins (tuple);
    }
  if (IsDeleteEvent (tuple, EMISSION))
    {
      Prov_edb_1Eca1Del (tuple);
    }
  if (IsInsertEvent (tuple, OBSERVATION))
    {
      Prov_edb_2Eca1Ins (tuple);
    }
  if (IsDeleteEvent (tuple, OBSERVATION))
    {
      Prov_edb_2Eca1Del (tuple);
    }
  if (IsInsertEvent (tuple, TRANSITION))
    {
      Prov_edb_3Eca1Ins (tuple);
    }
  if (IsDeleteEvent (tuple, TRANSITION))
    {
      Prov_edb_3Eca1Del (tuple);
    }
  if (IsRecvEvent (tuple, PROVQUERY))
    {
      Prep1_eca (tuple);
    }
  if (IsRecvEvent (tuple, PROVQUERY))
    {
      Prep2_eca (tuple);
    }
  if (IsRecvEvent (tuple, PROVQUERY))
    {
      Prep3_eca (tuple);
    }
  if (IsRecvEvent (tuple, PTEMPQUERY))
    {
      Prep4_eca (tuple);
    }
  if (IsRecvEvent (tuple, TEMPLIST))
    {
      Edb1_eca (tuple);
    }
  if (IsRecvEvent (tuple, TEMPLIST))
    {
      Idb1_eca (tuple);
    }
  if (IsRecvEvent (tuple, TEMPLIST))
    {
      Idb2_eca (tuple);
    }
  if (IsRecvEvent (tuple, TEMPLIST))
    {
      Idb3_eca (tuple);
    }
  if (IsRecvEvent (tuple, PITERATE))
    {
      Idb4_eca (tuple);
    }
  if (IsRecvEvent (tuple, PITERATE))
    {
      Idb5_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERULEQUERY))
    {
      Idb6_eca (tuple);
    }
  if (IsRecvEvent (tuple, RRETURN))
    {
      Idb7_eca (tuple);
    }
  if (IsInsertEvent (tuple, PRESULTTMP))
    {
      Idb8Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, PQLIST))
    {
      Idb8Eca1Ins (tuple);
    }
  if (IsRecvEvent (tuple, EPRETURN))
    {
      Idb9_eca (tuple);
    }
  if (IsRecvEvent (tuple, RULEQUERY))
    {
      Rv1_eca (tuple);
    }
  if (IsRecvEvent (tuple, RULEQUERY))
    {
      Rv2_eca (tuple);
    }
  if (IsRecvEvent (tuple, RULEQUERY))
    {
      Rv3_eca (tuple);
    }
  if (IsRecvEvent (tuple, RITERATE))
    {
      Rv4_eca (tuple);
    }
  if (IsRecvEvent (tuple, RITERATE))
    {
      Rv5_eca (tuple);
    }
  if (IsRecvEvent (tuple, EPROVQUERY))
    {
      Rv6_eca (tuple);
    }
  if (IsRecvEvent (tuple, PRETURN))
    {
      Rv7_eca (tuple);
    }
  if (IsInsertEvent (tuple, RRESULTTMP))
    {
      Rv8Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, RQLIST))
    {
      Rv8Eca1Ins (tuple);
    }
  if (IsRecvEvent (tuple, ERRETURN))
    {
      Rv9_eca (tuple);
    }
}

void
Vtbp::Prov_r1_1Eca0Ins (Ptr<Tuple> transition)
{
  RAPIDNET_LOG_INFO ("Prov_r1_1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (EMISSION)->Join (
    transition,
    strlist ("emission_attr3", "emission_attr1"),
    strlist ("transition_attr2", "transition_attr1"));

  result = GetRelation (OBSERVATION)->Join (
    result,
    strlist ("observation_attr2", "observation_attr1"),
    strlist ("emission_attr2", "transition_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("transition")),
                    VarExpr::New ("transition_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("transition_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("transition_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("transition_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("emission")),
                    VarExpr::New ("transition_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("emission_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("transition_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("emission_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("observation")),
                    VarExpr::New ("transition_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("emission_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("observation_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("observation_attr4")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("transition_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("transition_attr3"),
      ValueExpr::New (StrValue::New ("START")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("observation_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("transition_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("emission_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("observation_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EMATRIXTEMPTEMP,
    strlist ("RLOC",
      "transition_attr1",
      "transition_attr2",
      "emission_attr2",
      "observation_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ematrixTempTemp_attr1",
      "ematrixTempTemp_attr2",
      "ematrixTempTemp_attr3",
      "ematrixTempTemp_attr4",
      "ematrixTempTemp_attr5",
      "ematrixTempTemp_attr6",
      "ematrixTempTemp_attr7",
      "ematrixTempTemp_attr8",
      "ematrixTempTemp_attr9",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_r1_1Eca0Del (Ptr<Tuple> transition)
{
  RAPIDNET_LOG_INFO ("Prov_r1_1Eca0Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (EMISSION)->Join (
    transition,
    strlist ("emission_attr3", "emission_attr1"),
    strlist ("transition_attr2", "transition_attr1"));

  result = GetRelation (OBSERVATION)->Join (
    result,
    strlist ("observation_attr2", "observation_attr1"),
    strlist ("emission_attr2", "transition_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("transition")),
                    VarExpr::New ("transition_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("transition_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("transition_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("transition_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("emission")),
                    VarExpr::New ("transition_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("emission_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("transition_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("emission_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("observation")),
                    VarExpr::New ("transition_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("emission_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("observation_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("observation_attr4")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("transition_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("transition_attr3"),
      ValueExpr::New (StrValue::New ("START")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("observation_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("transition_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("emission_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("observation_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EMATRIXTEMPTEMPDELETE,
    strlist ("RLOC",
      "transition_attr1",
      "transition_attr2",
      "emission_attr2",
      "observation_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ematrixTempTempDelete_attr1",
      "ematrixTempTempDelete_attr2",
      "ematrixTempTempDelete_attr3",
      "ematrixTempTempDelete_attr4",
      "ematrixTempTempDelete_attr5",
      "ematrixTempTempDelete_attr6",
      "ematrixTempTempDelete_attr7",
      "ematrixTempTempDelete_attr8",
      "ematrixTempTempDelete_attr9",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_r1_1Eca3Ins (Ptr<Tuple> emission)
{
  RAPIDNET_LOG_INFO ("Prov_r1_1Eca3Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (TRANSITION)->Join (
    emission,
    strlist ("transition_attr2", "transition_attr1"),
    strlist ("emission_attr3", "emission_attr1"));

  result = GetRelation (OBSERVATION)->Join (
    result,
    strlist ("observation_attr2", "observation_attr1"),
    strlist ("emission_attr2", "emission_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("transition")),
                    VarExpr::New ("emission_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("emission_attr3")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("transition_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("transition_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("emission")),
                    VarExpr::New ("emission_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("emission_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("emission_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("emission_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("observation")),
                    VarExpr::New ("emission_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("emission_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("observation_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("observation_attr4")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("emission_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("transition_attr3"),
      ValueExpr::New (StrValue::New ("START")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("observation_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("transition_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("emission_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("observation_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EMATRIXTEMPTEMP,
    strlist ("RLOC",
      "emission_attr1",
      "emission_attr3",
      "emission_attr2",
      "observation_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ematrixTempTemp_attr1",
      "ematrixTempTemp_attr2",
      "ematrixTempTemp_attr3",
      "ematrixTempTemp_attr4",
      "ematrixTempTemp_attr5",
      "ematrixTempTemp_attr6",
      "ematrixTempTemp_attr7",
      "ematrixTempTemp_attr8",
      "ematrixTempTemp_attr9",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_r1_1Eca3Del (Ptr<Tuple> emission)
{
  RAPIDNET_LOG_INFO ("Prov_r1_1Eca3Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (TRANSITION)->Join (
    emission,
    strlist ("transition_attr2", "transition_attr1"),
    strlist ("emission_attr3", "emission_attr1"));

  result = GetRelation (OBSERVATION)->Join (
    result,
    strlist ("observation_attr2", "observation_attr1"),
    strlist ("emission_attr2", "emission_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("transition")),
                    VarExpr::New ("emission_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("emission_attr3")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("transition_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("transition_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("emission")),
                    VarExpr::New ("emission_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("emission_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("emission_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("emission_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("observation")),
                    VarExpr::New ("emission_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("emission_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("observation_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("observation_attr4")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("emission_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("transition_attr3"),
      ValueExpr::New (StrValue::New ("START")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("observation_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("transition_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("emission_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("observation_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EMATRIXTEMPTEMPDELETE,
    strlist ("RLOC",
      "emission_attr1",
      "emission_attr3",
      "emission_attr2",
      "observation_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ematrixTempTempDelete_attr1",
      "ematrixTempTempDelete_attr2",
      "ematrixTempTempDelete_attr3",
      "ematrixTempTempDelete_attr4",
      "ematrixTempTempDelete_attr5",
      "ematrixTempTempDelete_attr6",
      "ematrixTempTempDelete_attr7",
      "ematrixTempTempDelete_attr8",
      "ematrixTempTempDelete_attr9",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_r1_1Eca7Ins (Ptr<Tuple> observation)
{
  RAPIDNET_LOG_INFO ("Prov_r1_1Eca7Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (TRANSITION)->Join (
    observation,
    strlist ("transition_attr1"),
    strlist ("observation_attr1"));

  result = GetRelation (EMISSION)->Join (
    result,
    strlist ("emission_attr2", "emission_attr3", "emission_attr1"),
    strlist ("observation_attr2", "transition_attr2", "observation_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("transition")),
                    VarExpr::New ("observation_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("transition_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("transition_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("transition_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("emission")),
                    VarExpr::New ("observation_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("observation_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("transition_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("emission_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("observation")),
                    VarExpr::New ("observation_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("observation_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("observation_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("observation_attr4")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("observation_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("transition_attr3"),
      ValueExpr::New (StrValue::New ("START")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("observation_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("transition_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("emission_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("observation_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EMATRIXTEMPTEMP,
    strlist ("RLOC",
      "observation_attr1",
      "transition_attr2",
      "observation_attr2",
      "observation_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ematrixTempTemp_attr1",
      "ematrixTempTemp_attr2",
      "ematrixTempTemp_attr3",
      "ematrixTempTemp_attr4",
      "ematrixTempTemp_attr5",
      "ematrixTempTemp_attr6",
      "ematrixTempTemp_attr7",
      "ematrixTempTemp_attr8",
      "ematrixTempTemp_attr9",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_r1_1Eca7Del (Ptr<Tuple> observation)
{
  RAPIDNET_LOG_INFO ("Prov_r1_1Eca7Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (TRANSITION)->Join (
    observation,
    strlist ("transition_attr1"),
    strlist ("observation_attr1"));

  result = GetRelation (EMISSION)->Join (
    result,
    strlist ("emission_attr2", "emission_attr3", "emission_attr1"),
    strlist ("observation_attr2", "transition_attr2", "observation_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("transition")),
                    VarExpr::New ("observation_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("transition_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("transition_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("transition_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("emission")),
                    VarExpr::New ("observation_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("observation_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("transition_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("emission_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("observation")),
                    VarExpr::New ("observation_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("observation_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("observation_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("observation_attr4")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("observation_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("transition_attr3"),
      ValueExpr::New (StrValue::New ("START")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("observation_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("transition_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("emission_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("observation_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EMATRIXTEMPTEMPDELETE,
    strlist ("RLOC",
      "observation_attr1",
      "transition_attr2",
      "observation_attr2",
      "observation_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ematrixTempTempDelete_attr1",
      "ematrixTempTempDelete_attr2",
      "ematrixTempTempDelete_attr3",
      "ematrixTempTempDelete_attr4",
      "ematrixTempTempDelete_attr5",
      "ematrixTempTempDelete_attr6",
      "ematrixTempTempDelete_attr7",
      "ematrixTempTempDelete_attr8",
      "ematrixTempTempDelete_attr9",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_r1_2_ecaAdd (Ptr<Tuple> ematrixTempTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r1_2_ecaAdd triggered");

  Ptr<Tuple> result = ematrixTempTemp;

  result = result->Project (
    RULEEXEC,
    strlist ("ematrixTempTemp_attr1",
      "ematrixTempTemp_attr6",
      "ematrixTempTemp_attr7",
      "ematrixTempTemp_attr8",
      "ematrixTempTemp_attr9"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Insert (result);
}

void
Vtbp::Prov_r1_2_ecaDel (Ptr<Tuple> ematrixTempTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r1_2_ecaDel triggered");

  Ptr<Tuple> result = ematrixTempTempDelete;

  result = result->Project (
    RULEEXEC,
    strlist ("ematrixTempTempDelete_attr1",
      "ematrixTempTempDelete_attr6",
      "ematrixTempTempDelete_attr7",
      "ematrixTempTempDelete_attr8",
      "ematrixTempTempDelete_attr9"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Delete (result);
}

void
Vtbp::Prov_r1_3_ecaAdd (Ptr<Tuple> ematrixTempTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r1_3_ecaAdd triggered");

  Ptr<Tuple> result = ematrixTempTemp;

  result = result->Project (
    EMATRIXTEMP,
    strlist ("ematrixTempTemp_attr2",
      "ematrixTempTemp_attr3",
      "ematrixTempTemp_attr4",
      "ematrixTempTemp_attr5",
      "ematrixTempTemp_attr6",
      "ematrixTempTemp_attr7",
      "ematrixTempTemp_attr1",
      "ematrixTempTemp_attr2"),
    strlist ("ematrixTemp_attr1",
      "ematrixTemp_attr2",
      "ematrixTemp_attr3",
      "ematrixTemp_attr4",
      "ematrixTemp_attr5",
      "ematrixTemp_attr6",
      "ematrixTemp_attr7",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_r1_3_ecaDel (Ptr<Tuple> ematrixTempTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r1_3_ecaDel triggered");

  Ptr<Tuple> result = ematrixTempTempDelete;

  result = result->Project (
    EMATRIXTEMPDELETE,
    strlist ("ematrixTempTempDelete_attr2",
      "ematrixTempTempDelete_attr3",
      "ematrixTempTempDelete_attr4",
      "ematrixTempTempDelete_attr5",
      "ematrixTempTempDelete_attr6",
      "ematrixTempTempDelete_attr7",
      "ematrixTempTempDelete_attr1",
      "ematrixTempTempDelete_attr2"),
    strlist ("ematrixTempDelete_attr1",
      "ematrixTempDelete_attr2",
      "ematrixTempDelete_attr3",
      "ematrixTempDelete_attr4",
      "ematrixTempDelete_attr5",
      "ematrixTempDelete_attr6",
      "ematrixTempDelete_attr7",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_r1_4_ecaAdd (Ptr<Tuple> ematrixTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r1_4_ecaAdd triggered");

  Ptr<Tuple> result = ematrixTemp;

  result = result->Project (
    MATRIXTEMP,
    strlist ("ematrixTemp_attr1",
      "ematrixTemp_attr2",
      "ematrixTemp_attr3",
      "ematrixTemp_attr4"),
    strlist ("matrixTemp_attr1",
      "matrixTemp_attr2",
      "matrixTemp_attr3",
      "matrixTemp_attr4"));

  Insert (result);
}

void
Vtbp::Prov_r1_4_ecaDel (Ptr<Tuple> ematrixTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r1_4_ecaDel triggered");

  Ptr<Tuple> result = ematrixTempDelete;

  result = result->Project (
    MATRIXTEMP,
    strlist ("ematrixTempDelete_attr1",
      "ematrixTempDelete_attr2",
      "ematrixTempDelete_attr3",
      "ematrixTempDelete_attr4"),
    strlist ("matrixTemp_attr1",
      "matrixTemp_attr2",
      "matrixTemp_attr3",
      "matrixTemp_attr4"));

  Delete (result);
}

void
Vtbp::Prov_r1_5_ecaAdd (Ptr<Tuple> ematrixTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r1_5_ecaAdd triggered");

  Ptr<Tuple> result = ematrixTemp;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("matrixTemp")),
                    VarExpr::New ("ematrixTemp_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("ematrixTemp_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("ematrixTemp_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("ematrixTemp_attr4")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result = result->Project (
    PROV,
    strlist ("ematrixTemp_attr1",
      "VID",
      "ematrixTemp_attr5",
      "ematrixTemp_attr7",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Insert (result);
}

void
Vtbp::Prov_r1_5_ecaDel (Ptr<Tuple> ematrixTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r1_5_ecaDel triggered");

  Ptr<Tuple> result = ematrixTempDelete;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("matrixTemp")),
                    VarExpr::New ("ematrixTempDelete_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("ematrixTempDelete_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("ematrixTempDelete_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("ematrixTempDelete_attr4")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result = result->Project (
    PROV,
    strlist ("ematrixTempDelete_attr1",
      "VID",
      "ematrixTempDelete_attr5",
      "ematrixTempDelete_attr7",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Delete (result);
}

void
Vtbp::Prov_r2_1Eca0Ins (Ptr<Tuple> matrixTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r2_1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (TRANSITION)->Join (
    matrixTemp,
    strlist ("transition_attr3", "transition_attr1"),
    strlist ("matrixTemp_attr2", "matrixTemp_attr1"));

  result = GetRelation (EMISSION)->Join (
    result,
    strlist ("emission_attr3", "emission_attr1"),
    strlist ("transition_attr2", "matrixTemp_attr1"));

  result = GetRelation (OBSERVATION)->Join (
    result,
    strlist ("observation_attr2", "observation_attr1"),
    strlist ("emission_attr2", "matrixTemp_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("matrixTemp")),
                    VarExpr::New ("matrixTemp_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("matrixTemp_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("matrixTemp_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("matrixTemp_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("transition")),
                    VarExpr::New ("matrixTemp_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("transition_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("matrixTemp_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("transition_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("emission")),
                    VarExpr::New ("matrixTemp_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("emission_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("transition_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("emission_attr4")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("observation")),
                    VarExpr::New ("matrixTemp_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("emission_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("observation_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("observation_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("matrixTemp_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("matrixTemp_attr2"),
      ValueExpr::New (StrValue::New ("START")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("transition_attr2"),
      ValueExpr::New (StrValue::New ("END")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("observation_attr3"),
      Operation::New (RN_PLUS,
        VarExpr::New ("matrixTemp_attr4"),
        ValueExpr::New (Int32Value::New (1))))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("transition_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("emission_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("observation_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EMATRIXTEMPTEMP,
    strlist ("RLOC",
      "matrixTemp_attr1",
      "transition_attr2",
      "emission_attr2",
      "observation_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ematrixTempTemp_attr1",
      "ematrixTempTemp_attr2",
      "ematrixTempTemp_attr3",
      "ematrixTempTemp_attr4",
      "ematrixTempTemp_attr5",
      "ematrixTempTemp_attr6",
      "ematrixTempTemp_attr7",
      "ematrixTempTemp_attr8",
      "ematrixTempTemp_attr9",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_r2_1Eca0Del (Ptr<Tuple> matrixTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r2_1Eca0Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (TRANSITION)->Join (
    matrixTemp,
    strlist ("transition_attr3", "transition_attr1"),
    strlist ("matrixTemp_attr2", "matrixTemp_attr1"));

  result = GetRelation (EMISSION)->Join (
    result,
    strlist ("emission_attr3", "emission_attr1"),
    strlist ("transition_attr2", "matrixTemp_attr1"));

  result = GetRelation (OBSERVATION)->Join (
    result,
    strlist ("observation_attr2", "observation_attr1"),
    strlist ("emission_attr2", "matrixTemp_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("matrixTemp")),
                    VarExpr::New ("matrixTemp_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("matrixTemp_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("matrixTemp_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("matrixTemp_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("transition")),
                    VarExpr::New ("matrixTemp_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("transition_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("matrixTemp_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("transition_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("emission")),
                    VarExpr::New ("matrixTemp_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("emission_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("transition_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("emission_attr4")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("observation")),
                    VarExpr::New ("matrixTemp_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("emission_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("observation_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("observation_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("matrixTemp_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("matrixTemp_attr2"),
      ValueExpr::New (StrValue::New ("START")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("transition_attr2"),
      ValueExpr::New (StrValue::New ("END")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("observation_attr3"),
      Operation::New (RN_PLUS,
        VarExpr::New ("matrixTemp_attr4"),
        ValueExpr::New (Int32Value::New (1))))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("transition_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("emission_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("observation_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EMATRIXTEMPTEMPDELETE,
    strlist ("RLOC",
      "matrixTemp_attr1",
      "transition_attr2",
      "emission_attr2",
      "observation_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ematrixTempTempDelete_attr1",
      "ematrixTempTempDelete_attr2",
      "ematrixTempTempDelete_attr3",
      "ematrixTempTempDelete_attr4",
      "ematrixTempTempDelete_attr5",
      "ematrixTempTempDelete_attr6",
      "ematrixTempTempDelete_attr7",
      "ematrixTempTempDelete_attr8",
      "ematrixTempTempDelete_attr9",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_r2_1Eca3Ins (Ptr<Tuple> transition)
{
  RAPIDNET_LOG_INFO ("Prov_r2_1Eca3Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (MATRIXTEMP)->Join (
    transition,
    strlist ("matrixTemp_attr2", "matrixTemp_attr1"),
    strlist ("transition_attr3", "transition_attr1"));

  result = GetRelation (EMISSION)->Join (
    result,
    strlist ("emission_attr3", "emission_attr1"),
    strlist ("transition_attr2", "transition_attr1"));

  result = GetRelation (OBSERVATION)->Join (
    result,
    strlist ("observation_attr2", "observation_attr1"),
    strlist ("emission_attr2", "transition_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("matrixTemp")),
                    VarExpr::New ("transition_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("transition_attr3")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("matrixTemp_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("matrixTemp_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("transition")),
                    VarExpr::New ("transition_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("transition_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("transition_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("transition_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("emission")),
                    VarExpr::New ("transition_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("emission_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("transition_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("emission_attr4")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("observation")),
                    VarExpr::New ("transition_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("emission_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("observation_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("observation_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("transition_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("transition_attr3"),
      ValueExpr::New (StrValue::New ("START")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("transition_attr2"),
      ValueExpr::New (StrValue::New ("END")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("observation_attr3"),
      Operation::New (RN_PLUS,
        VarExpr::New ("matrixTemp_attr4"),
        ValueExpr::New (Int32Value::New (1))))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("transition_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("emission_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("observation_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EMATRIXTEMPTEMP,
    strlist ("RLOC",
      "transition_attr1",
      "transition_attr2",
      "emission_attr2",
      "observation_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ematrixTempTemp_attr1",
      "ematrixTempTemp_attr2",
      "ematrixTempTemp_attr3",
      "ematrixTempTemp_attr4",
      "ematrixTempTemp_attr5",
      "ematrixTempTemp_attr6",
      "ematrixTempTemp_attr7",
      "ematrixTempTemp_attr8",
      "ematrixTempTemp_attr9",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_r2_1Eca3Del (Ptr<Tuple> transition)
{
  RAPIDNET_LOG_INFO ("Prov_r2_1Eca3Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (MATRIXTEMP)->Join (
    transition,
    strlist ("matrixTemp_attr2", "matrixTemp_attr1"),
    strlist ("transition_attr3", "transition_attr1"));

  result = GetRelation (EMISSION)->Join (
    result,
    strlist ("emission_attr3", "emission_attr1"),
    strlist ("transition_attr2", "transition_attr1"));

  result = GetRelation (OBSERVATION)->Join (
    result,
    strlist ("observation_attr2", "observation_attr1"),
    strlist ("emission_attr2", "transition_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("matrixTemp")),
                    VarExpr::New ("transition_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("transition_attr3")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("matrixTemp_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("matrixTemp_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("transition")),
                    VarExpr::New ("transition_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("transition_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("transition_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("transition_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("emission")),
                    VarExpr::New ("transition_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("emission_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("transition_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("emission_attr4")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("observation")),
                    VarExpr::New ("transition_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("emission_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("observation_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("observation_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("transition_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("transition_attr3"),
      ValueExpr::New (StrValue::New ("START")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("transition_attr2"),
      ValueExpr::New (StrValue::New ("END")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("observation_attr3"),
      Operation::New (RN_PLUS,
        VarExpr::New ("matrixTemp_attr4"),
        ValueExpr::New (Int32Value::New (1))))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("transition_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("emission_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("observation_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EMATRIXTEMPTEMPDELETE,
    strlist ("RLOC",
      "transition_attr1",
      "transition_attr2",
      "emission_attr2",
      "observation_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ematrixTempTempDelete_attr1",
      "ematrixTempTempDelete_attr2",
      "ematrixTempTempDelete_attr3",
      "ematrixTempTempDelete_attr4",
      "ematrixTempTempDelete_attr5",
      "ematrixTempTempDelete_attr6",
      "ematrixTempTempDelete_attr7",
      "ematrixTempTempDelete_attr8",
      "ematrixTempTempDelete_attr9",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_r2_1Eca7Ins (Ptr<Tuple> emission)
{
  RAPIDNET_LOG_INFO ("Prov_r2_1Eca7Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (MATRIXTEMP)->Join (
    emission,
    strlist ("matrixTemp_attr1"),
    strlist ("emission_attr1"));

  result = GetRelation (TRANSITION)->Join (
    result,
    strlist ("transition_attr3", "transition_attr2", "transition_attr1"),
    strlist ("matrixTemp_attr2", "emission_attr3", "emission_attr1"));

  result = GetRelation (OBSERVATION)->Join (
    result,
    strlist ("observation_attr2", "observation_attr1"),
    strlist ("emission_attr2", "emission_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("matrixTemp")),
                    VarExpr::New ("emission_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("matrixTemp_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("matrixTemp_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("matrixTemp_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("transition")),
                    VarExpr::New ("emission_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("emission_attr3")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("matrixTemp_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("transition_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("emission")),
                    VarExpr::New ("emission_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("emission_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("emission_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("emission_attr4")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("observation")),
                    VarExpr::New ("emission_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("emission_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("observation_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("observation_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("emission_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("matrixTemp_attr2"),
      ValueExpr::New (StrValue::New ("START")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("emission_attr3"),
      ValueExpr::New (StrValue::New ("END")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("observation_attr3"),
      Operation::New (RN_PLUS,
        VarExpr::New ("matrixTemp_attr4"),
        ValueExpr::New (Int32Value::New (1))))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("transition_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("emission_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("observation_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EMATRIXTEMPTEMP,
    strlist ("RLOC",
      "emission_attr1",
      "emission_attr3",
      "emission_attr2",
      "observation_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ematrixTempTemp_attr1",
      "ematrixTempTemp_attr2",
      "ematrixTempTemp_attr3",
      "ematrixTempTemp_attr4",
      "ematrixTempTemp_attr5",
      "ematrixTempTemp_attr6",
      "ematrixTempTemp_attr7",
      "ematrixTempTemp_attr8",
      "ematrixTempTemp_attr9",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_r2_1Eca7Del (Ptr<Tuple> emission)
{
  RAPIDNET_LOG_INFO ("Prov_r2_1Eca7Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (MATRIXTEMP)->Join (
    emission,
    strlist ("matrixTemp_attr1"),
    strlist ("emission_attr1"));

  result = GetRelation (TRANSITION)->Join (
    result,
    strlist ("transition_attr3", "transition_attr2", "transition_attr1"),
    strlist ("matrixTemp_attr2", "emission_attr3", "emission_attr1"));

  result = GetRelation (OBSERVATION)->Join (
    result,
    strlist ("observation_attr2", "observation_attr1"),
    strlist ("emission_attr2", "emission_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("matrixTemp")),
                    VarExpr::New ("emission_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("matrixTemp_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("matrixTemp_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("matrixTemp_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("transition")),
                    VarExpr::New ("emission_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("emission_attr3")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("matrixTemp_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("transition_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("emission")),
                    VarExpr::New ("emission_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("emission_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("emission_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("emission_attr4")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("observation")),
                    VarExpr::New ("emission_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("emission_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("observation_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("observation_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("emission_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("matrixTemp_attr2"),
      ValueExpr::New (StrValue::New ("START")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("emission_attr3"),
      ValueExpr::New (StrValue::New ("END")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("observation_attr3"),
      Operation::New (RN_PLUS,
        VarExpr::New ("matrixTemp_attr4"),
        ValueExpr::New (Int32Value::New (1))))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("transition_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("emission_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("observation_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EMATRIXTEMPTEMPDELETE,
    strlist ("RLOC",
      "emission_attr1",
      "emission_attr3",
      "emission_attr2",
      "observation_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ematrixTempTempDelete_attr1",
      "ematrixTempTempDelete_attr2",
      "ematrixTempTempDelete_attr3",
      "ematrixTempTempDelete_attr4",
      "ematrixTempTempDelete_attr5",
      "ematrixTempTempDelete_attr6",
      "ematrixTempTempDelete_attr7",
      "ematrixTempTempDelete_attr8",
      "ematrixTempTempDelete_attr9",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_r2_1Eca11Ins (Ptr<Tuple> observation)
{
  RAPIDNET_LOG_INFO ("Prov_r2_1Eca11Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (MATRIXTEMP)->Join (
    observation,
    strlist ("matrixTemp_attr1"),
    strlist ("observation_attr1"));

  result = GetRelation (TRANSITION)->Join (
    result,
    strlist ("transition_attr3", "transition_attr1"),
    strlist ("matrixTemp_attr2", "observation_attr1"));

  result = GetRelation (EMISSION)->Join (
    result,
    strlist ("emission_attr2", "emission_attr3", "emission_attr1"),
    strlist ("observation_attr2", "transition_attr2", "observation_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("matrixTemp")),
                    VarExpr::New ("observation_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("matrixTemp_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("matrixTemp_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("matrixTemp_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("transition")),
                    VarExpr::New ("observation_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("transition_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("matrixTemp_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("transition_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("emission")),
                    VarExpr::New ("observation_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("observation_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("transition_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("emission_attr4")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("observation")),
                    VarExpr::New ("observation_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("observation_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("observation_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("observation_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("observation_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("matrixTemp_attr2"),
      ValueExpr::New (StrValue::New ("START")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("transition_attr2"),
      ValueExpr::New (StrValue::New ("END")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("observation_attr3"),
      Operation::New (RN_PLUS,
        VarExpr::New ("matrixTemp_attr4"),
        ValueExpr::New (Int32Value::New (1))))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("transition_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("emission_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("observation_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EMATRIXTEMPTEMP,
    strlist ("RLOC",
      "observation_attr1",
      "transition_attr2",
      "observation_attr2",
      "observation_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ematrixTempTemp_attr1",
      "ematrixTempTemp_attr2",
      "ematrixTempTemp_attr3",
      "ematrixTempTemp_attr4",
      "ematrixTempTemp_attr5",
      "ematrixTempTemp_attr6",
      "ematrixTempTemp_attr7",
      "ematrixTempTemp_attr8",
      "ematrixTempTemp_attr9",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_r2_1Eca11Del (Ptr<Tuple> observation)
{
  RAPIDNET_LOG_INFO ("Prov_r2_1Eca11Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (MATRIXTEMP)->Join (
    observation,
    strlist ("matrixTemp_attr1"),
    strlist ("observation_attr1"));

  result = GetRelation (TRANSITION)->Join (
    result,
    strlist ("transition_attr3", "transition_attr1"),
    strlist ("matrixTemp_attr2", "observation_attr1"));

  result = GetRelation (EMISSION)->Join (
    result,
    strlist ("emission_attr2", "emission_attr3", "emission_attr1"),
    strlist ("observation_attr2", "transition_attr2", "observation_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("matrixTemp")),
                    VarExpr::New ("observation_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("matrixTemp_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("matrixTemp_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("matrixTemp_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("transition")),
                    VarExpr::New ("observation_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("transition_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("matrixTemp_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("transition_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("emission")),
                    VarExpr::New ("observation_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("observation_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("transition_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("emission_attr4")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("observation")),
                    VarExpr::New ("observation_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("observation_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("observation_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("observation_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("observation_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("matrixTemp_attr2"),
      ValueExpr::New (StrValue::New ("START")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("transition_attr2"),
      ValueExpr::New (StrValue::New ("END")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("observation_attr3"),
      Operation::New (RN_PLUS,
        VarExpr::New ("matrixTemp_attr4"),
        ValueExpr::New (Int32Value::New (1))))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("transition_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("emission_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("observation_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EMATRIXTEMPTEMPDELETE,
    strlist ("RLOC",
      "observation_attr1",
      "transition_attr2",
      "observation_attr2",
      "observation_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ematrixTempTempDelete_attr1",
      "ematrixTempTempDelete_attr2",
      "ematrixTempTempDelete_attr3",
      "ematrixTempTempDelete_attr4",
      "ematrixTempTempDelete_attr5",
      "ematrixTempTempDelete_attr6",
      "ematrixTempTempDelete_attr7",
      "ematrixTempTempDelete_attr8",
      "ematrixTempTempDelete_attr9",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_r3_1Eca0Ins (Ptr<Tuple> matrixTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (TRANSITION)->Join (
    matrixTemp,
    strlist ("transition_attr3", "transition_attr1"),
    strlist ("matrixTemp_attr2", "matrixTemp_attr1"));

  result = GetRelation (OBSERVATION)->Join (
    result,
    strlist ("observation_attr1"),
    strlist ("matrixTemp_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("matrixTemp")),
                    VarExpr::New ("matrixTemp_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("matrixTemp_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("matrixTemp_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("matrixTemp_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("transition")),
                    VarExpr::New ("matrixTemp_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("transition_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("matrixTemp_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("transition_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("observation")),
                    VarExpr::New ("matrixTemp_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("observation_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("observation_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("observation_attr4")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("matrixTemp_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("transition_attr2"),
      ValueExpr::New (StrValue::New ("END")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("observation_attr2"),
      ValueExpr::New (StrValue::New ("END")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("observation_attr3"),
      Operation::New (RN_PLUS,
        VarExpr::New ("matrixTemp_attr4"),
        ValueExpr::New (Int32Value::New (1))))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("transition_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("observation_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EMATRIXTEMPTEMP,
    strlist ("RLOC",
      "matrixTemp_attr1",
      "transition_attr2",
      "observation_attr2",
      "observation_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ematrixTempTemp_attr1",
      "ematrixTempTemp_attr2",
      "ematrixTempTemp_attr3",
      "ematrixTempTemp_attr4",
      "ematrixTempTemp_attr5",
      "ematrixTempTemp_attr6",
      "ematrixTempTemp_attr7",
      "ematrixTempTemp_attr8",
      "ematrixTempTemp_attr9",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_r3_1Eca0Del (Ptr<Tuple> matrixTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1Eca0Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (TRANSITION)->Join (
    matrixTemp,
    strlist ("transition_attr3", "transition_attr1"),
    strlist ("matrixTemp_attr2", "matrixTemp_attr1"));

  result = GetRelation (OBSERVATION)->Join (
    result,
    strlist ("observation_attr1"),
    strlist ("matrixTemp_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("matrixTemp")),
                    VarExpr::New ("matrixTemp_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("matrixTemp_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("matrixTemp_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("matrixTemp_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("transition")),
                    VarExpr::New ("matrixTemp_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("transition_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("matrixTemp_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("transition_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("observation")),
                    VarExpr::New ("matrixTemp_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("observation_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("observation_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("observation_attr4")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("matrixTemp_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("transition_attr2"),
      ValueExpr::New (StrValue::New ("END")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("observation_attr2"),
      ValueExpr::New (StrValue::New ("END")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("observation_attr3"),
      Operation::New (RN_PLUS,
        VarExpr::New ("matrixTemp_attr4"),
        ValueExpr::New (Int32Value::New (1))))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("transition_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("observation_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EMATRIXTEMPTEMPDELETE,
    strlist ("RLOC",
      "matrixTemp_attr1",
      "transition_attr2",
      "observation_attr2",
      "observation_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ematrixTempTempDelete_attr1",
      "ematrixTempTempDelete_attr2",
      "ematrixTempTempDelete_attr3",
      "ematrixTempTempDelete_attr4",
      "ematrixTempTempDelete_attr5",
      "ematrixTempTempDelete_attr6",
      "ematrixTempTempDelete_attr7",
      "ematrixTempTempDelete_attr8",
      "ematrixTempTempDelete_attr9",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_r3_1Eca3Ins (Ptr<Tuple> transition)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1Eca3Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (MATRIXTEMP)->Join (
    transition,
    strlist ("matrixTemp_attr2", "matrixTemp_attr1"),
    strlist ("transition_attr3", "transition_attr1"));

  result = GetRelation (OBSERVATION)->Join (
    result,
    strlist ("observation_attr1"),
    strlist ("transition_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("matrixTemp")),
                    VarExpr::New ("transition_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("transition_attr3")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("matrixTemp_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("matrixTemp_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("transition")),
                    VarExpr::New ("transition_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("transition_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("transition_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("transition_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("observation")),
                    VarExpr::New ("transition_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("observation_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("observation_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("observation_attr4")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("transition_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("transition_attr2"),
      ValueExpr::New (StrValue::New ("END")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("observation_attr2"),
      ValueExpr::New (StrValue::New ("END")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("observation_attr3"),
      Operation::New (RN_PLUS,
        VarExpr::New ("matrixTemp_attr4"),
        ValueExpr::New (Int32Value::New (1))))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("transition_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("observation_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EMATRIXTEMPTEMP,
    strlist ("RLOC",
      "transition_attr1",
      "transition_attr2",
      "observation_attr2",
      "observation_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ematrixTempTemp_attr1",
      "ematrixTempTemp_attr2",
      "ematrixTempTemp_attr3",
      "ematrixTempTemp_attr4",
      "ematrixTempTemp_attr5",
      "ematrixTempTemp_attr6",
      "ematrixTempTemp_attr7",
      "ematrixTempTemp_attr8",
      "ematrixTempTemp_attr9",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_r3_1Eca3Del (Ptr<Tuple> transition)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1Eca3Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (MATRIXTEMP)->Join (
    transition,
    strlist ("matrixTemp_attr2", "matrixTemp_attr1"),
    strlist ("transition_attr3", "transition_attr1"));

  result = GetRelation (OBSERVATION)->Join (
    result,
    strlist ("observation_attr1"),
    strlist ("transition_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("matrixTemp")),
                    VarExpr::New ("transition_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("transition_attr3")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("matrixTemp_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("matrixTemp_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("transition")),
                    VarExpr::New ("transition_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("transition_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("transition_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("transition_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("observation")),
                    VarExpr::New ("transition_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("observation_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("observation_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("observation_attr4")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("transition_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("transition_attr2"),
      ValueExpr::New (StrValue::New ("END")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("observation_attr2"),
      ValueExpr::New (StrValue::New ("END")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("observation_attr3"),
      Operation::New (RN_PLUS,
        VarExpr::New ("matrixTemp_attr4"),
        ValueExpr::New (Int32Value::New (1))))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("transition_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("observation_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EMATRIXTEMPTEMPDELETE,
    strlist ("RLOC",
      "transition_attr1",
      "transition_attr2",
      "observation_attr2",
      "observation_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ematrixTempTempDelete_attr1",
      "ematrixTempTempDelete_attr2",
      "ematrixTempTempDelete_attr3",
      "ematrixTempTempDelete_attr4",
      "ematrixTempTempDelete_attr5",
      "ematrixTempTempDelete_attr6",
      "ematrixTempTempDelete_attr7",
      "ematrixTempTempDelete_attr8",
      "ematrixTempTempDelete_attr9",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_r3_1Eca7Ins (Ptr<Tuple> observation)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1Eca7Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (MATRIXTEMP)->Join (
    observation,
    strlist ("matrixTemp_attr1"),
    strlist ("observation_attr1"));

  result = GetRelation (TRANSITION)->Join (
    result,
    strlist ("transition_attr3", "transition_attr1"),
    strlist ("matrixTemp_attr2", "observation_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("matrixTemp")),
                    VarExpr::New ("observation_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("matrixTemp_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("matrixTemp_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("matrixTemp_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("transition")),
                    VarExpr::New ("observation_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("transition_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("matrixTemp_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("transition_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("observation")),
                    VarExpr::New ("observation_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("observation_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("observation_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("observation_attr4")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("observation_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("transition_attr2"),
      ValueExpr::New (StrValue::New ("END")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("observation_attr2"),
      ValueExpr::New (StrValue::New ("END")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("observation_attr3"),
      Operation::New (RN_PLUS,
        VarExpr::New ("matrixTemp_attr4"),
        ValueExpr::New (Int32Value::New (1))))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("transition_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("observation_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EMATRIXTEMPTEMP,
    strlist ("RLOC",
      "observation_attr1",
      "transition_attr2",
      "observation_attr2",
      "observation_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ematrixTempTemp_attr1",
      "ematrixTempTemp_attr2",
      "ematrixTempTemp_attr3",
      "ematrixTempTemp_attr4",
      "ematrixTempTemp_attr5",
      "ematrixTempTemp_attr6",
      "ematrixTempTemp_attr7",
      "ematrixTempTemp_attr8",
      "ematrixTempTemp_attr9",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_r3_1Eca7Del (Ptr<Tuple> observation)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1Eca7Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (MATRIXTEMP)->Join (
    observation,
    strlist ("matrixTemp_attr1"),
    strlist ("observation_attr1"));

  result = GetRelation (TRANSITION)->Join (
    result,
    strlist ("transition_attr3", "transition_attr1"),
    strlist ("matrixTemp_attr2", "observation_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("matrixTemp")),
                    VarExpr::New ("observation_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("matrixTemp_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("matrixTemp_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("matrixTemp_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("transition")),
                    VarExpr::New ("observation_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("transition_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("matrixTemp_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("transition_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("observation")),
                    VarExpr::New ("observation_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("observation_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("observation_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("observation_attr4")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("observation_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("transition_attr2"),
      ValueExpr::New (StrValue::New ("END")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("observation_attr2"),
      ValueExpr::New (StrValue::New ("END")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("observation_attr3"),
      Operation::New (RN_PLUS,
        VarExpr::New ("matrixTemp_attr4"),
        ValueExpr::New (Int32Value::New (1))))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("transition_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      VarExpr::New ("observation_attr4"),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EMATRIXTEMPTEMPDELETE,
    strlist ("RLOC",
      "observation_attr1",
      "transition_attr2",
      "observation_attr2",
      "observation_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ematrixTempTempDelete_attr1",
      "ematrixTempTempDelete_attr2",
      "ematrixTempTempDelete_attr3",
      "ematrixTempTempDelete_attr4",
      "ematrixTempTempDelete_attr5",
      "ematrixTempTempDelete_attr6",
      "ematrixTempTempDelete_attr7",
      "ematrixTempTempDelete_attr8",
      "ematrixTempTempDelete_attr9",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_r4_1Eca0Ins (Ptr<Tuple> matrixTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r4_1Eca0Ins triggered");

  Ptr<Tuple> result = matrixTemp;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("matrixTemp")),
                    VarExpr::New ("matrixTemp_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("matrixTemp_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("matrixTemp_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("matrixTemp_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("matrixTemp_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r4"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("matrixTemp_attr2"),
      ValueExpr::New (StrValue::New ("END")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("matrixTemp_attr3"),
      ValueExpr::New (StrValue::New ("END")))));

  result = result->Project (
    EMAXPROBTEMP,
    strlist ("RLOC",
      "matrixTemp_attr1",
      "matrixTemp_attr2",
      "matrixTemp_attr3",
      "matrixTemp_attr4",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("emaxProbTemp_attr1",
      "emaxProbTemp_attr2",
      "emaxProbTemp_attr3",
      "emaxProbTemp_attr4",
      "emaxProbTemp_attr5",
      "emaxProbTemp_attr6",
      "emaxProbTemp_attr7",
      "emaxProbTemp_attr8",
      "emaxProbTemp_attr9",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_r4_1Eca0Del (Ptr<Tuple> matrixTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r4_1Eca0Del triggered");

  Ptr<Tuple> result = matrixTemp;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("matrixTemp")),
                    VarExpr::New ("matrixTemp_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("matrixTemp_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("matrixTemp_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("matrixTemp_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("matrixTemp_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r4"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("matrixTemp_attr2"),
      ValueExpr::New (StrValue::New ("END")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("matrixTemp_attr3"),
      ValueExpr::New (StrValue::New ("END")))));

  result = result->Project (
    EMAXPROBTEMPDELETE,
    strlist ("RLOC",
      "matrixTemp_attr1",
      "matrixTemp_attr2",
      "matrixTemp_attr3",
      "matrixTemp_attr4",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("emaxProbTempDelete_attr1",
      "emaxProbTempDelete_attr2",
      "emaxProbTempDelete_attr3",
      "emaxProbTempDelete_attr4",
      "emaxProbTempDelete_attr5",
      "emaxProbTempDelete_attr6",
      "emaxProbTempDelete_attr7",
      "emaxProbTempDelete_attr8",
      "emaxProbTempDelete_attr9",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_r4_2_ecaAdd (Ptr<Tuple> emaxProbTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r4_2_ecaAdd triggered");

  Ptr<Tuple> result = emaxProbTemp;

  result = result->Project (
    RULEEXEC,
    strlist ("emaxProbTemp_attr1",
      "emaxProbTemp_attr6",
      "emaxProbTemp_attr7",
      "emaxProbTemp_attr8",
      "emaxProbTemp_attr9"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Insert (result);
}

void
Vtbp::Prov_r4_2_ecaDel (Ptr<Tuple> emaxProbTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r4_2_ecaDel triggered");

  Ptr<Tuple> result = emaxProbTempDelete;

  result = result->Project (
    RULEEXEC,
    strlist ("emaxProbTempDelete_attr1",
      "emaxProbTempDelete_attr6",
      "emaxProbTempDelete_attr7",
      "emaxProbTempDelete_attr8",
      "emaxProbTempDelete_attr9"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Delete (result);
}

void
Vtbp::Prov_r4_3_ecaAdd (Ptr<Tuple> emaxProbTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r4_3_ecaAdd triggered");

  Ptr<Tuple> result = emaxProbTemp;

  result = result->Project (
    EMAXPROB,
    strlist ("emaxProbTemp_attr2",
      "emaxProbTemp_attr3",
      "emaxProbTemp_attr4",
      "emaxProbTemp_attr5",
      "emaxProbTemp_attr6",
      "emaxProbTemp_attr7",
      "emaxProbTemp_attr1",
      "emaxProbTemp_attr2"),
    strlist ("emaxProb_attr1",
      "emaxProb_attr2",
      "emaxProb_attr3",
      "emaxProb_attr4",
      "emaxProb_attr5",
      "emaxProb_attr6",
      "emaxProb_attr7",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_r4_3_ecaDel (Ptr<Tuple> emaxProbTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r4_3_ecaDel triggered");

  Ptr<Tuple> result = emaxProbTempDelete;

  result = result->Project (
    EMAXPROBDELETE,
    strlist ("emaxProbTempDelete_attr2",
      "emaxProbTempDelete_attr3",
      "emaxProbTempDelete_attr4",
      "emaxProbTempDelete_attr5",
      "emaxProbTempDelete_attr6",
      "emaxProbTempDelete_attr7",
      "emaxProbTempDelete_attr1",
      "emaxProbTempDelete_attr2"),
    strlist ("emaxProbDelete_attr1",
      "emaxProbDelete_attr2",
      "emaxProbDelete_attr3",
      "emaxProbDelete_attr4",
      "emaxProbDelete_attr5",
      "emaxProbDelete_attr6",
      "emaxProbDelete_attr7",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_r4_4_ecaAdd (Ptr<Tuple> emaxProb)
{
  RAPIDNET_LOG_INFO ("Prov_r4_4_ecaAdd triggered");

  Ptr<Tuple> result = emaxProb;

  result = result->Project (
    MAXPROB,
    strlist ("emaxProb_attr1",
      "emaxProb_attr2",
      "emaxProb_attr3",
      "emaxProb_attr4"),
    strlist ("maxProb_attr1",
      "maxProb_attr2",
      "maxProb_attr3",
      "maxProb_attr4"));

  Insert (result);
}

void
Vtbp::Prov_r4_4_ecaDel (Ptr<Tuple> emaxProbDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r4_4_ecaDel triggered");

  Ptr<Tuple> result = emaxProbDelete;

  result = result->Project (
    MAXPROB,
    strlist ("emaxProbDelete_attr1",
      "emaxProbDelete_attr2",
      "emaxProbDelete_attr3",
      "emaxProbDelete_attr4"),
    strlist ("maxProb_attr1",
      "maxProb_attr2",
      "maxProb_attr3",
      "maxProb_attr4"));

  Delete (result);
}

void
Vtbp::Prov_r4_5_ecaAdd (Ptr<Tuple> emaxProb)
{
  RAPIDNET_LOG_INFO ("Prov_r4_5_ecaAdd triggered");

  Ptr<Tuple> result = emaxProb;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("maxProb")),
                    VarExpr::New ("emaxProb_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("emaxProb_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("emaxProb_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("emaxProb_attr4")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result = result->Project (
    PROV,
    strlist ("emaxProb_attr1",
      "VID",
      "emaxProb_attr5",
      "emaxProb_attr7",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Insert (result);
}

void
Vtbp::Prov_r4_5_ecaDel (Ptr<Tuple> emaxProbDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r4_5_ecaDel triggered");

  Ptr<Tuple> result = emaxProbDelete;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("maxProb")),
                    VarExpr::New ("emaxProbDelete_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("emaxProbDelete_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("emaxProbDelete_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("emaxProbDelete_attr4")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result = result->Project (
    PROV,
    strlist ("emaxProbDelete_attr1",
      "VID",
      "emaxProbDelete_attr5",
      "emaxProbDelete_attr7",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Delete (result);
}

void
Vtbp::Prov_sr1_1Eca0Ins (Ptr<Tuple> emission)
{
  RAPIDNET_LOG_INFO ("Prov_sr1_1Eca0Ins triggered");

  Ptr<Tuple> result = emission;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("emission")),
                    VarExpr::New ("emission_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("emission_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("emission_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("emission_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("emission")),
                    VarExpr::New ("emission_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("emission_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("emission_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("emission_attr4")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("emission"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  VarExpr::New ("Name"),
                  ValueExpr::New (StrValue::New ("("))),
                VarExpr::New ("emission_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("emission_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("emission_attr4")),
      ValueExpr::New (StrValue::New (")")))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("emission_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("sr1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    ESHARESULTTEMP,
    strlist ("RLOC",
      "emission_attr1",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTemp_attr1",
      "eshaResultTemp_attr2",
      "eshaResultTemp_attr3",
      "eshaResultTemp_attr4",
      "eshaResultTemp_attr5",
      "eshaResultTemp_attr6",
      "eshaResultTemp_attr7",
      "eshaResultTemp_attr8",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_sr1_1Eca0Del (Ptr<Tuple> emission)
{
  RAPIDNET_LOG_INFO ("Prov_sr1_1Eca0Del triggered");

  Ptr<Tuple> result = emission;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("emission")),
                    VarExpr::New ("emission_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("emission_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("emission_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("emission_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("emission")),
                    VarExpr::New ("emission_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("emission_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("emission_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("emission_attr4")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("emission"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  VarExpr::New ("Name"),
                  ValueExpr::New (StrValue::New ("("))),
                VarExpr::New ("emission_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("emission_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("emission_attr4")),
      ValueExpr::New (StrValue::New (")")))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("emission_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("sr1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    ESHARESULTTEMPDELETE,
    strlist ("RLOC",
      "emission_attr1",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTempDelete_attr1",
      "eshaResultTempDelete_attr2",
      "eshaResultTempDelete_attr3",
      "eshaResultTempDelete_attr4",
      "eshaResultTempDelete_attr5",
      "eshaResultTempDelete_attr6",
      "eshaResultTempDelete_attr7",
      "eshaResultTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_sr1_2_ecaAdd (Ptr<Tuple> eshaResultTemp)
{
  RAPIDNET_LOG_INFO ("Prov_sr1_2_ecaAdd triggered");

  Ptr<Tuple> result = eshaResultTemp;

  result = result->Project (
    RULEEXEC,
    strlist ("eshaResultTemp_attr1",
      "eshaResultTemp_attr5",
      "eshaResultTemp_attr6",
      "eshaResultTemp_attr7",
      "eshaResultTemp_attr8"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Insert (result);
}

void
Vtbp::Prov_sr1_2_ecaDel (Ptr<Tuple> eshaResultTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_sr1_2_ecaDel triggered");

  Ptr<Tuple> result = eshaResultTempDelete;

  result = result->Project (
    RULEEXEC,
    strlist ("eshaResultTempDelete_attr1",
      "eshaResultTempDelete_attr5",
      "eshaResultTempDelete_attr6",
      "eshaResultTempDelete_attr7",
      "eshaResultTempDelete_attr8"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Delete (result);
}

void
Vtbp::Prov_sr1_3_ecaAdd (Ptr<Tuple> eshaResultTemp)
{
  RAPIDNET_LOG_INFO ("Prov_sr1_3_ecaAdd triggered");

  Ptr<Tuple> result = eshaResultTemp;

  result = result->Project (
    ESHARESULT,
    strlist ("eshaResultTemp_attr2",
      "eshaResultTemp_attr3",
      "eshaResultTemp_attr4",
      "eshaResultTemp_attr5",
      "eshaResultTemp_attr6",
      "eshaResultTemp_attr1",
      "eshaResultTemp_attr2"),
    strlist ("eshaResult_attr1",
      "eshaResult_attr2",
      "eshaResult_attr3",
      "eshaResult_attr4",
      "eshaResult_attr5",
      "eshaResult_attr6",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_sr1_3_ecaDel (Ptr<Tuple> eshaResultTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_sr1_3_ecaDel triggered");

  Ptr<Tuple> result = eshaResultTempDelete;

  result = result->Project (
    ESHARESULTDELETE,
    strlist ("eshaResultTempDelete_attr2",
      "eshaResultTempDelete_attr3",
      "eshaResultTempDelete_attr4",
      "eshaResultTempDelete_attr5",
      "eshaResultTempDelete_attr6",
      "eshaResultTempDelete_attr1",
      "eshaResultTempDelete_attr2"),
    strlist ("eshaResultDelete_attr1",
      "eshaResultDelete_attr2",
      "eshaResultDelete_attr3",
      "eshaResultDelete_attr4",
      "eshaResultDelete_attr5",
      "eshaResultDelete_attr6",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_sr1_4_ecaAdd (Ptr<Tuple> eshaResult)
{
  RAPIDNET_LOG_INFO ("Prov_sr1_4_ecaAdd triggered");

  Ptr<Tuple> result = eshaResult;

  result = result->Project (
    SHARESULT,
    strlist ("eshaResult_attr1",
      "eshaResult_attr2",
      "eshaResult_attr3"),
    strlist ("shaResult_attr1",
      "shaResult_attr2",
      "shaResult_attr3"));

  Insert (result);
}

void
Vtbp::Prov_sr1_4_ecaDel (Ptr<Tuple> eshaResultDelete)
{
  RAPIDNET_LOG_INFO ("Prov_sr1_4_ecaDel triggered");

  Ptr<Tuple> result = eshaResultDelete;

  result = result->Project (
    SHARESULT,
    strlist ("eshaResultDelete_attr1",
      "eshaResultDelete_attr2",
      "eshaResultDelete_attr3"),
    strlist ("shaResult_attr1",
      "shaResult_attr2",
      "shaResult_attr3"));

  Delete (result);
}

void
Vtbp::Prov_sr1_5_ecaAdd (Ptr<Tuple> eshaResult)
{
  RAPIDNET_LOG_INFO ("Prov_sr1_5_ecaAdd triggered");

  Ptr<Tuple> result = eshaResult;

  result->Assign (Assignor::New ("eshaResult_attr2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("shaResult")),
                VarExpr::New ("eshaResult_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("eshaResult_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("eshaResult_attr3")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result = result->Project (
    PROV,
    strlist ("eshaResult_attr1",
      "eshaResult_attr2",
      "eshaResult_attr4",
      "eshaResult_attr6",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Insert (result);
}

void
Vtbp::Prov_sr1_5_ecaDel (Ptr<Tuple> eshaResultDelete)
{
  RAPIDNET_LOG_INFO ("Prov_sr1_5_ecaDel triggered");

  Ptr<Tuple> result = eshaResultDelete;

  result->Assign (Assignor::New ("eshaResultDelete_attr2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("shaResult")),
                VarExpr::New ("eshaResultDelete_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("eshaResultDelete_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("eshaResultDelete_attr3")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result = result->Project (
    PROV,
    strlist ("eshaResultDelete_attr1",
      "eshaResultDelete_attr2",
      "eshaResultDelete_attr4",
      "eshaResultDelete_attr6",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Delete (result);
}

void
Vtbp::Prov_sr2_1Eca0Ins (Ptr<Tuple> transition)
{
  RAPIDNET_LOG_INFO ("Prov_sr2_1Eca0Ins triggered");

  Ptr<Tuple> result = transition;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("transition")),
                    VarExpr::New ("transition_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("transition_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("transition_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("transition_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("transition")),
                    VarExpr::New ("transition_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("transition_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("transition_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("transition_attr4")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("transition"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  VarExpr::New ("Name"),
                  ValueExpr::New (StrValue::New ("("))),
                VarExpr::New ("transition_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("transition_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("transition_attr4")),
      ValueExpr::New (StrValue::New (")")))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("transition_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("sr2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    ESHARESULTTEMP,
    strlist ("RLOC",
      "transition_attr1",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTemp_attr1",
      "eshaResultTemp_attr2",
      "eshaResultTemp_attr3",
      "eshaResultTemp_attr4",
      "eshaResultTemp_attr5",
      "eshaResultTemp_attr6",
      "eshaResultTemp_attr7",
      "eshaResultTemp_attr8",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_sr2_1Eca0Del (Ptr<Tuple> transition)
{
  RAPIDNET_LOG_INFO ("Prov_sr2_1Eca0Del triggered");

  Ptr<Tuple> result = transition;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("transition")),
                    VarExpr::New ("transition_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("transition_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("transition_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("transition_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("transition")),
                    VarExpr::New ("transition_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("transition_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("transition_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("transition_attr4")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("transition"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  VarExpr::New ("Name"),
                  ValueExpr::New (StrValue::New ("("))),
                VarExpr::New ("transition_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("transition_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("transition_attr4")),
      ValueExpr::New (StrValue::New (")")))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("transition_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("sr2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    ESHARESULTTEMPDELETE,
    strlist ("RLOC",
      "transition_attr1",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTempDelete_attr1",
      "eshaResultTempDelete_attr2",
      "eshaResultTempDelete_attr3",
      "eshaResultTempDelete_attr4",
      "eshaResultTempDelete_attr5",
      "eshaResultTempDelete_attr6",
      "eshaResultTempDelete_attr7",
      "eshaResultTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_sr3_1Eca0Ins (Ptr<Tuple> observation)
{
  RAPIDNET_LOG_INFO ("Prov_sr3_1Eca0Ins triggered");

  Ptr<Tuple> result = observation;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("observation")),
                    VarExpr::New ("observation_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("observation_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("observation_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("observation_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("observation")),
                    VarExpr::New ("observation_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("observation_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("observation_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("observation_attr4")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("observation"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  VarExpr::New ("Name"),
                  ValueExpr::New (StrValue::New ("("))),
                VarExpr::New ("observation_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("observation_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("observation_attr4")),
      ValueExpr::New (StrValue::New (")")))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("observation_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("sr3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    ESHARESULTTEMP,
    strlist ("RLOC",
      "observation_attr1",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTemp_attr1",
      "eshaResultTemp_attr2",
      "eshaResultTemp_attr3",
      "eshaResultTemp_attr4",
      "eshaResultTemp_attr5",
      "eshaResultTemp_attr6",
      "eshaResultTemp_attr7",
      "eshaResultTemp_attr8",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_sr3_1Eca0Del (Ptr<Tuple> observation)
{
  RAPIDNET_LOG_INFO ("Prov_sr3_1Eca0Del triggered");

  Ptr<Tuple> result = observation;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("observation")),
                    VarExpr::New ("observation_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("observation_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("observation_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("observation_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("observation")),
                    VarExpr::New ("observation_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("observation_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("observation_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("observation_attr4")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("observation"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  VarExpr::New ("Name"),
                  ValueExpr::New (StrValue::New ("("))),
                VarExpr::New ("observation_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("observation_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("observation_attr4")),
      ValueExpr::New (StrValue::New (")")))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("observation_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("sr3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    ESHARESULTTEMPDELETE,
    strlist ("RLOC",
      "observation_attr1",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTempDelete_attr1",
      "eshaResultTempDelete_attr2",
      "eshaResultTempDelete_attr3",
      "eshaResultTempDelete_attr4",
      "eshaResultTempDelete_attr5",
      "eshaResultTempDelete_attr6",
      "eshaResultTempDelete_attr7",
      "eshaResultTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_sr4_1Eca0Ins (Ptr<Tuple> matrixTemp)
{
  RAPIDNET_LOG_INFO ("Prov_sr4_1Eca0Ins triggered");

  Ptr<Tuple> result = matrixTemp;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("matrixTemp")),
                    VarExpr::New ("matrixTemp_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("matrixTemp_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("matrixTemp_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("matrixTemp_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("matrixTemp")),
                    VarExpr::New ("matrixTemp_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("matrixTemp_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("matrixTemp_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("matrixTemp_attr4")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("matrixTemp"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  VarExpr::New ("Name"),
                  ValueExpr::New (StrValue::New ("("))),
                VarExpr::New ("matrixTemp_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("matrixTemp_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("matrixTemp_attr4")),
      ValueExpr::New (StrValue::New (")")))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("matrixTemp_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("sr4"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    ESHARESULTTEMP,
    strlist ("RLOC",
      "matrixTemp_attr1",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTemp_attr1",
      "eshaResultTemp_attr2",
      "eshaResultTemp_attr3",
      "eshaResultTemp_attr4",
      "eshaResultTemp_attr5",
      "eshaResultTemp_attr6",
      "eshaResultTemp_attr7",
      "eshaResultTemp_attr8",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_sr4_1Eca0Del (Ptr<Tuple> matrixTemp)
{
  RAPIDNET_LOG_INFO ("Prov_sr4_1Eca0Del triggered");

  Ptr<Tuple> result = matrixTemp;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("matrixTemp")),
                    VarExpr::New ("matrixTemp_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("matrixTemp_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("matrixTemp_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("matrixTemp_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("matrixTemp")),
                    VarExpr::New ("matrixTemp_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("matrixTemp_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("matrixTemp_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("matrixTemp_attr4")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("matrixTemp"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  VarExpr::New ("Name"),
                  ValueExpr::New (StrValue::New ("("))),
                VarExpr::New ("matrixTemp_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("matrixTemp_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("matrixTemp_attr4")),
      ValueExpr::New (StrValue::New (")")))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("matrixTemp_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("sr4"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    ESHARESULTTEMPDELETE,
    strlist ("RLOC",
      "matrixTemp_attr1",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTempDelete_attr1",
      "eshaResultTempDelete_attr2",
      "eshaResultTempDelete_attr3",
      "eshaResultTempDelete_attr4",
      "eshaResultTempDelete_attr5",
      "eshaResultTempDelete_attr6",
      "eshaResultTempDelete_attr7",
      "eshaResultTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_sr5_1Eca0Ins (Ptr<Tuple> maxProb)
{
  RAPIDNET_LOG_INFO ("Prov_sr5_1Eca0Ins triggered");

  Ptr<Tuple> result = maxProb;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("maxProb")),
                    VarExpr::New ("maxProb_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("maxProb_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("maxProb_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("maxProb_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("maxProb")),
                    VarExpr::New ("maxProb_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("maxProb_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("maxProb_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("maxProb_attr4")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("maxProb"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  VarExpr::New ("Name"),
                  ValueExpr::New (StrValue::New ("("))),
                VarExpr::New ("maxProb_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("maxProb_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("maxProb_attr4")),
      ValueExpr::New (StrValue::New (")")))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("maxProb_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("sr5"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    ESHARESULTTEMP,
    strlist ("RLOC",
      "maxProb_attr1",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTemp_attr1",
      "eshaResultTemp_attr2",
      "eshaResultTemp_attr3",
      "eshaResultTemp_attr4",
      "eshaResultTemp_attr5",
      "eshaResultTemp_attr6",
      "eshaResultTemp_attr7",
      "eshaResultTemp_attr8",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_sr5_1Eca0Del (Ptr<Tuple> maxProb)
{
  RAPIDNET_LOG_INFO ("Prov_sr5_1Eca0Del triggered");

  Ptr<Tuple> result = maxProb;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("maxProb")),
                    VarExpr::New ("maxProb_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("maxProb_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("maxProb_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("maxProb_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("maxProb")),
                    VarExpr::New ("maxProb_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("maxProb_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("maxProb_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("maxProb_attr4")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("maxProb"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  VarExpr::New ("Name"),
                  ValueExpr::New (StrValue::New ("("))),
                VarExpr::New ("maxProb_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("maxProb_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("maxProb_attr4")),
      ValueExpr::New (StrValue::New (")")))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("maxProb_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("sr5"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    ESHARESULTTEMPDELETE,
    strlist ("RLOC",
      "maxProb_attr1",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTempDelete_attr1",
      "eshaResultTempDelete_attr2",
      "eshaResultTempDelete_attr3",
      "eshaResultTempDelete_attr4",
      "eshaResultTempDelete_attr5",
      "eshaResultTempDelete_attr6",
      "eshaResultTempDelete_attr7",
      "eshaResultTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prov_edb_1Eca1Ins (Ptr<Tuple> emission)
{
  RAPIDNET_LOG_INFO ("Prov_edb_1Eca1Ins triggered");

  Ptr<Tuple> result = emission;

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("emission_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("emission")),
                    VarExpr::New ("emission_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("emission_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("emission_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("emission_attr4")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result->Assign (Assignor::New ("Score",
    VarExpr::New ("emission_attr4")));

  result = result->Project (
    PROV,
    strlist ("emission_attr1",
      "VID",
      "RID",
      "RLoc",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Insert (result);
}

void
Vtbp::Prov_edb_1Eca1Del (Ptr<Tuple> emission)
{
  RAPIDNET_LOG_INFO ("Prov_edb_1Eca1Del triggered");

  Ptr<Tuple> result = emission;

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("emission_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("emission")),
                    VarExpr::New ("emission_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("emission_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("emission_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("emission_attr4")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result->Assign (Assignor::New ("Score",
    VarExpr::New ("emission_attr4")));

  result = result->Project (
    PROV,
    strlist ("emission_attr1",
      "VID",
      "RID",
      "RLoc",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Delete (result);
}

void
Vtbp::Prov_edb_2Eca1Ins (Ptr<Tuple> observation)
{
  RAPIDNET_LOG_INFO ("Prov_edb_2Eca1Ins triggered");

  Ptr<Tuple> result = observation;

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("observation_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("observation")),
                    VarExpr::New ("observation_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("observation_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("observation_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("observation_attr4")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result->Assign (Assignor::New ("Score",
    VarExpr::New ("observation_attr4")));

  result = result->Project (
    PROV,
    strlist ("observation_attr1",
      "VID",
      "RID",
      "RLoc",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Insert (result);
}

void
Vtbp::Prov_edb_2Eca1Del (Ptr<Tuple> observation)
{
  RAPIDNET_LOG_INFO ("Prov_edb_2Eca1Del triggered");

  Ptr<Tuple> result = observation;

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("observation_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("observation")),
                    VarExpr::New ("observation_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("observation_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("observation_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("observation_attr4")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result->Assign (Assignor::New ("Score",
    VarExpr::New ("observation_attr4")));

  result = result->Project (
    PROV,
    strlist ("observation_attr1",
      "VID",
      "RID",
      "RLoc",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Delete (result);
}

void
Vtbp::Prov_edb_3Eca1Ins (Ptr<Tuple> transition)
{
  RAPIDNET_LOG_INFO ("Prov_edb_3Eca1Ins triggered");

  Ptr<Tuple> result = transition;

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("transition_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("transition")),
                    VarExpr::New ("transition_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("transition_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("transition_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("transition_attr4")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result->Assign (Assignor::New ("Score",
    VarExpr::New ("transition_attr4")));

  result = result->Project (
    PROV,
    strlist ("transition_attr1",
      "VID",
      "RID",
      "RLoc",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Insert (result);
}

void
Vtbp::Prov_edb_3Eca1Del (Ptr<Tuple> transition)
{
  RAPIDNET_LOG_INFO ("Prov_edb_3Eca1Del triggered");

  Ptr<Tuple> result = transition;

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("transition_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("transition")),
                    VarExpr::New ("transition_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("transition_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("transition_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("transition_attr4")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result->Assign (Assignor::New ("Score",
    VarExpr::New ("transition_attr4")));

  result = result->Project (
    PROV,
    strlist ("transition_attr1",
      "VID",
      "RID",
      "RLoc",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Delete (result);
}

void
Vtbp::Prep1_eca (Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO ("Prep1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROV)->Join (
    provQuery,
    strlist ("prov_attr2", "prov_attr1"),
    strlist ("provQuery_attr3", "provQuery_attr1"));

  result->Assign (Assignor::New ("Prov",
    FPEdb::New (
      VarExpr::New ("prov_attr5"),
      VarExpr::New ("provQuery_attr1"))));

  result = result->Select (Selector::New (
    Operation::New (RN_GTE,
      FSize::New (
        VarExpr::New ("provQuery_attr4")),
      ValueExpr::New (Int32Value::New (8)))));

  result = result->Project (
    PRETURN,
    strlist ("provQuery_attr5",
      "provQuery_attr2",
      "provQuery_attr3",
      "Prov",
      "provQuery_attr5"),
    strlist ("pReturn_attr1",
      "pReturn_attr2",
      "pReturn_attr3",
      "pReturn_attr4",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prep2_eca (Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO ("Prep2_eca triggered");

  Ptr<Tuple> result = provQuery;

  result->Assign (Assignor::New ("Prov",
    ValueExpr::New (StrValue::New ("c"))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      FMember::New (
        VarExpr::New ("provQuery_attr4"),
        VarExpr::New ("provQuery_attr3")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    PRETURN,
    strlist ("provQuery_attr5",
      "provQuery_attr2",
      "provQuery_attr3",
      "Prov",
      "provQuery_attr5"),
    strlist ("pReturn_attr1",
      "pReturn_attr2",
      "pReturn_attr3",
      "pReturn_attr4",
      RN_DEST));

  Send (result);
}

void
Vtbp::Prep3_eca (Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO ("Prep3_eca triggered");

  Ptr<Tuple> result = provQuery;

  result = result->Select (Selector::New (
    Operation::New (RN_LT,
      FSize::New (
        VarExpr::New ("provQuery_attr4")),
      ValueExpr::New (Int32Value::New (8)))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FMember::New (
        VarExpr::New ("provQuery_attr4"),
        VarExpr::New ("provQuery_attr3")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    PTEMPQUERY,
    strlist ("provQuery_attr1",
      "provQuery_attr2",
      "provQuery_attr3",
      "provQuery_attr4",
      "provQuery_attr5"),
    strlist ("pTempQuery_attr1",
      "pTempQuery_attr2",
      "pTempQuery_attr3",
      "pTempQuery_attr4",
      "pTempQuery_attr5"));

  SendLocal (result);
}

void
Vtbp::Prep4_eca (Ptr<Tuple> pTempQuery)
{
  RAPIDNET_LOG_INFO ("Prep4_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROV)->Join (
    pTempQuery,
    strlist ("prov_attr2", "prov_attr1"),
    strlist ("pTempQuery_attr3", "pTempQuery_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("prov_attr3"),
      VarExpr::New ("pTempQuery_attr3"))));

  result = AggWrapList::New ()->Compute (result, pTempQuery, "prov_attr3");

  result = result->Project (
    TEMPLIST,
    strlist ("pTempQuery_attr1",
      "pTempQuery_attr2",
      "pTempQuery_attr3",
      "pTempQuery_attr4",
      "pTempQuery_attr5",
      "list"),
    strlist ("tempList_attr1",
      "tempList_attr2",
      "tempList_attr3",
      "tempList_attr4",
      "tempList_attr5",
      "tempList_attr6"));

  SendLocal (result);
}

void
Vtbp::Edb1_eca (Ptr<Tuple> tempList)
{
  RAPIDNET_LOG_INFO ("Edb1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROV)->Join (
    tempList,
    strlist ("prov_attr2", "prov_attr1"),
    strlist ("tempList_attr3", "tempList_attr1"));

  result->Assign (Assignor::New ("Prov",
    FPEdb::New (
      VarExpr::New ("prov_attr5"),
      VarExpr::New ("tempList_attr1"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("tempList_attr6")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    PRETURN,
    strlist ("tempList_attr5",
      "tempList_attr2",
      "tempList_attr3",
      "Prov",
      "tempList_attr5"),
    strlist ("pReturn_attr1",
      "pReturn_attr2",
      "pReturn_attr3",
      "pReturn_attr4",
      RN_DEST));

  Send (result);
}

void
Vtbp::Idb1_eca (Ptr<Tuple> tempList)
{
  RAPIDNET_LOG_INFO ("Idb1_eca triggered");

  Ptr<Tuple> result = tempList;

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FSize::New (
        VarExpr::New ("tempList_attr6")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    PQLIST,
    strlist ("tempList_attr1",
      "tempList_attr2",
      "tempList_attr3",
      "tempList_attr4",
      "tempList_attr6"),
    strlist ("pQList_attr1",
      "pQList_attr2",
      "pQList_attr3",
      "pQList_attr4",
      "pQList_attr5"));

  Insert (result);
}

void
Vtbp::Idb2_eca (Ptr<Tuple> tempList)
{
  RAPIDNET_LOG_INFO ("Idb2_eca triggered");

  Ptr<Tuple> result = tempList;

  result->Assign (Assignor::New ("Buf",
    FEmpty::New (
)));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FSize::New (
        VarExpr::New ("tempList_attr6")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    PRESULTTMP,
    strlist ("tempList_attr1",
      "tempList_attr2",
      "tempList_attr5",
      "tempList_attr3",
      "Buf"),
    strlist ("pResultTmp_attr1",
      "pResultTmp_attr2",
      "pResultTmp_attr3",
      "pResultTmp_attr4",
      "pResultTmp_attr5"));

  Insert (result);
}

void
Vtbp::Idb3_eca (Ptr<Tuple> tempList)
{
  RAPIDNET_LOG_INFO ("Idb3_eca triggered");

  Ptr<Tuple> result = tempList;

  result->Assign (Assignor::New ("N",
    ValueExpr::New (Int32Value::New (1))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FSize::New (
        VarExpr::New ("tempList_attr6")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    PITERATE,
    strlist ("tempList_attr1",
      "tempList_attr2",
      "N",
      "tempList_attr5"),
    strlist ("pIterate_attr1",
      "pIterate_attr2",
      "pIterate_attr3",
      "pIterate_attr4"));

  SendLocal (result);
}

void
Vtbp::Idb4_eca (Ptr<Tuple> pIterate)
{
  RAPIDNET_LOG_INFO ("Idb4_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PQLIST)->Join (
    pIterate,
    strlist ("pQList_attr2", "pQList_attr1"),
    strlist ("pIterate_attr2", "pIterate_attr1"));

  result->Assign (Assignor::New ("N",
    Operation::New (RN_PLUS,
      VarExpr::New ("pIterate_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_LT,
      VarExpr::New ("pIterate_attr3"),
      FSize::New (
        VarExpr::New ("pQList_attr5")))));

  result = result->Project (
    PITERATE,
    strlist ("pIterate_attr1",
      "pIterate_attr2",
      "N",
      "pIterate_attr4"),
    strlist ("pIterate_attr1",
      "pIterate_attr2",
      "pIterate_attr3",
      "pIterate_attr4"));

  SendLocal (result);
}

void
Vtbp::Idb5_eca (Ptr<Tuple> pIterate)
{
  RAPIDNET_LOG_INFO ("Idb5_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PQLIST)->Join (
    pIterate,
    strlist ("pQList_attr2", "pQList_attr1"),
    strlist ("pIterate_attr2", "pIterate_attr1"));

  result->Assign (Assignor::New ("RID",
    FItem::New (
      VarExpr::New ("pQList_attr5"),
      VarExpr::New ("pIterate_attr3"))));

  result->Assign (Assignor::New ("NQID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("pIterate_attr2")),
        VarExpr::New ("RID")))));

  result = result->Select (Selector::New (
    Operation::New (RN_LTE,
      VarExpr::New ("pIterate_attr3"),
      FSize::New (
        VarExpr::New ("pQList_attr5")))));

  result = result->Project (
    ERULEQUERY,
    strlist ("pIterate_attr1",
      "NQID",
      "pIterate_attr2",
      "pQList_attr3",
      "RID",
      "pQList_attr4",
      "pIterate_attr4"),
    strlist ("eRuleQuery_attr1",
      "eRuleQuery_attr2",
      "eRuleQuery_attr3",
      "eRuleQuery_attr4",
      "eRuleQuery_attr5",
      "eRuleQuery_attr6",
      "eRuleQuery_attr7"));

  SendLocal (result);
}

void
Vtbp::Idb6_eca (Ptr<Tuple> eRuleQuery)
{
  RAPIDNET_LOG_INFO ("Idb6_eca triggered");

  Ptr<Tuple> result = eRuleQuery;

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("eRuleQuery_attr1")));

  result->Assign (Assignor::New ("P2",
    FAppend::New (
      VarExpr::New ("eRuleQuery_attr4"))));

  result->Assign (Assignor::New ("P",
    FConcat::New (
      VarExpr::New ("eRuleQuery_attr6"),
      VarExpr::New ("P2"))));

  result = result->Project (
    RULEQUERY,
    strlist ("eRuleQuery_attr1",
      "eRuleQuery_attr2",
      "eRuleQuery_attr5",
      "P",
      "$1"),
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "ruleQuery_attr3",
      "ruleQuery_attr4",
      "ruleQuery_attr5"));

  SendLocal (result);
}

void
Vtbp::Idb7_eca (Ptr<Tuple> rReturn)
{
  RAPIDNET_LOG_INFO ("Idb7_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PRESULTTMP)->Join (
    rReturn,
    strlist ("pResultTmp_attr1"),
    strlist ("rReturn_attr1"));

  result->Assign (Assignor::New ("Buf2",
    FAppend::New (
      VarExpr::New ("rReturn_attr4"))));

  result->Assign (Assignor::New ("Buf",
    FConcat::New (
      VarExpr::New ("pResultTmp_attr5"),
      VarExpr::New ("Buf2"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("rReturn_attr2"),
      FSha1::New (
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("")),
            VarExpr::New ("pResultTmp_attr2")),
          VarExpr::New ("rReturn_attr3"))))));

  result = result->Project (
    PRESULTTMP,
    strlist ("rReturn_attr1",
      "pResultTmp_attr2",
      "pResultTmp_attr3",
      "pResultTmp_attr4",
      "Buf"),
    strlist ("pResultTmp_attr1",
      "pResultTmp_attr2",
      "pResultTmp_attr3",
      "pResultTmp_attr4",
      "pResultTmp_attr5"));

  Insert (result);
}

void
Vtbp::Idb8Eca0Ins (Ptr<Tuple> pResultTmp)
{
  RAPIDNET_LOG_INFO ("Idb8Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PQLIST)->Join (
    pResultTmp,
    strlist ("pQList_attr2", "pQList_attr3", "pQList_attr1"),
    strlist ("pResultTmp_attr2", "pResultTmp_attr4", "pResultTmp_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("pResultTmp_attr5")),
      FSize::New (
        VarExpr::New ("pQList_attr5")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FSize::New (
        VarExpr::New ("pResultTmp_attr5")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EPRETURN,
    strlist ("pResultTmp_attr1",
      "pResultTmp_attr2"),
    strlist ("ePReturn_attr1",
      "ePReturn_attr2"));

  SendLocal (result);
}

void
Vtbp::Idb8Eca1Ins (Ptr<Tuple> pQList)
{
  RAPIDNET_LOG_INFO ("Idb8Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PRESULTTMP)->Join (
    pQList,
    strlist ("pResultTmp_attr2", "pResultTmp_attr4", "pResultTmp_attr1"),
    strlist ("pQList_attr2", "pQList_attr3", "pQList_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("pResultTmp_attr5")),
      FSize::New (
        VarExpr::New ("pQList_attr5")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FSize::New (
        VarExpr::New ("pResultTmp_attr5")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EPRETURN,
    strlist ("pQList_attr1",
      "pQList_attr2"),
    strlist ("ePReturn_attr1",
      "ePReturn_attr2"));

  SendLocal (result);
}

void
Vtbp::Idb9_eca (Ptr<Tuple> ePReturn)
{
  RAPIDNET_LOG_INFO ("Idb9_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PRESULTTMP)->Join (
    ePReturn,
    strlist ("pResultTmp_attr2", "pResultTmp_attr1"),
    strlist ("ePReturn_attr2", "ePReturn_attr1"));

  result->Assign (Assignor::New ("Prov",
    FPIdb::New (
      VarExpr::New ("pResultTmp_attr5"),
      VarExpr::New ("ePReturn_attr1"))));

  result = result->Project (
    PRETURN,
    strlist ("pResultTmp_attr3",
      "ePReturn_attr2",
      "pResultTmp_attr4",
      "Prov",
      "pResultTmp_attr3"),
    strlist ("pReturn_attr1",
      "pReturn_attr2",
      "pReturn_attr3",
      "pReturn_attr4",
      RN_DEST));

  Send (result);
}

void
Vtbp::Rv1_eca (Ptr<Tuple> ruleQuery)
{
  RAPIDNET_LOG_INFO ("Rv1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RULEEXEC)->Join (
    ruleQuery,
    strlist ("ruleExec_attr2", "ruleExec_attr1"),
    strlist ("ruleQuery_attr3", "ruleQuery_attr1"));

  result = result->Project (
    RQLIST,
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "ruleExec_attr4",
      "ruleExec_attr3",
      "ruleExec_attr5",
      "ruleQuery_attr4"),
    strlist ("rQList_attr1",
      "rQList_attr2",
      "rQList_attr3",
      "rQList_attr4",
      "rQList_attr5",
      "rQList_attr6"));

  Insert (result);
}

void
Vtbp::Rv2_eca (Ptr<Tuple> ruleQuery)
{
  RAPIDNET_LOG_INFO ("Rv2_eca triggered");

  Ptr<Tuple> result = ruleQuery;

  result->Assign (Assignor::New ("Buf",
    FEmpty::New (
)));

  result = result->Project (
    RRESULTTMP,
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "ruleQuery_attr5",
      "ruleQuery_attr3",
      "Buf"),
    strlist ("rResultTmp_attr1",
      "rResultTmp_attr2",
      "rResultTmp_attr3",
      "rResultTmp_attr4",
      "rResultTmp_attr5"));

  Insert (result);
}

void
Vtbp::Rv3_eca (Ptr<Tuple> ruleQuery)
{
  RAPIDNET_LOG_INFO ("Rv3_eca triggered");

  Ptr<Tuple> result = ruleQuery;

  result->Assign (Assignor::New ("N",
    ValueExpr::New (Int32Value::New (1))));

  result = result->Project (
    RITERATE,
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "N"),
    strlist ("rIterate_attr1",
      "rIterate_attr2",
      "rIterate_attr3"));

  SendLocal (result);
}

void
Vtbp::Rv4_eca (Ptr<Tuple> rIterate)
{
  RAPIDNET_LOG_INFO ("Rv4_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RQLIST)->Join (
    rIterate,
    strlist ("rQList_attr2", "rQList_attr1"),
    strlist ("rIterate_attr2", "rIterate_attr1"));

  result->Assign (Assignor::New ("N",
    Operation::New (RN_PLUS,
      VarExpr::New ("rIterate_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_LT,
      VarExpr::New ("rIterate_attr3"),
      FSize::New (
        VarExpr::New ("rQList_attr5")))));

  result = result->Project (
    RITERATE,
    strlist ("rIterate_attr1",
      "rIterate_attr2",
      "N"),
    strlist ("rIterate_attr1",
      "rIterate_attr2",
      "rIterate_attr3"));

  SendLocal (result);
}

void
Vtbp::Rv5_eca (Ptr<Tuple> rIterate)
{
  RAPIDNET_LOG_INFO ("Rv5_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RQLIST)->Join (
    rIterate,
    strlist ("rQList_attr2", "rQList_attr1"),
    strlist ("rIterate_attr2", "rIterate_attr1"));

  result->Assign (Assignor::New ("VID",
    FItem::New (
      VarExpr::New ("rQList_attr5"),
      VarExpr::New ("rIterate_attr3"))));

  result->Assign (Assignor::New ("NQID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("rIterate_attr2")),
        VarExpr::New ("VID")))));

  result = result->Project (
    EPROVQUERY,
    strlist ("rIterate_attr1",
      "NQID",
      "VID",
      "rQList_attr6"),
    strlist ("eProvQuery_attr1",
      "eProvQuery_attr2",
      "eProvQuery_attr3",
      "eProvQuery_attr4"));

  SendLocal (result);
}

void
Vtbp::Rv6_eca (Ptr<Tuple> eProvQuery)
{
  RAPIDNET_LOG_INFO ("Rv6_eca triggered");

  Ptr<Tuple> result = eProvQuery;

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("eProvQuery_attr1")));

  result = result->Project (
    PROVQUERY,
    strlist ("eProvQuery_attr1",
      "eProvQuery_attr2",
      "eProvQuery_attr3",
      "eProvQuery_attr4",
      "$1"),
    strlist ("provQuery_attr1",
      "provQuery_attr2",
      "provQuery_attr3",
      "provQuery_attr4",
      "provQuery_attr5"));

  SendLocal (result);
}

void
Vtbp::Rv7_eca (Ptr<Tuple> pReturn)
{
  RAPIDNET_LOG_INFO ("Rv7_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RRESULTTMP)->Join (
    pReturn,
    strlist ("rResultTmp_attr1"),
    strlist ("pReturn_attr1"));

  result->Assign (Assignor::New ("Buf2",
    FAppend::New (
      VarExpr::New ("pReturn_attr4"))));

  result->Assign (Assignor::New ("Buf",
    FConcat::New (
      VarExpr::New ("rResultTmp_attr5"),
      VarExpr::New ("Buf2"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("pReturn_attr2"),
      FSha1::New (
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("")),
            VarExpr::New ("rResultTmp_attr2")),
          VarExpr::New ("pReturn_attr3"))))));

  result = result->Project (
    RRESULTTMP,
    strlist ("pReturn_attr1",
      "rResultTmp_attr2",
      "rResultTmp_attr3",
      "rResultTmp_attr4",
      "Buf"),
    strlist ("rResultTmp_attr1",
      "rResultTmp_attr2",
      "rResultTmp_attr3",
      "rResultTmp_attr4",
      "rResultTmp_attr5"));

  Insert (result);
}

void
Vtbp::Rv8Eca0Ins (Ptr<Tuple> rResultTmp)
{
  RAPIDNET_LOG_INFO ("Rv8Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RQLIST)->Join (
    rResultTmp,
    strlist ("rQList_attr2", "rQList_attr1"),
    strlist ("rResultTmp_attr2", "rResultTmp_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("rResultTmp_attr5")),
      FSize::New (
        VarExpr::New ("rQList_attr5")))));

  result = result->Project (
    ERRETURN,
    strlist ("rResultTmp_attr1",
      "rResultTmp_attr2",
      "rQList_attr3",
      "rQList_attr4"),
    strlist ("eRReturn_attr1",
      "eRReturn_attr2",
      "eRReturn_attr3",
      "eRReturn_attr4"));

  SendLocal (result);
}

void
Vtbp::Rv8Eca1Ins (Ptr<Tuple> rQList)
{
  RAPIDNET_LOG_INFO ("Rv8Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RRESULTTMP)->Join (
    rQList,
    strlist ("rResultTmp_attr2", "rResultTmp_attr1"),
    strlist ("rQList_attr2", "rQList_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("rResultTmp_attr5")),
      FSize::New (
        VarExpr::New ("rQList_attr5")))));

  result = result->Project (
    ERRETURN,
    strlist ("rQList_attr1",
      "rQList_attr2",
      "rQList_attr3",
      "rQList_attr4"),
    strlist ("eRReturn_attr1",
      "eRReturn_attr2",
      "eRReturn_attr3",
      "eRReturn_attr4"));

  SendLocal (result);
}

void
Vtbp::Rv9_eca (Ptr<Tuple> eRReturn)
{
  RAPIDNET_LOG_INFO ("Rv9_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RRESULTTMP)->Join (
    eRReturn,
    strlist ("rResultTmp_attr2", "rResultTmp_attr1"),
    strlist ("eRReturn_attr2", "eRReturn_attr1"));

  result->Assign (Assignor::New ("Prov",
    FPRule::New (
      VarExpr::New ("rResultTmp_attr5"),
      VarExpr::New ("eRReturn_attr1"),
      VarExpr::New ("eRReturn_attr3"),
      VarExpr::New ("eRReturn_attr4"))));

  result = result->Project (
    RRETURN,
    strlist ("rResultTmp_attr3",
      "eRReturn_attr2",
      "rResultTmp_attr4",
      "Prov",
      "rResultTmp_attr3"),
    strlist ("rReturn_attr1",
      "rReturn_attr2",
      "rReturn_attr3",
      "rReturn_attr4",
      RN_DEST));

  Send (result);
}

