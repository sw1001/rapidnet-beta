/* A RapidNet application. Generated by RapidNet compiler. */

#include "vqap.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::vqap;

const string Vqap::ANS = "ans";
const string Vqap::CANDIDATE = "candidate";
const string Vqap::EPRETURN = "ePReturn";
const string Vqap::EPROVQUERY = "eProvQuery";
const string Vqap::ERRETURN = "eRReturn";
const string Vqap::ERULEQUERY = "eRuleQuery";
const string Vqap::EANS = "eans";
const string Vqap::EANSDELETE = "eansDelete";
const string Vqap::EANSTEMP = "eansTemp";
const string Vqap::EANSTEMPDELETE = "eansTempDelete";
const string Vqap::ECANDIDATE = "ecandidate";
const string Vqap::ECANDIDATEDELETE = "ecandidateDelete";
const string Vqap::ECANDIDATETEMP = "ecandidateTemp";
const string Vqap::ECANDIDATETEMPDELETE = "ecandidateTempDelete";
const string Vqap::EHASIMGANS = "ehasImgAns";
const string Vqap::EHASIMGANSDELETE = "ehasImgAnsDelete";
const string Vqap::EHASIMGANSTEMP = "ehasImgAnsTemp";
const string Vqap::EHASIMGANSTEMPDELETE = "ehasImgAnsTempDelete";
const string Vqap::ESHARESULT = "eshaResult";
const string Vqap::ESHARESULTDELETE = "eshaResultDelete";
const string Vqap::ESHARESULTTEMP = "eshaResultTemp";
const string Vqap::ESHARESULTTEMPDELETE = "eshaResultTempDelete";
const string Vqap::ESIMREP1 = "esimRep1";
const string Vqap::ESIMREP1DELETE = "esimRep1Delete";
const string Vqap::ESIMREP1TEMP = "esimRep1Temp";
const string Vqap::ESIMREP1TEMPDELETE = "esimRep1TempDelete";
const string Vqap::ESIMREP2 = "esimRep2";
const string Vqap::ESIMREP2DELETE = "esimRep2Delete";
const string Vqap::ESIMREP2TEMP = "esimRep2Temp";
const string Vqap::ESIMREP2TEMPDELETE = "esimRep2TempDelete";
const string Vqap::HASIMG = "hasImg";
const string Vqap::HASIMGANS = "hasImgAns";
const string Vqap::HASQ = "hasQ";
const string Vqap::PITERATE = "pIterate";
const string Vqap::PQLIST = "pQList";
const string Vqap::PRESULTTMP = "pResultTmp";
const string Vqap::PRETURN = "pReturn";
const string Vqap::PROV = "prov";
const string Vqap::PROVQUERY = "provQuery";
const string Vqap::RITERATE = "rIterate";
const string Vqap::RQLIST = "rQList";
const string Vqap::RRESULTTMP = "rResultTmp";
const string Vqap::RRETURN = "rReturn";
const string Vqap::RULEEXEC = "ruleExec";
const string Vqap::RULEQUERY = "ruleQuery";
const string Vqap::SHARESULT = "shaResult";
const string Vqap::SIM = "sim";
const string Vqap::SIMREP1 = "simRep1";
const string Vqap::SIMREP2 = "simRep2";
const string Vqap::WORD = "word";

NS_LOG_COMPONENT_DEFINE ("Vqap");
NS_OBJECT_ENSURE_REGISTERED (Vqap);

TypeId
Vqap::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::vqap::Vqap")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<Vqap> ()
    ;
  return tid;
}

Vqap::Vqap()
{
  NS_LOG_FUNCTION_NOARGS ();
}

Vqap::~Vqap()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
Vqap::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
Vqap::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("Vqap Application Started");
}

void
Vqap::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("Vqap Application Stopped");
}

void
Vqap::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (ANS, attrdeflist (
    attrdef ("ans_attr1", IPV4),
    attrdef ("ans_attr2", IPV4)));

  AddRelationWithKeys (CANDIDATE, attrdeflist (
    attrdef ("candidate_attr1", IPV4),
    attrdef ("candidate_attr2", IPV4)));

  AddRelationWithKeys (HASIMG, attrdeflist (
    attrdef ("hasImg_attr1", IPV4),
    attrdef ("hasImg_attr2", IPV4),
    attrdef ("hasImg_attr3", IPV4),
    attrdef ("hasImg_attr4", IPV4),
    attrdef ("hasImg_attr5", IPV4)));

  AddRelationWithKeys (HASIMGANS, attrdeflist (
    attrdef ("hasImgAns_attr1", IPV4),
    attrdef ("hasImgAns_attr2", IPV4),
    attrdef ("hasImgAns_attr3", IPV4),
    attrdef ("hasImgAns_attr4", IPV4),
    attrdef ("hasImgAns_attr5", IPV4)));

  AddRelationWithKeys (HASQ, attrdeflist (
    attrdef ("hasQ_attr1", IPV4),
    attrdef ("hasQ_attr2", IPV4),
    attrdef ("hasQ_attr3", IPV4),
    attrdef ("hasQ_attr4", IPV4),
    attrdef ("hasQ_attr5", IPV4)));

  AddRelationWithKeys (PQLIST, attrdeflist (
    attrdef ("pQList_attr1", IPV4),
    attrdef ("pQList_attr2", ID)));

  AddRelationWithKeys (PRESULTTMP, attrdeflist (
    attrdef ("pResultTmp_attr1", IPV4),
    attrdef ("pResultTmp_attr2", ID)));

  AddRelationWithKeys (PROV, attrdeflist (
    attrdef ("prov_attr1", IPV4),
    attrdef ("prov_attr2", ID),
    attrdef ("prov_attr3", ID)));

  AddRelationWithKeys (RQLIST, attrdeflist (
    attrdef ("rQList_attr1", IPV4),
    attrdef ("rQList_attr2", ID)));

  AddRelationWithKeys (RRESULTTMP, attrdeflist (
    attrdef ("rResultTmp_attr1", IPV4),
    attrdef ("rResultTmp_attr2", ID)));

  AddRelationWithKeys (RULEEXEC, attrdeflist (
    attrdef ("ruleExec_attr1", IPV4),
    attrdef ("ruleExec_attr2", ID)));

  AddRelationWithKeys (SHARESULT, attrdeflist (
    attrdef ("shaResult_attr1", IPV4),
    attrdef ("shaResult_attr2", ID),
    attrdef ("shaResult_attr3", STR)));

  AddRelationWithKeys (SIM, attrdeflist (
    attrdef ("sim_attr1", IPV4),
    attrdef ("sim_attr2", IPV4),
    attrdef ("sim_attr3", IPV4),
    attrdef ("sim_attr4", IPV4)));

  AddRelationWithKeys (SIMREP1, attrdeflist (
    attrdef ("simRep1_attr1", IPV4),
    attrdef ("simRep1_attr2", IPV4),
    attrdef ("simRep1_attr3", IPV4),
    attrdef ("simRep1_attr4", IPV4)));

  AddRelationWithKeys (SIMREP2, attrdeflist (
    attrdef ("simRep2_attr1", IPV4),
    attrdef ("simRep2_attr2", IPV4),
    attrdef ("simRep2_attr3", IPV4),
    attrdef ("simRep2_attr4", IPV4)));

  AddRelationWithKeys (WORD, attrdeflist (
    attrdef ("word_attr1", IPV4),
    attrdef ("word_attr2", IPV4),
    attrdef ("word_attr3", IPV4)));

}

void
Vqap::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsInsertEvent (tuple, SIM))
    {
      Prov_ra_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, SIM))
    {
      Prov_ra_1Eca0Del (tuple);
    }
  if (IsRecvEvent (tuple, ESIMREP1TEMP))
    {
      Prov_ra_2_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ESIMREP1TEMPDELETE))
    {
      Prov_ra_2_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ESIMREP1TEMP))
    {
      Prov_ra_3_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ESIMREP1TEMPDELETE))
    {
      Prov_ra_3_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ESIMREP1))
    {
      Prov_ra_4_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ESIMREP1DELETE))
    {
      Prov_ra_4_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ESIMREP1))
    {
      Prov_ra_5_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ESIMREP1DELETE))
    {
      Prov_ra_5_ecaDel (tuple);
    }
  if (IsInsertEvent (tuple, SIM))
    {
      Prov_rb_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, SIM))
    {
      Prov_rb_1Eca0Del (tuple);
    }
  if (IsRecvEvent (tuple, ESIMREP2TEMP))
    {
      Prov_rb_2_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ESIMREP2TEMPDELETE))
    {
      Prov_rb_2_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ESIMREP2TEMP))
    {
      Prov_rb_3_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ESIMREP2TEMPDELETE))
    {
      Prov_rb_3_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ESIMREP2))
    {
      Prov_rb_4_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ESIMREP2DELETE))
    {
      Prov_rb_4_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ESIMREP2))
    {
      Prov_rb_5_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ESIMREP2DELETE))
    {
      Prov_rb_5_ecaDel (tuple);
    }
  if (IsInsertEvent (tuple, WORD))
    {
      Prov_r1_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, WORD))
    {
      Prov_r1_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, HASIMG))
    {
      Prov_r1_1Eca3Ins (tuple);
    }
  if (IsDeleteEvent (tuple, HASIMG))
    {
      Prov_r1_1Eca3Del (tuple);
    }
  if (IsInsertEvent (tuple, SIM))
    {
      Prov_r1_1Eca7Ins (tuple);
    }
  if (IsDeleteEvent (tuple, SIM))
    {
      Prov_r1_1Eca7Del (tuple);
    }
  if (IsInsertEvent (tuple, SIMREP1))
    {
      Prov_r1_1Eca11Ins (tuple);
    }
  if (IsDeleteEvent (tuple, SIMREP1))
    {
      Prov_r1_1Eca11Del (tuple);
    }
  if (IsRecvEvent (tuple, EHASIMGANSTEMP))
    {
      Prov_r1_2_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EHASIMGANSTEMPDELETE))
    {
      Prov_r1_2_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EHASIMGANSTEMP))
    {
      Prov_r1_3_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EHASIMGANSTEMPDELETE))
    {
      Prov_r1_3_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EHASIMGANS))
    {
      Prov_r1_4_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EHASIMGANSDELETE))
    {
      Prov_r1_4_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EHASIMGANS))
    {
      Prov_r1_5_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EHASIMGANSDELETE))
    {
      Prov_r1_5_ecaDel (tuple);
    }
  if (IsInsertEvent (tuple, WORD))
    {
      Prov_r2_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, WORD))
    {
      Prov_r2_1Eca0Del (tuple);
    }
  if (IsRecvEvent (tuple, ECANDIDATETEMP))
    {
      Prov_r2_2_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ECANDIDATETEMPDELETE))
    {
      Prov_r2_2_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ECANDIDATETEMP))
    {
      Prov_r2_3_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ECANDIDATETEMPDELETE))
    {
      Prov_r2_3_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ECANDIDATE))
    {
      Prov_r2_4_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ECANDIDATEDELETE))
    {
      Prov_r2_4_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ECANDIDATE))
    {
      Prov_r2_5_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ECANDIDATEDELETE))
    {
      Prov_r2_5_ecaDel (tuple);
    }
  if (IsInsertEvent (tuple, WORD))
    {
      Prov_r3_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, WORD))
    {
      Prov_r3_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, HASQ))
    {
      Prov_r3_1Eca3Ins (tuple);
    }
  if (IsDeleteEvent (tuple, HASQ))
    {
      Prov_r3_1Eca3Del (tuple);
    }
  if (IsInsertEvent (tuple, HASIMGANS))
    {
      Prov_r3_1Eca7Ins (tuple);
    }
  if (IsDeleteEvent (tuple, HASIMGANS))
    {
      Prov_r3_1Eca7Del (tuple);
    }
  if (IsInsertEvent (tuple, SIM))
    {
      Prov_r3_1Eca11Ins (tuple);
    }
  if (IsDeleteEvent (tuple, SIM))
    {
      Prov_r3_1Eca11Del (tuple);
    }
  if (IsInsertEvent (tuple, SIMREP1))
    {
      Prov_r3_1Eca15Ins (tuple);
    }
  if (IsDeleteEvent (tuple, SIMREP1))
    {
      Prov_r3_1Eca15Del (tuple);
    }
  if (IsInsertEvent (tuple, SIMREP2))
    {
      Prov_r3_1Eca19Ins (tuple);
    }
  if (IsDeleteEvent (tuple, SIMREP2))
    {
      Prov_r3_1Eca19Del (tuple);
    }
  if (IsInsertEvent (tuple, CANDIDATE))
    {
      Prov_r4_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, CANDIDATE))
    {
      Prov_r4_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, HASQ))
    {
      Prov_r4_1Eca3Ins (tuple);
    }
  if (IsDeleteEvent (tuple, HASQ))
    {
      Prov_r4_1Eca3Del (tuple);
    }
  if (IsInsertEvent (tuple, HASIMG))
    {
      Prov_r4_1Eca8Ins (tuple);
    }
  if (IsDeleteEvent (tuple, HASIMG))
    {
      Prov_r4_1Eca8Del (tuple);
    }
  if (IsRecvEvent (tuple, EANSTEMP))
    {
      Prov_r4_2_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EANSTEMPDELETE))
    {
      Prov_r4_2_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EANSTEMP))
    {
      Prov_r4_3_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EANSTEMPDELETE))
    {
      Prov_r4_3_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EANS))
    {
      Prov_r4_4_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EANSDELETE))
    {
      Prov_r4_4_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EANS))
    {
      Prov_r4_5_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EANSDELETE))
    {
      Prov_r4_5_ecaDel (tuple);
    }
  if (IsInsertEvent (tuple, CANDIDATE))
    {
      Prov_r5_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, CANDIDATE))
    {
      Prov_r5_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, HASQ))
    {
      Prov_r5_1Eca3Ins (tuple);
    }
  if (IsDeleteEvent (tuple, HASQ))
    {
      Prov_r5_1Eca3Del (tuple);
    }
  if (IsInsertEvent (tuple, HASIMG))
    {
      Prov_r5_1Eca8Ins (tuple);
    }
  if (IsDeleteEvent (tuple, HASIMG))
    {
      Prov_r5_1Eca8Del (tuple);
    }
  if (IsInsertEvent (tuple, SIM))
    {
      Prov_r5_1Eca12Ins (tuple);
    }
  if (IsDeleteEvent (tuple, SIM))
    {
      Prov_r5_1Eca12Del (tuple);
    }
  if (IsInsertEvent (tuple, CANDIDATE))
    {
      Prov_r6_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, CANDIDATE))
    {
      Prov_r6_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, HASQ))
    {
      Prov_r6_1Eca3Ins (tuple);
    }
  if (IsDeleteEvent (tuple, HASQ))
    {
      Prov_r6_1Eca3Del (tuple);
    }
  if (IsInsertEvent (tuple, HASIMG))
    {
      Prov_r6_1Eca8Ins (tuple);
    }
  if (IsDeleteEvent (tuple, HASIMG))
    {
      Prov_r6_1Eca8Del (tuple);
    }
  if (IsInsertEvent (tuple, SIM))
    {
      Prov_r6_1Eca12Ins (tuple);
    }
  if (IsDeleteEvent (tuple, SIM))
    {
      Prov_r6_1Eca12Del (tuple);
    }
  if (IsInsertEvent (tuple, SIMREP1))
    {
      Prov_r6_1Eca16Ins (tuple);
    }
  if (IsDeleteEvent (tuple, SIMREP1))
    {
      Prov_r6_1Eca16Del (tuple);
    }
  if (IsInsertEvent (tuple, SIMREP2))
    {
      Prov_r6_1Eca20Ins (tuple);
    }
  if (IsDeleteEvent (tuple, SIMREP2))
    {
      Prov_r6_1Eca20Del (tuple);
    }
  if (IsInsertEvent (tuple, WORD))
    {
      Prov_r7_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, WORD))
    {
      Prov_r7_1Eca0Del (tuple);
    }
  if (IsRecvEvent (tuple, ESHARESULTTEMP))
    {
      Prov_r7_2_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ESHARESULTTEMPDELETE))
    {
      Prov_r7_2_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ESHARESULTTEMP))
    {
      Prov_r7_3_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ESHARESULTTEMPDELETE))
    {
      Prov_r7_3_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ESHARESULT))
    {
      Prov_r7_4_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ESHARESULTDELETE))
    {
      Prov_r7_4_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ESHARESULT))
    {
      Prov_r7_5_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ESHARESULTDELETE))
    {
      Prov_r7_5_ecaDel (tuple);
    }
  if (IsInsertEvent (tuple, HASIMG))
    {
      Prov_r8_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, HASIMG))
    {
      Prov_r8_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, HASQ))
    {
      Prov_r9_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, HASQ))
    {
      Prov_r9_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, SIM))
    {
      Prov_r10_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, SIM))
    {
      Prov_r10_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, SIMREP1))
    {
      Prov_r11_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, SIMREP1))
    {
      Prov_r11_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, SIMREP2))
    {
      Prov_r12_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, SIMREP2))
    {
      Prov_r12_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, HASIMG))
    {
      Prov_edb_1Eca1Ins (tuple);
    }
  if (IsDeleteEvent (tuple, HASIMG))
    {
      Prov_edb_1Eca1Del (tuple);
    }
  if (IsInsertEvent (tuple, HASQ))
    {
      Prov_edb_2Eca1Ins (tuple);
    }
  if (IsDeleteEvent (tuple, HASQ))
    {
      Prov_edb_2Eca1Del (tuple);
    }
  if (IsInsertEvent (tuple, SIM))
    {
      Prov_edb_3Eca1Ins (tuple);
    }
  if (IsDeleteEvent (tuple, SIM))
    {
      Prov_edb_3Eca1Del (tuple);
    }
  if (IsInsertEvent (tuple, WORD))
    {
      Prov_edb_4Eca1Ins (tuple);
    }
  if (IsDeleteEvent (tuple, WORD))
    {
      Prov_edb_4Eca1Del (tuple);
    }
  if (IsRecvEvent (tuple, PROVQUERY))
    {
      Edb1_eca (tuple);
    }
  if (IsRecvEvent (tuple, PROVQUERY))
    {
      Idb1a_eca (tuple);
    }
  if (IsRecvEvent (tuple, PROVQUERY))
    {
      Idb1b_eca (tuple);
    }
  if (IsRecvEvent (tuple, PROVQUERY))
    {
      Idb2_eca (tuple);
    }
  if (IsRecvEvent (tuple, PROVQUERY))
    {
      Idb3_eca (tuple);
    }
  if (IsRecvEvent (tuple, PITERATE))
    {
      Idb4_eca (tuple);
    }
  if (IsRecvEvent (tuple, PITERATE))
    {
      Idb5_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERULEQUERY))
    {
      Idb6a_eca (tuple);
    }
  if (IsRecvEvent (tuple, RRETURN))
    {
      Idb7_eca (tuple);
    }
  if (IsInsertEvent (tuple, PRESULTTMP))
    {
      Idb8Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, PQLIST))
    {
      Idb8Eca1Ins (tuple);
    }
  if (IsRecvEvent (tuple, EPRETURN))
    {
      Idb9_eca (tuple);
    }
  if (IsRecvEvent (tuple, RULEQUERY))
    {
      Rv1_eca (tuple);
    }
  if (IsRecvEvent (tuple, RULEQUERY))
    {
      Rv2_eca (tuple);
    }
  if (IsRecvEvent (tuple, RULEQUERY))
    {
      Rv3_eca (tuple);
    }
  if (IsRecvEvent (tuple, RITERATE))
    {
      Rv4_eca (tuple);
    }
  if (IsRecvEvent (tuple, RITERATE))
    {
      Rv5_eca (tuple);
    }
  if (IsRecvEvent (tuple, EPROVQUERY))
    {
      Rv6_eca (tuple);
    }
  if (IsRecvEvent (tuple, PRETURN))
    {
      Rv7_eca (tuple);
    }
  if (IsInsertEvent (tuple, RRESULTTMP))
    {
      Rv8Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, RQLIST))
    {
      Rv8Eca1Ins (tuple);
    }
  if (IsRecvEvent (tuple, ERRETURN))
    {
      Rv9_eca (tuple);
    }
}

void
Vqap::Prov_ra_1Eca0Ins (Ptr<Tuple> sim)
{
  RAPIDNET_LOG_INFO ("Prov_ra_1Eca0Ins triggered");

  Ptr<Tuple> result = sim;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("sim_attr1")),
            VarExpr::New ("sim_attr2")),
          VarExpr::New ("sim_attr3")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("sim_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("ra"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESIMREP1TEMP,
    strlist ("RLOC",
      "Local",
      "sim_attr2",
      "sim_attr3",
      "sim_attr4",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("esimRep1Temp_attr1",
      "esimRep1Temp_attr2",
      "esimRep1Temp_attr3",
      "esimRep1Temp_attr4",
      "esimRep1Temp_attr5",
      "esimRep1Temp_attr6",
      "esimRep1Temp_attr7",
      "esimRep1Temp_attr8",
      "esimRep1Temp_attr9",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_ra_1Eca0Del (Ptr<Tuple> sim)
{
  RAPIDNET_LOG_INFO ("Prov_ra_1Eca0Del triggered");

  Ptr<Tuple> result = sim;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("sim_attr1")),
            VarExpr::New ("sim_attr2")),
          VarExpr::New ("sim_attr3")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("sim_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("ra"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESIMREP1TEMPDELETE,
    strlist ("RLOC",
      "Local",
      "sim_attr2",
      "sim_attr3",
      "sim_attr4",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("esimRep1TempDelete_attr1",
      "esimRep1TempDelete_attr2",
      "esimRep1TempDelete_attr3",
      "esimRep1TempDelete_attr4",
      "esimRep1TempDelete_attr5",
      "esimRep1TempDelete_attr6",
      "esimRep1TempDelete_attr7",
      "esimRep1TempDelete_attr8",
      "esimRep1TempDelete_attr9",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_ra_2_ecaAdd (Ptr<Tuple> esimRep1Temp)
{
  RAPIDNET_LOG_INFO ("Prov_ra_2_ecaAdd triggered");

  Ptr<Tuple> result = esimRep1Temp;

  result = result->Project (
    RULEEXEC,
    strlist ("esimRep1Temp_attr1",
      "esimRep1Temp_attr6",
      "esimRep1Temp_attr7",
      "esimRep1Temp_attr8",
      "esimRep1Temp_attr9"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Insert (result);
}

void
Vqap::Prov_ra_2_ecaDel (Ptr<Tuple> esimRep1TempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_ra_2_ecaDel triggered");

  Ptr<Tuple> result = esimRep1TempDelete;

  result = result->Project (
    RULEEXEC,
    strlist ("esimRep1TempDelete_attr1",
      "esimRep1TempDelete_attr6",
      "esimRep1TempDelete_attr7",
      "esimRep1TempDelete_attr8",
      "esimRep1TempDelete_attr9"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Delete (result);
}

void
Vqap::Prov_ra_3_ecaAdd (Ptr<Tuple> esimRep1Temp)
{
  RAPIDNET_LOG_INFO ("Prov_ra_3_ecaAdd triggered");

  Ptr<Tuple> result = esimRep1Temp;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESIMREP1,
    strlist ("Local",
      "esimRep1Temp_attr3",
      "esimRep1Temp_attr4",
      "esimRep1Temp_attr5",
      "esimRep1Temp_attr6",
      "esimRep1Temp_attr7",
      "esimRep1Temp_attr1",
      "Local"),
    strlist ("esimRep1_attr1",
      "esimRep1_attr2",
      "esimRep1_attr3",
      "esimRep1_attr4",
      "esimRep1_attr5",
      "esimRep1_attr6",
      "esimRep1_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_ra_3_ecaDel (Ptr<Tuple> esimRep1TempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_ra_3_ecaDel triggered");

  Ptr<Tuple> result = esimRep1TempDelete;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESIMREP1DELETE,
    strlist ("Local",
      "esimRep1TempDelete_attr3",
      "esimRep1TempDelete_attr4",
      "esimRep1TempDelete_attr5",
      "esimRep1TempDelete_attr6",
      "esimRep1TempDelete_attr7",
      "esimRep1TempDelete_attr1",
      "Local"),
    strlist ("esimRep1Delete_attr1",
      "esimRep1Delete_attr2",
      "esimRep1Delete_attr3",
      "esimRep1Delete_attr4",
      "esimRep1Delete_attr5",
      "esimRep1Delete_attr6",
      "esimRep1Delete_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_ra_4_ecaAdd (Ptr<Tuple> esimRep1)
{
  RAPIDNET_LOG_INFO ("Prov_ra_4_ecaAdd triggered");

  Ptr<Tuple> result = esimRep1;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    SIMREP1,
    strlist ("Local",
      "esimRep1_attr2",
      "esimRep1_attr3",
      "esimRep1_attr4"),
    strlist ("simRep1_attr1",
      "simRep1_attr2",
      "simRep1_attr3",
      "simRep1_attr4"));

  Insert (result);
}

void
Vqap::Prov_ra_4_ecaDel (Ptr<Tuple> esimRep1Delete)
{
  RAPIDNET_LOG_INFO ("Prov_ra_4_ecaDel triggered");

  Ptr<Tuple> result = esimRep1Delete;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    SIMREP1,
    strlist ("Local",
      "esimRep1Delete_attr2",
      "esimRep1Delete_attr3",
      "esimRep1Delete_attr4"),
    strlist ("simRep1_attr1",
      "simRep1_attr2",
      "simRep1_attr3",
      "simRep1_attr4"));

  Delete (result);
}

void
Vqap::Prov_ra_5_ecaAdd (Ptr<Tuple> esimRep1)
{
  RAPIDNET_LOG_INFO ("Prov_ra_5_ecaAdd triggered");

  Ptr<Tuple> result = esimRep1;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("esimRep1_attr1")),
            VarExpr::New ("esimRep1_attr2")),
          VarExpr::New ("esimRep1_attr3")),
        VarExpr::New ("esimRep1_attr4")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "esimRep1_attr5",
      "esimRep1_attr7",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Insert (result);
}

void
Vqap::Prov_ra_5_ecaDel (Ptr<Tuple> esimRep1Delete)
{
  RAPIDNET_LOG_INFO ("Prov_ra_5_ecaDel triggered");

  Ptr<Tuple> result = esimRep1Delete;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("esimRep1Delete_attr1")),
            VarExpr::New ("esimRep1Delete_attr2")),
          VarExpr::New ("esimRep1Delete_attr3")),
        VarExpr::New ("esimRep1Delete_attr4")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "esimRep1Delete_attr5",
      "esimRep1Delete_attr7",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Delete (result);
}

void
Vqap::Prov_rb_1Eca0Ins (Ptr<Tuple> sim)
{
  RAPIDNET_LOG_INFO ("Prov_rb_1Eca0Ins triggered");

  Ptr<Tuple> result = sim;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("sim_attr1")),
            VarExpr::New ("sim_attr2")),
          VarExpr::New ("sim_attr3")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("sim_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rb"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESIMREP2TEMP,
    strlist ("RLOC",
      "Local",
      "sim_attr2",
      "sim_attr3",
      "sim_attr4",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("esimRep2Temp_attr1",
      "esimRep2Temp_attr2",
      "esimRep2Temp_attr3",
      "esimRep2Temp_attr4",
      "esimRep2Temp_attr5",
      "esimRep2Temp_attr6",
      "esimRep2Temp_attr7",
      "esimRep2Temp_attr8",
      "esimRep2Temp_attr9",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_rb_1Eca0Del (Ptr<Tuple> sim)
{
  RAPIDNET_LOG_INFO ("Prov_rb_1Eca0Del triggered");

  Ptr<Tuple> result = sim;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("sim_attr1")),
            VarExpr::New ("sim_attr2")),
          VarExpr::New ("sim_attr3")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("sim_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rb"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESIMREP2TEMPDELETE,
    strlist ("RLOC",
      "Local",
      "sim_attr2",
      "sim_attr3",
      "sim_attr4",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("esimRep2TempDelete_attr1",
      "esimRep2TempDelete_attr2",
      "esimRep2TempDelete_attr3",
      "esimRep2TempDelete_attr4",
      "esimRep2TempDelete_attr5",
      "esimRep2TempDelete_attr6",
      "esimRep2TempDelete_attr7",
      "esimRep2TempDelete_attr8",
      "esimRep2TempDelete_attr9",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_rb_2_ecaAdd (Ptr<Tuple> esimRep2Temp)
{
  RAPIDNET_LOG_INFO ("Prov_rb_2_ecaAdd triggered");

  Ptr<Tuple> result = esimRep2Temp;

  result = result->Project (
    RULEEXEC,
    strlist ("esimRep2Temp_attr1",
      "esimRep2Temp_attr6",
      "esimRep2Temp_attr7",
      "esimRep2Temp_attr8",
      "esimRep2Temp_attr9"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Insert (result);
}

void
Vqap::Prov_rb_2_ecaDel (Ptr<Tuple> esimRep2TempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_rb_2_ecaDel triggered");

  Ptr<Tuple> result = esimRep2TempDelete;

  result = result->Project (
    RULEEXEC,
    strlist ("esimRep2TempDelete_attr1",
      "esimRep2TempDelete_attr6",
      "esimRep2TempDelete_attr7",
      "esimRep2TempDelete_attr8",
      "esimRep2TempDelete_attr9"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Delete (result);
}

void
Vqap::Prov_rb_3_ecaAdd (Ptr<Tuple> esimRep2Temp)
{
  RAPIDNET_LOG_INFO ("Prov_rb_3_ecaAdd triggered");

  Ptr<Tuple> result = esimRep2Temp;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESIMREP2,
    strlist ("Local",
      "esimRep2Temp_attr3",
      "esimRep2Temp_attr4",
      "esimRep2Temp_attr5",
      "esimRep2Temp_attr6",
      "esimRep2Temp_attr7",
      "esimRep2Temp_attr1",
      "Local"),
    strlist ("esimRep2_attr1",
      "esimRep2_attr2",
      "esimRep2_attr3",
      "esimRep2_attr4",
      "esimRep2_attr5",
      "esimRep2_attr6",
      "esimRep2_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_rb_3_ecaDel (Ptr<Tuple> esimRep2TempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_rb_3_ecaDel triggered");

  Ptr<Tuple> result = esimRep2TempDelete;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESIMREP2DELETE,
    strlist ("Local",
      "esimRep2TempDelete_attr3",
      "esimRep2TempDelete_attr4",
      "esimRep2TempDelete_attr5",
      "esimRep2TempDelete_attr6",
      "esimRep2TempDelete_attr7",
      "esimRep2TempDelete_attr1",
      "Local"),
    strlist ("esimRep2Delete_attr1",
      "esimRep2Delete_attr2",
      "esimRep2Delete_attr3",
      "esimRep2Delete_attr4",
      "esimRep2Delete_attr5",
      "esimRep2Delete_attr6",
      "esimRep2Delete_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_rb_4_ecaAdd (Ptr<Tuple> esimRep2)
{
  RAPIDNET_LOG_INFO ("Prov_rb_4_ecaAdd triggered");

  Ptr<Tuple> result = esimRep2;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    SIMREP2,
    strlist ("Local",
      "esimRep2_attr2",
      "esimRep2_attr3",
      "esimRep2_attr4"),
    strlist ("simRep2_attr1",
      "simRep2_attr2",
      "simRep2_attr3",
      "simRep2_attr4"));

  Insert (result);
}

void
Vqap::Prov_rb_4_ecaDel (Ptr<Tuple> esimRep2Delete)
{
  RAPIDNET_LOG_INFO ("Prov_rb_4_ecaDel triggered");

  Ptr<Tuple> result = esimRep2Delete;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    SIMREP2,
    strlist ("Local",
      "esimRep2Delete_attr2",
      "esimRep2Delete_attr3",
      "esimRep2Delete_attr4"),
    strlist ("simRep2_attr1",
      "simRep2_attr2",
      "simRep2_attr3",
      "simRep2_attr4"));

  Delete (result);
}

void
Vqap::Prov_rb_5_ecaAdd (Ptr<Tuple> esimRep2)
{
  RAPIDNET_LOG_INFO ("Prov_rb_5_ecaAdd triggered");

  Ptr<Tuple> result = esimRep2;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep2")),
              VarExpr::New ("esimRep2_attr1")),
            VarExpr::New ("esimRep2_attr2")),
          VarExpr::New ("esimRep2_attr3")),
        VarExpr::New ("esimRep2_attr4")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "esimRep2_attr5",
      "esimRep2_attr7",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Insert (result);
}

void
Vqap::Prov_rb_5_ecaDel (Ptr<Tuple> esimRep2Delete)
{
  RAPIDNET_LOG_INFO ("Prov_rb_5_ecaDel triggered");

  Ptr<Tuple> result = esimRep2Delete;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep2")),
              VarExpr::New ("esimRep2Delete_attr1")),
            VarExpr::New ("esimRep2Delete_attr2")),
          VarExpr::New ("esimRep2Delete_attr3")),
        VarExpr::New ("esimRep2Delete_attr4")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "esimRep2Delete_attr5",
      "esimRep2Delete_attr7",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Delete (result);
}

void
Vqap::Prov_r1_1Eca0Ins (Ptr<Tuple> word)
{
  RAPIDNET_LOG_INFO ("Prov_r1_1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (HASIMG)->Join (
    word,
    strlist ("hasImg_attr1"),
    strlist ("word_attr1"));

  result = GetRelation (SIM)->Join (
    result,
    strlist ("sim_attr1", "sim_attr3", "sim_attr2"),
    strlist ("word_attr1", "hasImg_attr2", "word_attr2"));

  result = GetRelation (SIMREP1)->Join (
    result,
    strlist ("simRep1_attr1", "simRep1_attr3", "simRep1_attr2"),
    strlist ("word_attr1", "hasImg_attr4", "word_attr2"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("word")),
            VarExpr::New ("word_attr1")),
          VarExpr::New ("word_attr2")),
        VarExpr::New ("word_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("word_attr1")),
              VarExpr::New ("hasImg_attr2")),
            VarExpr::New ("hasImg_attr3")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("word_attr1")),
            VarExpr::New ("word_attr2")),
          VarExpr::New ("hasImg_attr2")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("word_attr1")),
            VarExpr::New ("word_attr2")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("word_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    EHASIMGANSTEMP,
    strlist ("RLOC",
      "Local",
      "word_attr2",
      "hasImg_attr2",
      "hasImg_attr3",
      "hasImg_attr4",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ehasImgAnsTemp_attr1",
      "ehasImgAnsTemp_attr2",
      "ehasImgAnsTemp_attr3",
      "ehasImgAnsTemp_attr4",
      "ehasImgAnsTemp_attr5",
      "ehasImgAnsTemp_attr6",
      "ehasImgAnsTemp_attr7",
      "ehasImgAnsTemp_attr8",
      "ehasImgAnsTemp_attr9",
      "ehasImgAnsTemp_attr10",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r1_1Eca0Del (Ptr<Tuple> word)
{
  RAPIDNET_LOG_INFO ("Prov_r1_1Eca0Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (HASIMG)->Join (
    word,
    strlist ("hasImg_attr1"),
    strlist ("word_attr1"));

  result = GetRelation (SIM)->Join (
    result,
    strlist ("sim_attr1", "sim_attr3", "sim_attr2"),
    strlist ("word_attr1", "hasImg_attr2", "word_attr2"));

  result = GetRelation (SIMREP1)->Join (
    result,
    strlist ("simRep1_attr1", "simRep1_attr3", "simRep1_attr2"),
    strlist ("word_attr1", "hasImg_attr4", "word_attr2"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("word")),
            VarExpr::New ("word_attr1")),
          VarExpr::New ("word_attr2")),
        VarExpr::New ("word_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("word_attr1")),
              VarExpr::New ("hasImg_attr2")),
            VarExpr::New ("hasImg_attr3")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("word_attr1")),
            VarExpr::New ("word_attr2")),
          VarExpr::New ("hasImg_attr2")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("word_attr1")),
            VarExpr::New ("word_attr2")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("word_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    EHASIMGANSTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "word_attr2",
      "hasImg_attr2",
      "hasImg_attr3",
      "hasImg_attr4",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ehasImgAnsTempDelete_attr1",
      "ehasImgAnsTempDelete_attr2",
      "ehasImgAnsTempDelete_attr3",
      "ehasImgAnsTempDelete_attr4",
      "ehasImgAnsTempDelete_attr5",
      "ehasImgAnsTempDelete_attr6",
      "ehasImgAnsTempDelete_attr7",
      "ehasImgAnsTempDelete_attr8",
      "ehasImgAnsTempDelete_attr9",
      "ehasImgAnsTempDelete_attr10",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r1_1Eca3Ins (Ptr<Tuple> hasImg)
{
  RAPIDNET_LOG_INFO ("Prov_r1_1Eca3Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (WORD)->Join (
    hasImg,
    strlist ("word_attr1"),
    strlist ("hasImg_attr1"));

  result = GetRelation (SIM)->Join (
    result,
    strlist ("sim_attr1", "sim_attr3", "sim_attr2"),
    strlist ("hasImg_attr1", "hasImg_attr2", "word_attr2"));

  result = GetRelation (SIMREP1)->Join (
    result,
    strlist ("simRep1_attr1", "simRep1_attr3", "simRep1_attr2"),
    strlist ("hasImg_attr1", "hasImg_attr4", "word_attr2"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("word")),
            VarExpr::New ("hasImg_attr1")),
          VarExpr::New ("word_attr2")),
        VarExpr::New ("word_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("hasImg_attr1")),
              VarExpr::New ("hasImg_attr2")),
            VarExpr::New ("hasImg_attr3")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("hasImg_attr1")),
            VarExpr::New ("word_attr2")),
          VarExpr::New ("hasImg_attr2")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("hasImg_attr1")),
            VarExpr::New ("word_attr2")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("hasImg_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    EHASIMGANSTEMP,
    strlist ("RLOC",
      "Local",
      "word_attr2",
      "hasImg_attr2",
      "hasImg_attr3",
      "hasImg_attr4",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ehasImgAnsTemp_attr1",
      "ehasImgAnsTemp_attr2",
      "ehasImgAnsTemp_attr3",
      "ehasImgAnsTemp_attr4",
      "ehasImgAnsTemp_attr5",
      "ehasImgAnsTemp_attr6",
      "ehasImgAnsTemp_attr7",
      "ehasImgAnsTemp_attr8",
      "ehasImgAnsTemp_attr9",
      "ehasImgAnsTemp_attr10",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r1_1Eca3Del (Ptr<Tuple> hasImg)
{
  RAPIDNET_LOG_INFO ("Prov_r1_1Eca3Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (WORD)->Join (
    hasImg,
    strlist ("word_attr1"),
    strlist ("hasImg_attr1"));

  result = GetRelation (SIM)->Join (
    result,
    strlist ("sim_attr1", "sim_attr3", "sim_attr2"),
    strlist ("hasImg_attr1", "hasImg_attr2", "word_attr2"));

  result = GetRelation (SIMREP1)->Join (
    result,
    strlist ("simRep1_attr1", "simRep1_attr3", "simRep1_attr2"),
    strlist ("hasImg_attr1", "hasImg_attr4", "word_attr2"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("word")),
            VarExpr::New ("hasImg_attr1")),
          VarExpr::New ("word_attr2")),
        VarExpr::New ("word_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("hasImg_attr1")),
              VarExpr::New ("hasImg_attr2")),
            VarExpr::New ("hasImg_attr3")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("hasImg_attr1")),
            VarExpr::New ("word_attr2")),
          VarExpr::New ("hasImg_attr2")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("hasImg_attr1")),
            VarExpr::New ("word_attr2")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("hasImg_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    EHASIMGANSTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "word_attr2",
      "hasImg_attr2",
      "hasImg_attr3",
      "hasImg_attr4",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ehasImgAnsTempDelete_attr1",
      "ehasImgAnsTempDelete_attr2",
      "ehasImgAnsTempDelete_attr3",
      "ehasImgAnsTempDelete_attr4",
      "ehasImgAnsTempDelete_attr5",
      "ehasImgAnsTempDelete_attr6",
      "ehasImgAnsTempDelete_attr7",
      "ehasImgAnsTempDelete_attr8",
      "ehasImgAnsTempDelete_attr9",
      "ehasImgAnsTempDelete_attr10",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r1_1Eca7Ins (Ptr<Tuple> sim)
{
  RAPIDNET_LOG_INFO ("Prov_r1_1Eca7Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (WORD)->Join (
    sim,
    strlist ("word_attr1", "word_attr2"),
    strlist ("sim_attr1", "sim_attr2"));

  result = GetRelation (HASIMG)->Join (
    result,
    strlist ("hasImg_attr1", "hasImg_attr2"),
    strlist ("sim_attr1", "sim_attr3"));

  result = GetRelation (SIMREP1)->Join (
    result,
    strlist ("simRep1_attr1", "simRep1_attr3", "simRep1_attr2"),
    strlist ("sim_attr1", "hasImg_attr4", "sim_attr2"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("word")),
            VarExpr::New ("sim_attr1")),
          VarExpr::New ("sim_attr2")),
        VarExpr::New ("word_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("sim_attr1")),
              VarExpr::New ("sim_attr3")),
            VarExpr::New ("hasImg_attr3")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("sim_attr1")),
            VarExpr::New ("sim_attr2")),
          VarExpr::New ("sim_attr3")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("sim_attr1")),
            VarExpr::New ("sim_attr2")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("sim_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    EHASIMGANSTEMP,
    strlist ("RLOC",
      "Local",
      "sim_attr2",
      "sim_attr3",
      "hasImg_attr3",
      "hasImg_attr4",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ehasImgAnsTemp_attr1",
      "ehasImgAnsTemp_attr2",
      "ehasImgAnsTemp_attr3",
      "ehasImgAnsTemp_attr4",
      "ehasImgAnsTemp_attr5",
      "ehasImgAnsTemp_attr6",
      "ehasImgAnsTemp_attr7",
      "ehasImgAnsTemp_attr8",
      "ehasImgAnsTemp_attr9",
      "ehasImgAnsTemp_attr10",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r1_1Eca7Del (Ptr<Tuple> sim)
{
  RAPIDNET_LOG_INFO ("Prov_r1_1Eca7Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (WORD)->Join (
    sim,
    strlist ("word_attr1", "word_attr2"),
    strlist ("sim_attr1", "sim_attr2"));

  result = GetRelation (HASIMG)->Join (
    result,
    strlist ("hasImg_attr1", "hasImg_attr2"),
    strlist ("sim_attr1", "sim_attr3"));

  result = GetRelation (SIMREP1)->Join (
    result,
    strlist ("simRep1_attr1", "simRep1_attr3", "simRep1_attr2"),
    strlist ("sim_attr1", "hasImg_attr4", "sim_attr2"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("word")),
            VarExpr::New ("sim_attr1")),
          VarExpr::New ("sim_attr2")),
        VarExpr::New ("word_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("sim_attr1")),
              VarExpr::New ("sim_attr3")),
            VarExpr::New ("hasImg_attr3")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("sim_attr1")),
            VarExpr::New ("sim_attr2")),
          VarExpr::New ("sim_attr3")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("sim_attr1")),
            VarExpr::New ("sim_attr2")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("sim_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    EHASIMGANSTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "sim_attr2",
      "sim_attr3",
      "hasImg_attr3",
      "hasImg_attr4",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ehasImgAnsTempDelete_attr1",
      "ehasImgAnsTempDelete_attr2",
      "ehasImgAnsTempDelete_attr3",
      "ehasImgAnsTempDelete_attr4",
      "ehasImgAnsTempDelete_attr5",
      "ehasImgAnsTempDelete_attr6",
      "ehasImgAnsTempDelete_attr7",
      "ehasImgAnsTempDelete_attr8",
      "ehasImgAnsTempDelete_attr9",
      "ehasImgAnsTempDelete_attr10",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r1_1Eca11Ins (Ptr<Tuple> simRep1)
{
  RAPIDNET_LOG_INFO ("Prov_r1_1Eca11Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (WORD)->Join (
    simRep1,
    strlist ("word_attr1", "word_attr2"),
    strlist ("simRep1_attr1", "simRep1_attr2"));

  result = GetRelation (HASIMG)->Join (
    result,
    strlist ("hasImg_attr1", "hasImg_attr4"),
    strlist ("simRep1_attr1", "simRep1_attr3"));

  result = GetRelation (SIM)->Join (
    result,
    strlist ("sim_attr1", "sim_attr3", "sim_attr2"),
    strlist ("simRep1_attr1", "hasImg_attr2", "simRep1_attr2"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("word")),
            VarExpr::New ("simRep1_attr1")),
          VarExpr::New ("simRep1_attr2")),
        VarExpr::New ("word_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("simRep1_attr1")),
              VarExpr::New ("hasImg_attr2")),
            VarExpr::New ("hasImg_attr3")),
          VarExpr::New ("simRep1_attr3")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("simRep1_attr1")),
            VarExpr::New ("simRep1_attr2")),
          VarExpr::New ("hasImg_attr2")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("simRep1_attr1")),
            VarExpr::New ("simRep1_attr2")),
          VarExpr::New ("simRep1_attr3")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("simRep1_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    EHASIMGANSTEMP,
    strlist ("RLOC",
      "Local",
      "simRep1_attr2",
      "hasImg_attr2",
      "hasImg_attr3",
      "simRep1_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ehasImgAnsTemp_attr1",
      "ehasImgAnsTemp_attr2",
      "ehasImgAnsTemp_attr3",
      "ehasImgAnsTemp_attr4",
      "ehasImgAnsTemp_attr5",
      "ehasImgAnsTemp_attr6",
      "ehasImgAnsTemp_attr7",
      "ehasImgAnsTemp_attr8",
      "ehasImgAnsTemp_attr9",
      "ehasImgAnsTemp_attr10",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r1_1Eca11Del (Ptr<Tuple> simRep1)
{
  RAPIDNET_LOG_INFO ("Prov_r1_1Eca11Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (WORD)->Join (
    simRep1,
    strlist ("word_attr1", "word_attr2"),
    strlist ("simRep1_attr1", "simRep1_attr2"));

  result = GetRelation (HASIMG)->Join (
    result,
    strlist ("hasImg_attr1", "hasImg_attr4"),
    strlist ("simRep1_attr1", "simRep1_attr3"));

  result = GetRelation (SIM)->Join (
    result,
    strlist ("sim_attr1", "sim_attr3", "sim_attr2"),
    strlist ("simRep1_attr1", "hasImg_attr2", "simRep1_attr2"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("word")),
            VarExpr::New ("simRep1_attr1")),
          VarExpr::New ("simRep1_attr2")),
        VarExpr::New ("word_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("simRep1_attr1")),
              VarExpr::New ("hasImg_attr2")),
            VarExpr::New ("hasImg_attr3")),
          VarExpr::New ("simRep1_attr3")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("simRep1_attr1")),
            VarExpr::New ("simRep1_attr2")),
          VarExpr::New ("hasImg_attr2")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("simRep1_attr1")),
            VarExpr::New ("simRep1_attr2")),
          VarExpr::New ("simRep1_attr3")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("simRep1_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    EHASIMGANSTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "simRep1_attr2",
      "hasImg_attr2",
      "hasImg_attr3",
      "simRep1_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ehasImgAnsTempDelete_attr1",
      "ehasImgAnsTempDelete_attr2",
      "ehasImgAnsTempDelete_attr3",
      "ehasImgAnsTempDelete_attr4",
      "ehasImgAnsTempDelete_attr5",
      "ehasImgAnsTempDelete_attr6",
      "ehasImgAnsTempDelete_attr7",
      "ehasImgAnsTempDelete_attr8",
      "ehasImgAnsTempDelete_attr9",
      "ehasImgAnsTempDelete_attr10",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r1_2_ecaAdd (Ptr<Tuple> ehasImgAnsTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r1_2_ecaAdd triggered");

  Ptr<Tuple> result = ehasImgAnsTemp;

  result = result->Project (
    RULEEXEC,
    strlist ("ehasImgAnsTemp_attr1",
      "ehasImgAnsTemp_attr7",
      "ehasImgAnsTemp_attr8",
      "ehasImgAnsTemp_attr9",
      "ehasImgAnsTemp_attr10"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Insert (result);
}

void
Vqap::Prov_r1_2_ecaDel (Ptr<Tuple> ehasImgAnsTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r1_2_ecaDel triggered");

  Ptr<Tuple> result = ehasImgAnsTempDelete;

  result = result->Project (
    RULEEXEC,
    strlist ("ehasImgAnsTempDelete_attr1",
      "ehasImgAnsTempDelete_attr7",
      "ehasImgAnsTempDelete_attr8",
      "ehasImgAnsTempDelete_attr9",
      "ehasImgAnsTempDelete_attr10"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Delete (result);
}

void
Vqap::Prov_r1_3_ecaAdd (Ptr<Tuple> ehasImgAnsTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r1_3_ecaAdd triggered");

  Ptr<Tuple> result = ehasImgAnsTemp;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    EHASIMGANS,
    strlist ("Local",
      "ehasImgAnsTemp_attr3",
      "ehasImgAnsTemp_attr4",
      "ehasImgAnsTemp_attr5",
      "ehasImgAnsTemp_attr6",
      "ehasImgAnsTemp_attr7",
      "ehasImgAnsTemp_attr8",
      "ehasImgAnsTemp_attr1",
      "Local"),
    strlist ("ehasImgAns_attr1",
      "ehasImgAns_attr2",
      "ehasImgAns_attr3",
      "ehasImgAns_attr4",
      "ehasImgAns_attr5",
      "ehasImgAns_attr6",
      "ehasImgAns_attr7",
      "ehasImgAns_attr8",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r1_3_ecaDel (Ptr<Tuple> ehasImgAnsTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r1_3_ecaDel triggered");

  Ptr<Tuple> result = ehasImgAnsTempDelete;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    EHASIMGANSDELETE,
    strlist ("Local",
      "ehasImgAnsTempDelete_attr3",
      "ehasImgAnsTempDelete_attr4",
      "ehasImgAnsTempDelete_attr5",
      "ehasImgAnsTempDelete_attr6",
      "ehasImgAnsTempDelete_attr7",
      "ehasImgAnsTempDelete_attr8",
      "ehasImgAnsTempDelete_attr1",
      "Local"),
    strlist ("ehasImgAnsDelete_attr1",
      "ehasImgAnsDelete_attr2",
      "ehasImgAnsDelete_attr3",
      "ehasImgAnsDelete_attr4",
      "ehasImgAnsDelete_attr5",
      "ehasImgAnsDelete_attr6",
      "ehasImgAnsDelete_attr7",
      "ehasImgAnsDelete_attr8",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r1_4_ecaAdd (Ptr<Tuple> ehasImgAns)
{
  RAPIDNET_LOG_INFO ("Prov_r1_4_ecaAdd triggered");

  Ptr<Tuple> result = ehasImgAns;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    HASIMGANS,
    strlist ("Local",
      "ehasImgAns_attr2",
      "ehasImgAns_attr3",
      "ehasImgAns_attr4",
      "ehasImgAns_attr5"),
    strlist ("hasImgAns_attr1",
      "hasImgAns_attr2",
      "hasImgAns_attr3",
      "hasImgAns_attr4",
      "hasImgAns_attr5"));

  Insert (result);
}

void
Vqap::Prov_r1_4_ecaDel (Ptr<Tuple> ehasImgAnsDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r1_4_ecaDel triggered");

  Ptr<Tuple> result = ehasImgAnsDelete;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    HASIMGANS,
    strlist ("Local",
      "ehasImgAnsDelete_attr2",
      "ehasImgAnsDelete_attr3",
      "ehasImgAnsDelete_attr4",
      "ehasImgAnsDelete_attr5"),
    strlist ("hasImgAns_attr1",
      "hasImgAns_attr2",
      "hasImgAns_attr3",
      "hasImgAns_attr4",
      "hasImgAns_attr5"));

  Delete (result);
}

void
Vqap::Prov_r1_5_ecaAdd (Ptr<Tuple> ehasImgAns)
{
  RAPIDNET_LOG_INFO ("Prov_r1_5_ecaAdd triggered");

  Ptr<Tuple> result = ehasImgAns;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImgAns")),
                VarExpr::New ("ehasImgAns_attr1")),
              VarExpr::New ("ehasImgAns_attr2")),
            VarExpr::New ("ehasImgAns_attr3")),
          VarExpr::New ("ehasImgAns_attr4")),
        VarExpr::New ("ehasImgAns_attr5")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "ehasImgAns_attr6",
      "ehasImgAns_attr8",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Insert (result);
}

void
Vqap::Prov_r1_5_ecaDel (Ptr<Tuple> ehasImgAnsDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r1_5_ecaDel triggered");

  Ptr<Tuple> result = ehasImgAnsDelete;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImgAns")),
                VarExpr::New ("ehasImgAnsDelete_attr1")),
              VarExpr::New ("ehasImgAnsDelete_attr2")),
            VarExpr::New ("ehasImgAnsDelete_attr3")),
          VarExpr::New ("ehasImgAnsDelete_attr4")),
        VarExpr::New ("ehasImgAnsDelete_attr5")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "ehasImgAnsDelete_attr6",
      "ehasImgAnsDelete_attr8",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Delete (result);
}

void
Vqap::Prov_r2_1Eca0Ins (Ptr<Tuple> word)
{
  RAPIDNET_LOG_INFO ("Prov_r2_1Eca0Ins triggered");

  Ptr<Tuple> result = word;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("word")),
            VarExpr::New ("word_attr1")),
          VarExpr::New ("word_attr2")),
        VarExpr::New ("word_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("word_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ECANDIDATETEMP,
    strlist ("RLOC",
      "Local",
      "word_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ecandidateTemp_attr1",
      "ecandidateTemp_attr2",
      "ecandidateTemp_attr3",
      "ecandidateTemp_attr4",
      "ecandidateTemp_attr5",
      "ecandidateTemp_attr6",
      "ecandidateTemp_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r2_1Eca0Del (Ptr<Tuple> word)
{
  RAPIDNET_LOG_INFO ("Prov_r2_1Eca0Del triggered");

  Ptr<Tuple> result = word;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("word")),
            VarExpr::New ("word_attr1")),
          VarExpr::New ("word_attr2")),
        VarExpr::New ("word_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("word_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ECANDIDATETEMPDELETE,
    strlist ("RLOC",
      "Local",
      "word_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ecandidateTempDelete_attr1",
      "ecandidateTempDelete_attr2",
      "ecandidateTempDelete_attr3",
      "ecandidateTempDelete_attr4",
      "ecandidateTempDelete_attr5",
      "ecandidateTempDelete_attr6",
      "ecandidateTempDelete_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r2_2_ecaAdd (Ptr<Tuple> ecandidateTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r2_2_ecaAdd triggered");

  Ptr<Tuple> result = ecandidateTemp;

  result = result->Project (
    RULEEXEC,
    strlist ("ecandidateTemp_attr1",
      "ecandidateTemp_attr4",
      "ecandidateTemp_attr5",
      "ecandidateTemp_attr6",
      "ecandidateTemp_attr7"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Insert (result);
}

void
Vqap::Prov_r2_2_ecaDel (Ptr<Tuple> ecandidateTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r2_2_ecaDel triggered");

  Ptr<Tuple> result = ecandidateTempDelete;

  result = result->Project (
    RULEEXEC,
    strlist ("ecandidateTempDelete_attr1",
      "ecandidateTempDelete_attr4",
      "ecandidateTempDelete_attr5",
      "ecandidateTempDelete_attr6",
      "ecandidateTempDelete_attr7"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Delete (result);
}

void
Vqap::Prov_r2_3_ecaAdd (Ptr<Tuple> ecandidateTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r2_3_ecaAdd triggered");

  Ptr<Tuple> result = ecandidateTemp;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ECANDIDATE,
    strlist ("Local",
      "ecandidateTemp_attr3",
      "ecandidateTemp_attr4",
      "ecandidateTemp_attr5",
      "ecandidateTemp_attr1",
      "Local"),
    strlist ("ecandidate_attr1",
      "ecandidate_attr2",
      "ecandidate_attr3",
      "ecandidate_attr4",
      "ecandidate_attr5",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r2_3_ecaDel (Ptr<Tuple> ecandidateTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r2_3_ecaDel triggered");

  Ptr<Tuple> result = ecandidateTempDelete;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ECANDIDATEDELETE,
    strlist ("Local",
      "ecandidateTempDelete_attr3",
      "ecandidateTempDelete_attr4",
      "ecandidateTempDelete_attr5",
      "ecandidateTempDelete_attr1",
      "Local"),
    strlist ("ecandidateDelete_attr1",
      "ecandidateDelete_attr2",
      "ecandidateDelete_attr3",
      "ecandidateDelete_attr4",
      "ecandidateDelete_attr5",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r2_4_ecaAdd (Ptr<Tuple> ecandidate)
{
  RAPIDNET_LOG_INFO ("Prov_r2_4_ecaAdd triggered");

  Ptr<Tuple> result = ecandidate;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    CANDIDATE,
    strlist ("Local",
      "ecandidate_attr2"),
    strlist ("candidate_attr1",
      "candidate_attr2"));

  Insert (result);
}

void
Vqap::Prov_r2_4_ecaDel (Ptr<Tuple> ecandidateDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r2_4_ecaDel triggered");

  Ptr<Tuple> result = ecandidateDelete;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    CANDIDATE,
    strlist ("Local",
      "ecandidateDelete_attr2"),
    strlist ("candidate_attr1",
      "candidate_attr2"));

  Delete (result);
}

void
Vqap::Prov_r2_5_ecaAdd (Ptr<Tuple> ecandidate)
{
  RAPIDNET_LOG_INFO ("Prov_r2_5_ecaAdd triggered");

  Ptr<Tuple> result = ecandidate;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("candidate")),
          VarExpr::New ("ecandidate_attr1")),
        VarExpr::New ("ecandidate_attr2")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "ecandidate_attr3",
      "ecandidate_attr5",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Insert (result);
}

void
Vqap::Prov_r2_5_ecaDel (Ptr<Tuple> ecandidateDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r2_5_ecaDel triggered");

  Ptr<Tuple> result = ecandidateDelete;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("candidate")),
          VarExpr::New ("ecandidateDelete_attr1")),
        VarExpr::New ("ecandidateDelete_attr2")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "ecandidateDelete_attr3",
      "ecandidateDelete_attr5",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Delete (result);
}

void
Vqap::Prov_r3_1Eca0Ins (Ptr<Tuple> word)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (HASQ)->Join (
    word,
    strlist ("hasQ_attr1"),
    strlist ("word_attr1"));

  result = GetRelation (HASIMGANS)->Join (
    result,
    strlist ("hasImgAns_attr1", "hasImgAns_attr2"),
    strlist ("word_attr1", "word_attr2"));

  result = GetRelation (SIM)->Join (
    result,
    strlist ("sim_attr1", "sim_attr2", "sim_attr3"),
    strlist ("word_attr1", "hasQ_attr3", "hasImgAns_attr4"));

  result = GetRelation (SIMREP1)->Join (
    result,
    strlist ("simRep1_attr1", "simRep1_attr2", "simRep1_attr3"),
    strlist ("word_attr1", "hasQ_attr2", "hasImgAns_attr5"));

  result = GetRelation (SIMREP2)->Join (
    result,
    strlist ("simRep2_attr1", "simRep2_attr2", "simRep2_attr3"),
    strlist ("word_attr1", "hasQ_attr4", "hasImgAns_attr3"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("word")),
            VarExpr::New ("word_attr1")),
          VarExpr::New ("word_attr2")),
        VarExpr::New ("word_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("word_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImgAns")),
                VarExpr::New ("word_attr1")),
              VarExpr::New ("word_attr2")),
            VarExpr::New ("hasImgAns_attr3")),
          VarExpr::New ("hasImgAns_attr4")),
        VarExpr::New ("hasImgAns_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("word_attr1")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasImgAns_attr4")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("PID5",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("word_attr1")),
            VarExpr::New ("hasQ_attr2")),
          VarExpr::New ("hasImgAns_attr5")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List5",
    FAppend::New (
      VarExpr::New ("PID5"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List5"))));

  result->Assign (Assignor::New ("PID6",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep2")),
              VarExpr::New ("word_attr1")),
            VarExpr::New ("hasQ_attr4")),
          VarExpr::New ("hasImgAns_attr3")),
        VarExpr::New ("simRep2_attr4")))));

  result->Assign (Assignor::New ("List6",
    FAppend::New (
      VarExpr::New ("PID6"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List6"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("word_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ECANDIDATETEMP,
    strlist ("RLOC",
      "Local",
      "word_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ecandidateTemp_attr1",
      "ecandidateTemp_attr2",
      "ecandidateTemp_attr3",
      "ecandidateTemp_attr4",
      "ecandidateTemp_attr5",
      "ecandidateTemp_attr6",
      "ecandidateTemp_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r3_1Eca0Del (Ptr<Tuple> word)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1Eca0Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (HASQ)->Join (
    word,
    strlist ("hasQ_attr1"),
    strlist ("word_attr1"));

  result = GetRelation (HASIMGANS)->Join (
    result,
    strlist ("hasImgAns_attr1", "hasImgAns_attr2"),
    strlist ("word_attr1", "word_attr2"));

  result = GetRelation (SIM)->Join (
    result,
    strlist ("sim_attr1", "sim_attr2", "sim_attr3"),
    strlist ("word_attr1", "hasQ_attr3", "hasImgAns_attr4"));

  result = GetRelation (SIMREP1)->Join (
    result,
    strlist ("simRep1_attr1", "simRep1_attr2", "simRep1_attr3"),
    strlist ("word_attr1", "hasQ_attr2", "hasImgAns_attr5"));

  result = GetRelation (SIMREP2)->Join (
    result,
    strlist ("simRep2_attr1", "simRep2_attr2", "simRep2_attr3"),
    strlist ("word_attr1", "hasQ_attr4", "hasImgAns_attr3"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("word")),
            VarExpr::New ("word_attr1")),
          VarExpr::New ("word_attr2")),
        VarExpr::New ("word_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("word_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImgAns")),
                VarExpr::New ("word_attr1")),
              VarExpr::New ("word_attr2")),
            VarExpr::New ("hasImgAns_attr3")),
          VarExpr::New ("hasImgAns_attr4")),
        VarExpr::New ("hasImgAns_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("word_attr1")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasImgAns_attr4")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("PID5",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("word_attr1")),
            VarExpr::New ("hasQ_attr2")),
          VarExpr::New ("hasImgAns_attr5")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List5",
    FAppend::New (
      VarExpr::New ("PID5"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List5"))));

  result->Assign (Assignor::New ("PID6",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep2")),
              VarExpr::New ("word_attr1")),
            VarExpr::New ("hasQ_attr4")),
          VarExpr::New ("hasImgAns_attr3")),
        VarExpr::New ("simRep2_attr4")))));

  result->Assign (Assignor::New ("List6",
    FAppend::New (
      VarExpr::New ("PID6"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List6"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("word_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ECANDIDATETEMPDELETE,
    strlist ("RLOC",
      "Local",
      "word_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ecandidateTempDelete_attr1",
      "ecandidateTempDelete_attr2",
      "ecandidateTempDelete_attr3",
      "ecandidateTempDelete_attr4",
      "ecandidateTempDelete_attr5",
      "ecandidateTempDelete_attr6",
      "ecandidateTempDelete_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r3_1Eca3Ins (Ptr<Tuple> hasQ)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1Eca3Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (WORD)->Join (
    hasQ,
    strlist ("word_attr1"),
    strlist ("hasQ_attr1"));

  result = GetRelation (HASIMGANS)->Join (
    result,
    strlist ("hasImgAns_attr1", "hasImgAns_attr2"),
    strlist ("hasQ_attr1", "word_attr2"));

  result = GetRelation (SIM)->Join (
    result,
    strlist ("sim_attr1", "sim_attr2", "sim_attr3"),
    strlist ("hasQ_attr1", "hasQ_attr3", "hasImgAns_attr4"));

  result = GetRelation (SIMREP1)->Join (
    result,
    strlist ("simRep1_attr1", "simRep1_attr2", "simRep1_attr3"),
    strlist ("hasQ_attr1", "hasQ_attr2", "hasImgAns_attr5"));

  result = GetRelation (SIMREP2)->Join (
    result,
    strlist ("simRep2_attr1", "simRep2_attr2", "simRep2_attr3"),
    strlist ("hasQ_attr1", "hasQ_attr4", "hasImgAns_attr3"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("word")),
            VarExpr::New ("hasQ_attr1")),
          VarExpr::New ("word_attr2")),
        VarExpr::New ("word_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("hasQ_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImgAns")),
                VarExpr::New ("hasQ_attr1")),
              VarExpr::New ("word_attr2")),
            VarExpr::New ("hasImgAns_attr3")),
          VarExpr::New ("hasImgAns_attr4")),
        VarExpr::New ("hasImgAns_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("hasQ_attr1")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasImgAns_attr4")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("PID5",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("hasQ_attr1")),
            VarExpr::New ("hasQ_attr2")),
          VarExpr::New ("hasImgAns_attr5")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List5",
    FAppend::New (
      VarExpr::New ("PID5"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List5"))));

  result->Assign (Assignor::New ("PID6",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep2")),
              VarExpr::New ("hasQ_attr1")),
            VarExpr::New ("hasQ_attr4")),
          VarExpr::New ("hasImgAns_attr3")),
        VarExpr::New ("simRep2_attr4")))));

  result->Assign (Assignor::New ("List6",
    FAppend::New (
      VarExpr::New ("PID6"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List6"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("hasQ_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ECANDIDATETEMP,
    strlist ("RLOC",
      "Local",
      "word_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ecandidateTemp_attr1",
      "ecandidateTemp_attr2",
      "ecandidateTemp_attr3",
      "ecandidateTemp_attr4",
      "ecandidateTemp_attr5",
      "ecandidateTemp_attr6",
      "ecandidateTemp_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r3_1Eca3Del (Ptr<Tuple> hasQ)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1Eca3Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (WORD)->Join (
    hasQ,
    strlist ("word_attr1"),
    strlist ("hasQ_attr1"));

  result = GetRelation (HASIMGANS)->Join (
    result,
    strlist ("hasImgAns_attr1", "hasImgAns_attr2"),
    strlist ("hasQ_attr1", "word_attr2"));

  result = GetRelation (SIM)->Join (
    result,
    strlist ("sim_attr1", "sim_attr2", "sim_attr3"),
    strlist ("hasQ_attr1", "hasQ_attr3", "hasImgAns_attr4"));

  result = GetRelation (SIMREP1)->Join (
    result,
    strlist ("simRep1_attr1", "simRep1_attr2", "simRep1_attr3"),
    strlist ("hasQ_attr1", "hasQ_attr2", "hasImgAns_attr5"));

  result = GetRelation (SIMREP2)->Join (
    result,
    strlist ("simRep2_attr1", "simRep2_attr2", "simRep2_attr3"),
    strlist ("hasQ_attr1", "hasQ_attr4", "hasImgAns_attr3"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("word")),
            VarExpr::New ("hasQ_attr1")),
          VarExpr::New ("word_attr2")),
        VarExpr::New ("word_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("hasQ_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImgAns")),
                VarExpr::New ("hasQ_attr1")),
              VarExpr::New ("word_attr2")),
            VarExpr::New ("hasImgAns_attr3")),
          VarExpr::New ("hasImgAns_attr4")),
        VarExpr::New ("hasImgAns_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("hasQ_attr1")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasImgAns_attr4")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("PID5",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("hasQ_attr1")),
            VarExpr::New ("hasQ_attr2")),
          VarExpr::New ("hasImgAns_attr5")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List5",
    FAppend::New (
      VarExpr::New ("PID5"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List5"))));

  result->Assign (Assignor::New ("PID6",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep2")),
              VarExpr::New ("hasQ_attr1")),
            VarExpr::New ("hasQ_attr4")),
          VarExpr::New ("hasImgAns_attr3")),
        VarExpr::New ("simRep2_attr4")))));

  result->Assign (Assignor::New ("List6",
    FAppend::New (
      VarExpr::New ("PID6"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List6"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("hasQ_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ECANDIDATETEMPDELETE,
    strlist ("RLOC",
      "Local",
      "word_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ecandidateTempDelete_attr1",
      "ecandidateTempDelete_attr2",
      "ecandidateTempDelete_attr3",
      "ecandidateTempDelete_attr4",
      "ecandidateTempDelete_attr5",
      "ecandidateTempDelete_attr6",
      "ecandidateTempDelete_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r3_1Eca7Ins (Ptr<Tuple> hasImgAns)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1Eca7Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (WORD)->Join (
    hasImgAns,
    strlist ("word_attr1", "word_attr2"),
    strlist ("hasImgAns_attr1", "hasImgAns_attr2"));

  result = GetRelation (HASQ)->Join (
    result,
    strlist ("hasQ_attr1"),
    strlist ("hasImgAns_attr1"));

  result = GetRelation (SIM)->Join (
    result,
    strlist ("sim_attr1", "sim_attr2", "sim_attr3"),
    strlist ("hasImgAns_attr1", "hasQ_attr3", "hasImgAns_attr4"));

  result = GetRelation (SIMREP1)->Join (
    result,
    strlist ("simRep1_attr1", "simRep1_attr2", "simRep1_attr3"),
    strlist ("hasImgAns_attr1", "hasQ_attr2", "hasImgAns_attr5"));

  result = GetRelation (SIMREP2)->Join (
    result,
    strlist ("simRep2_attr1", "simRep2_attr2", "simRep2_attr3"),
    strlist ("hasImgAns_attr1", "hasQ_attr4", "hasImgAns_attr3"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("word")),
            VarExpr::New ("hasImgAns_attr1")),
          VarExpr::New ("hasImgAns_attr2")),
        VarExpr::New ("word_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("hasImgAns_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImgAns")),
                VarExpr::New ("hasImgAns_attr1")),
              VarExpr::New ("hasImgAns_attr2")),
            VarExpr::New ("hasImgAns_attr3")),
          VarExpr::New ("hasImgAns_attr4")),
        VarExpr::New ("hasImgAns_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("hasImgAns_attr1")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasImgAns_attr4")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("PID5",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("hasImgAns_attr1")),
            VarExpr::New ("hasQ_attr2")),
          VarExpr::New ("hasImgAns_attr5")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List5",
    FAppend::New (
      VarExpr::New ("PID5"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List5"))));

  result->Assign (Assignor::New ("PID6",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep2")),
              VarExpr::New ("hasImgAns_attr1")),
            VarExpr::New ("hasQ_attr4")),
          VarExpr::New ("hasImgAns_attr3")),
        VarExpr::New ("simRep2_attr4")))));

  result->Assign (Assignor::New ("List6",
    FAppend::New (
      VarExpr::New ("PID6"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List6"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("hasImgAns_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ECANDIDATETEMP,
    strlist ("RLOC",
      "Local",
      "hasImgAns_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ecandidateTemp_attr1",
      "ecandidateTemp_attr2",
      "ecandidateTemp_attr3",
      "ecandidateTemp_attr4",
      "ecandidateTemp_attr5",
      "ecandidateTemp_attr6",
      "ecandidateTemp_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r3_1Eca7Del (Ptr<Tuple> hasImgAns)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1Eca7Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (WORD)->Join (
    hasImgAns,
    strlist ("word_attr1", "word_attr2"),
    strlist ("hasImgAns_attr1", "hasImgAns_attr2"));

  result = GetRelation (HASQ)->Join (
    result,
    strlist ("hasQ_attr1"),
    strlist ("hasImgAns_attr1"));

  result = GetRelation (SIM)->Join (
    result,
    strlist ("sim_attr1", "sim_attr2", "sim_attr3"),
    strlist ("hasImgAns_attr1", "hasQ_attr3", "hasImgAns_attr4"));

  result = GetRelation (SIMREP1)->Join (
    result,
    strlist ("simRep1_attr1", "simRep1_attr2", "simRep1_attr3"),
    strlist ("hasImgAns_attr1", "hasQ_attr2", "hasImgAns_attr5"));

  result = GetRelation (SIMREP2)->Join (
    result,
    strlist ("simRep2_attr1", "simRep2_attr2", "simRep2_attr3"),
    strlist ("hasImgAns_attr1", "hasQ_attr4", "hasImgAns_attr3"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("word")),
            VarExpr::New ("hasImgAns_attr1")),
          VarExpr::New ("hasImgAns_attr2")),
        VarExpr::New ("word_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("hasImgAns_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImgAns")),
                VarExpr::New ("hasImgAns_attr1")),
              VarExpr::New ("hasImgAns_attr2")),
            VarExpr::New ("hasImgAns_attr3")),
          VarExpr::New ("hasImgAns_attr4")),
        VarExpr::New ("hasImgAns_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("hasImgAns_attr1")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasImgAns_attr4")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("PID5",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("hasImgAns_attr1")),
            VarExpr::New ("hasQ_attr2")),
          VarExpr::New ("hasImgAns_attr5")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List5",
    FAppend::New (
      VarExpr::New ("PID5"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List5"))));

  result->Assign (Assignor::New ("PID6",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep2")),
              VarExpr::New ("hasImgAns_attr1")),
            VarExpr::New ("hasQ_attr4")),
          VarExpr::New ("hasImgAns_attr3")),
        VarExpr::New ("simRep2_attr4")))));

  result->Assign (Assignor::New ("List6",
    FAppend::New (
      VarExpr::New ("PID6"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List6"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("hasImgAns_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ECANDIDATETEMPDELETE,
    strlist ("RLOC",
      "Local",
      "hasImgAns_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ecandidateTempDelete_attr1",
      "ecandidateTempDelete_attr2",
      "ecandidateTempDelete_attr3",
      "ecandidateTempDelete_attr4",
      "ecandidateTempDelete_attr5",
      "ecandidateTempDelete_attr6",
      "ecandidateTempDelete_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r3_1Eca11Ins (Ptr<Tuple> sim)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1Eca11Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (WORD)->Join (
    sim,
    strlist ("word_attr1"),
    strlist ("sim_attr1"));

  result = GetRelation (HASQ)->Join (
    result,
    strlist ("hasQ_attr1", "hasQ_attr3"),
    strlist ("sim_attr1", "sim_attr2"));

  result = GetRelation (HASIMGANS)->Join (
    result,
    strlist ("hasImgAns_attr1", "hasImgAns_attr4", "hasImgAns_attr2"),
    strlist ("sim_attr1", "sim_attr3", "word_attr2"));

  result = GetRelation (SIMREP1)->Join (
    result,
    strlist ("simRep1_attr1", "simRep1_attr2", "simRep1_attr3"),
    strlist ("sim_attr1", "hasQ_attr2", "hasImgAns_attr5"));

  result = GetRelation (SIMREP2)->Join (
    result,
    strlist ("simRep2_attr1", "simRep2_attr2", "simRep2_attr3"),
    strlist ("sim_attr1", "hasQ_attr4", "hasImgAns_attr3"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("word")),
            VarExpr::New ("sim_attr1")),
          VarExpr::New ("word_attr2")),
        VarExpr::New ("word_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("sim_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("sim_attr2")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImgAns")),
                VarExpr::New ("sim_attr1")),
              VarExpr::New ("word_attr2")),
            VarExpr::New ("hasImgAns_attr3")),
          VarExpr::New ("sim_attr3")),
        VarExpr::New ("hasImgAns_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("sim_attr1")),
            VarExpr::New ("sim_attr2")),
          VarExpr::New ("sim_attr3")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("PID5",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("sim_attr1")),
            VarExpr::New ("hasQ_attr2")),
          VarExpr::New ("hasImgAns_attr5")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List5",
    FAppend::New (
      VarExpr::New ("PID5"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List5"))));

  result->Assign (Assignor::New ("PID6",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep2")),
              VarExpr::New ("sim_attr1")),
            VarExpr::New ("hasQ_attr4")),
          VarExpr::New ("hasImgAns_attr3")),
        VarExpr::New ("simRep2_attr4")))));

  result->Assign (Assignor::New ("List6",
    FAppend::New (
      VarExpr::New ("PID6"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List6"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("sim_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ECANDIDATETEMP,
    strlist ("RLOC",
      "Local",
      "word_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ecandidateTemp_attr1",
      "ecandidateTemp_attr2",
      "ecandidateTemp_attr3",
      "ecandidateTemp_attr4",
      "ecandidateTemp_attr5",
      "ecandidateTemp_attr6",
      "ecandidateTemp_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r3_1Eca11Del (Ptr<Tuple> sim)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1Eca11Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (WORD)->Join (
    sim,
    strlist ("word_attr1"),
    strlist ("sim_attr1"));

  result = GetRelation (HASQ)->Join (
    result,
    strlist ("hasQ_attr1", "hasQ_attr3"),
    strlist ("sim_attr1", "sim_attr2"));

  result = GetRelation (HASIMGANS)->Join (
    result,
    strlist ("hasImgAns_attr1", "hasImgAns_attr4", "hasImgAns_attr2"),
    strlist ("sim_attr1", "sim_attr3", "word_attr2"));

  result = GetRelation (SIMREP1)->Join (
    result,
    strlist ("simRep1_attr1", "simRep1_attr2", "simRep1_attr3"),
    strlist ("sim_attr1", "hasQ_attr2", "hasImgAns_attr5"));

  result = GetRelation (SIMREP2)->Join (
    result,
    strlist ("simRep2_attr1", "simRep2_attr2", "simRep2_attr3"),
    strlist ("sim_attr1", "hasQ_attr4", "hasImgAns_attr3"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("word")),
            VarExpr::New ("sim_attr1")),
          VarExpr::New ("word_attr2")),
        VarExpr::New ("word_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("sim_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("sim_attr2")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImgAns")),
                VarExpr::New ("sim_attr1")),
              VarExpr::New ("word_attr2")),
            VarExpr::New ("hasImgAns_attr3")),
          VarExpr::New ("sim_attr3")),
        VarExpr::New ("hasImgAns_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("sim_attr1")),
            VarExpr::New ("sim_attr2")),
          VarExpr::New ("sim_attr3")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("PID5",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("sim_attr1")),
            VarExpr::New ("hasQ_attr2")),
          VarExpr::New ("hasImgAns_attr5")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List5",
    FAppend::New (
      VarExpr::New ("PID5"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List5"))));

  result->Assign (Assignor::New ("PID6",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep2")),
              VarExpr::New ("sim_attr1")),
            VarExpr::New ("hasQ_attr4")),
          VarExpr::New ("hasImgAns_attr3")),
        VarExpr::New ("simRep2_attr4")))));

  result->Assign (Assignor::New ("List6",
    FAppend::New (
      VarExpr::New ("PID6"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List6"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("sim_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ECANDIDATETEMPDELETE,
    strlist ("RLOC",
      "Local",
      "word_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ecandidateTempDelete_attr1",
      "ecandidateTempDelete_attr2",
      "ecandidateTempDelete_attr3",
      "ecandidateTempDelete_attr4",
      "ecandidateTempDelete_attr5",
      "ecandidateTempDelete_attr6",
      "ecandidateTempDelete_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r3_1Eca15Ins (Ptr<Tuple> simRep1)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1Eca15Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (WORD)->Join (
    simRep1,
    strlist ("word_attr1"),
    strlist ("simRep1_attr1"));

  result = GetRelation (HASQ)->Join (
    result,
    strlist ("hasQ_attr1", "hasQ_attr2"),
    strlist ("simRep1_attr1", "simRep1_attr2"));

  result = GetRelation (HASIMGANS)->Join (
    result,
    strlist ("hasImgAns_attr1", "hasImgAns_attr5", "hasImgAns_attr2"),
    strlist ("simRep1_attr1", "simRep1_attr3", "word_attr2"));

  result = GetRelation (SIM)->Join (
    result,
    strlist ("sim_attr1", "sim_attr2", "sim_attr3"),
    strlist ("simRep1_attr1", "hasQ_attr3", "hasImgAns_attr4"));

  result = GetRelation (SIMREP2)->Join (
    result,
    strlist ("simRep2_attr1", "simRep2_attr2", "simRep2_attr3"),
    strlist ("simRep1_attr1", "hasQ_attr4", "hasImgAns_attr3"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("word")),
            VarExpr::New ("simRep1_attr1")),
          VarExpr::New ("word_attr2")),
        VarExpr::New ("word_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("simRep1_attr1")),
              VarExpr::New ("simRep1_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImgAns")),
                VarExpr::New ("simRep1_attr1")),
              VarExpr::New ("word_attr2")),
            VarExpr::New ("hasImgAns_attr3")),
          VarExpr::New ("hasImgAns_attr4")),
        VarExpr::New ("simRep1_attr3")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("simRep1_attr1")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasImgAns_attr4")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("PID5",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("simRep1_attr1")),
            VarExpr::New ("simRep1_attr2")),
          VarExpr::New ("simRep1_attr3")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List5",
    FAppend::New (
      VarExpr::New ("PID5"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List5"))));

  result->Assign (Assignor::New ("PID6",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep2")),
              VarExpr::New ("simRep1_attr1")),
            VarExpr::New ("hasQ_attr4")),
          VarExpr::New ("hasImgAns_attr3")),
        VarExpr::New ("simRep2_attr4")))));

  result->Assign (Assignor::New ("List6",
    FAppend::New (
      VarExpr::New ("PID6"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List6"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("simRep1_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ECANDIDATETEMP,
    strlist ("RLOC",
      "Local",
      "word_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ecandidateTemp_attr1",
      "ecandidateTemp_attr2",
      "ecandidateTemp_attr3",
      "ecandidateTemp_attr4",
      "ecandidateTemp_attr5",
      "ecandidateTemp_attr6",
      "ecandidateTemp_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r3_1Eca15Del (Ptr<Tuple> simRep1)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1Eca15Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (WORD)->Join (
    simRep1,
    strlist ("word_attr1"),
    strlist ("simRep1_attr1"));

  result = GetRelation (HASQ)->Join (
    result,
    strlist ("hasQ_attr1", "hasQ_attr2"),
    strlist ("simRep1_attr1", "simRep1_attr2"));

  result = GetRelation (HASIMGANS)->Join (
    result,
    strlist ("hasImgAns_attr1", "hasImgAns_attr5", "hasImgAns_attr2"),
    strlist ("simRep1_attr1", "simRep1_attr3", "word_attr2"));

  result = GetRelation (SIM)->Join (
    result,
    strlist ("sim_attr1", "sim_attr2", "sim_attr3"),
    strlist ("simRep1_attr1", "hasQ_attr3", "hasImgAns_attr4"));

  result = GetRelation (SIMREP2)->Join (
    result,
    strlist ("simRep2_attr1", "simRep2_attr2", "simRep2_attr3"),
    strlist ("simRep1_attr1", "hasQ_attr4", "hasImgAns_attr3"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("word")),
            VarExpr::New ("simRep1_attr1")),
          VarExpr::New ("word_attr2")),
        VarExpr::New ("word_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("simRep1_attr1")),
              VarExpr::New ("simRep1_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImgAns")),
                VarExpr::New ("simRep1_attr1")),
              VarExpr::New ("word_attr2")),
            VarExpr::New ("hasImgAns_attr3")),
          VarExpr::New ("hasImgAns_attr4")),
        VarExpr::New ("simRep1_attr3")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("simRep1_attr1")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasImgAns_attr4")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("PID5",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("simRep1_attr1")),
            VarExpr::New ("simRep1_attr2")),
          VarExpr::New ("simRep1_attr3")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List5",
    FAppend::New (
      VarExpr::New ("PID5"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List5"))));

  result->Assign (Assignor::New ("PID6",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep2")),
              VarExpr::New ("simRep1_attr1")),
            VarExpr::New ("hasQ_attr4")),
          VarExpr::New ("hasImgAns_attr3")),
        VarExpr::New ("simRep2_attr4")))));

  result->Assign (Assignor::New ("List6",
    FAppend::New (
      VarExpr::New ("PID6"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List6"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("simRep1_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ECANDIDATETEMPDELETE,
    strlist ("RLOC",
      "Local",
      "word_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ecandidateTempDelete_attr1",
      "ecandidateTempDelete_attr2",
      "ecandidateTempDelete_attr3",
      "ecandidateTempDelete_attr4",
      "ecandidateTempDelete_attr5",
      "ecandidateTempDelete_attr6",
      "ecandidateTempDelete_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r3_1Eca19Ins (Ptr<Tuple> simRep2)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1Eca19Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (WORD)->Join (
    simRep2,
    strlist ("word_attr1"),
    strlist ("simRep2_attr1"));

  result = GetRelation (HASQ)->Join (
    result,
    strlist ("hasQ_attr1", "hasQ_attr4"),
    strlist ("simRep2_attr1", "simRep2_attr2"));

  result = GetRelation (HASIMGANS)->Join (
    result,
    strlist ("hasImgAns_attr1", "hasImgAns_attr3", "hasImgAns_attr2"),
    strlist ("simRep2_attr1", "simRep2_attr3", "word_attr2"));

  result = GetRelation (SIM)->Join (
    result,
    strlist ("sim_attr1", "sim_attr2", "sim_attr3"),
    strlist ("simRep2_attr1", "hasQ_attr3", "hasImgAns_attr4"));

  result = GetRelation (SIMREP1)->Join (
    result,
    strlist ("simRep1_attr1", "simRep1_attr2", "simRep1_attr3"),
    strlist ("simRep2_attr1", "hasQ_attr2", "hasImgAns_attr5"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("word")),
            VarExpr::New ("simRep2_attr1")),
          VarExpr::New ("word_attr2")),
        VarExpr::New ("word_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("simRep2_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("simRep2_attr2")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImgAns")),
                VarExpr::New ("simRep2_attr1")),
              VarExpr::New ("word_attr2")),
            VarExpr::New ("simRep2_attr3")),
          VarExpr::New ("hasImgAns_attr4")),
        VarExpr::New ("hasImgAns_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("simRep2_attr1")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasImgAns_attr4")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("PID5",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("simRep2_attr1")),
            VarExpr::New ("hasQ_attr2")),
          VarExpr::New ("hasImgAns_attr5")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List5",
    FAppend::New (
      VarExpr::New ("PID5"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List5"))));

  result->Assign (Assignor::New ("PID6",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep2")),
              VarExpr::New ("simRep2_attr1")),
            VarExpr::New ("simRep2_attr2")),
          VarExpr::New ("simRep2_attr3")),
        VarExpr::New ("simRep2_attr4")))));

  result->Assign (Assignor::New ("List6",
    FAppend::New (
      VarExpr::New ("PID6"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List6"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("simRep2_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ECANDIDATETEMP,
    strlist ("RLOC",
      "Local",
      "word_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ecandidateTemp_attr1",
      "ecandidateTemp_attr2",
      "ecandidateTemp_attr3",
      "ecandidateTemp_attr4",
      "ecandidateTemp_attr5",
      "ecandidateTemp_attr6",
      "ecandidateTemp_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r3_1Eca19Del (Ptr<Tuple> simRep2)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1Eca19Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (WORD)->Join (
    simRep2,
    strlist ("word_attr1"),
    strlist ("simRep2_attr1"));

  result = GetRelation (HASQ)->Join (
    result,
    strlist ("hasQ_attr1", "hasQ_attr4"),
    strlist ("simRep2_attr1", "simRep2_attr2"));

  result = GetRelation (HASIMGANS)->Join (
    result,
    strlist ("hasImgAns_attr1", "hasImgAns_attr3", "hasImgAns_attr2"),
    strlist ("simRep2_attr1", "simRep2_attr3", "word_attr2"));

  result = GetRelation (SIM)->Join (
    result,
    strlist ("sim_attr1", "sim_attr2", "sim_attr3"),
    strlist ("simRep2_attr1", "hasQ_attr3", "hasImgAns_attr4"));

  result = GetRelation (SIMREP1)->Join (
    result,
    strlist ("simRep1_attr1", "simRep1_attr2", "simRep1_attr3"),
    strlist ("simRep2_attr1", "hasQ_attr2", "hasImgAns_attr5"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("word")),
            VarExpr::New ("simRep2_attr1")),
          VarExpr::New ("word_attr2")),
        VarExpr::New ("word_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("simRep2_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("simRep2_attr2")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImgAns")),
                VarExpr::New ("simRep2_attr1")),
              VarExpr::New ("word_attr2")),
            VarExpr::New ("simRep2_attr3")),
          VarExpr::New ("hasImgAns_attr4")),
        VarExpr::New ("hasImgAns_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("simRep2_attr1")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasImgAns_attr4")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("PID5",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("simRep2_attr1")),
            VarExpr::New ("hasQ_attr2")),
          VarExpr::New ("hasImgAns_attr5")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List5",
    FAppend::New (
      VarExpr::New ("PID5"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List5"))));

  result->Assign (Assignor::New ("PID6",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep2")),
              VarExpr::New ("simRep2_attr1")),
            VarExpr::New ("simRep2_attr2")),
          VarExpr::New ("simRep2_attr3")),
        VarExpr::New ("simRep2_attr4")))));

  result->Assign (Assignor::New ("List6",
    FAppend::New (
      VarExpr::New ("PID6"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List6"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("simRep2_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ECANDIDATETEMPDELETE,
    strlist ("RLOC",
      "Local",
      "word_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("ecandidateTempDelete_attr1",
      "ecandidateTempDelete_attr2",
      "ecandidateTempDelete_attr3",
      "ecandidateTempDelete_attr4",
      "ecandidateTempDelete_attr5",
      "ecandidateTempDelete_attr6",
      "ecandidateTempDelete_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r4_1Eca0Ins (Ptr<Tuple> candidate)
{
  RAPIDNET_LOG_INFO ("Prov_r4_1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (HASQ)->Join (
    candidate,
    strlist ("hasQ_attr1"),
    strlist ("candidate_attr1"));

  result = GetRelation (HASIMG)->Join (
    result,
    strlist ("hasImg_attr1", "hasImg_attr3", "hasImg_attr4", "hasImg_attr2"),
    strlist ("candidate_attr1", "hasQ_attr3", "hasQ_attr2", "candidate_attr2"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("candidate")),
          VarExpr::New ("candidate_attr1")),
        VarExpr::New ("candidate_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("candidate_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("candidate_attr1")),
              VarExpr::New ("candidate_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr2")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("candidate_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r4"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("hasQ_attr4"),
      ValueExpr::New (StrValue::New ("WHAT")))));

  result = result->Project (
    EANSTEMP,
    strlist ("RLOC",
      "Local",
      "candidate_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eansTemp_attr1",
      "eansTemp_attr2",
      "eansTemp_attr3",
      "eansTemp_attr4",
      "eansTemp_attr5",
      "eansTemp_attr6",
      "eansTemp_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r4_1Eca0Del (Ptr<Tuple> candidate)
{
  RAPIDNET_LOG_INFO ("Prov_r4_1Eca0Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (HASQ)->Join (
    candidate,
    strlist ("hasQ_attr1"),
    strlist ("candidate_attr1"));

  result = GetRelation (HASIMG)->Join (
    result,
    strlist ("hasImg_attr1", "hasImg_attr3", "hasImg_attr4", "hasImg_attr2"),
    strlist ("candidate_attr1", "hasQ_attr3", "hasQ_attr2", "candidate_attr2"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("candidate")),
          VarExpr::New ("candidate_attr1")),
        VarExpr::New ("candidate_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("candidate_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("candidate_attr1")),
              VarExpr::New ("candidate_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr2")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("candidate_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r4"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("hasQ_attr4"),
      ValueExpr::New (StrValue::New ("WHAT")))));

  result = result->Project (
    EANSTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "candidate_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eansTempDelete_attr1",
      "eansTempDelete_attr2",
      "eansTempDelete_attr3",
      "eansTempDelete_attr4",
      "eansTempDelete_attr5",
      "eansTempDelete_attr6",
      "eansTempDelete_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r4_1Eca3Ins (Ptr<Tuple> hasQ)
{
  RAPIDNET_LOG_INFO ("Prov_r4_1Eca3Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (CANDIDATE)->Join (
    hasQ,
    strlist ("candidate_attr1"),
    strlist ("hasQ_attr1"));

  result = GetRelation (HASIMG)->Join (
    result,
    strlist ("hasImg_attr1", "hasImg_attr3", "hasImg_attr4", "hasImg_attr2"),
    strlist ("hasQ_attr1", "hasQ_attr3", "hasQ_attr2", "candidate_attr2"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("candidate")),
          VarExpr::New ("hasQ_attr1")),
        VarExpr::New ("candidate_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("hasQ_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("hasQ_attr1")),
              VarExpr::New ("candidate_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr2")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("hasQ_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r4"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("hasQ_attr4"),
      ValueExpr::New (StrValue::New ("WHAT")))));

  result = result->Project (
    EANSTEMP,
    strlist ("RLOC",
      "Local",
      "candidate_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eansTemp_attr1",
      "eansTemp_attr2",
      "eansTemp_attr3",
      "eansTemp_attr4",
      "eansTemp_attr5",
      "eansTemp_attr6",
      "eansTemp_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r4_1Eca3Del (Ptr<Tuple> hasQ)
{
  RAPIDNET_LOG_INFO ("Prov_r4_1Eca3Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (CANDIDATE)->Join (
    hasQ,
    strlist ("candidate_attr1"),
    strlist ("hasQ_attr1"));

  result = GetRelation (HASIMG)->Join (
    result,
    strlist ("hasImg_attr1", "hasImg_attr3", "hasImg_attr4", "hasImg_attr2"),
    strlist ("hasQ_attr1", "hasQ_attr3", "hasQ_attr2", "candidate_attr2"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("candidate")),
          VarExpr::New ("hasQ_attr1")),
        VarExpr::New ("candidate_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("hasQ_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("hasQ_attr1")),
              VarExpr::New ("candidate_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr2")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("hasQ_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r4"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("hasQ_attr4"),
      ValueExpr::New (StrValue::New ("WHAT")))));

  result = result->Project (
    EANSTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "candidate_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eansTempDelete_attr1",
      "eansTempDelete_attr2",
      "eansTempDelete_attr3",
      "eansTempDelete_attr4",
      "eansTempDelete_attr5",
      "eansTempDelete_attr6",
      "eansTempDelete_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r4_1Eca8Ins (Ptr<Tuple> hasImg)
{
  RAPIDNET_LOG_INFO ("Prov_r4_1Eca8Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (CANDIDATE)->Join (
    hasImg,
    strlist ("candidate_attr1", "candidate_attr2"),
    strlist ("hasImg_attr1", "hasImg_attr2"));

  result = GetRelation (HASQ)->Join (
    result,
    strlist ("hasQ_attr1", "hasQ_attr3", "hasQ_attr2"),
    strlist ("hasImg_attr1", "hasImg_attr3", "hasImg_attr4"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("candidate")),
          VarExpr::New ("hasImg_attr1")),
        VarExpr::New ("hasImg_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("hasImg_attr1")),
              VarExpr::New ("hasImg_attr4")),
            VarExpr::New ("hasImg_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("hasImg_attr1")),
              VarExpr::New ("hasImg_attr2")),
            VarExpr::New ("hasImg_attr3")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("hasImg_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r4"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("hasQ_attr4"),
      ValueExpr::New (StrValue::New ("WHAT")))));

  result = result->Project (
    EANSTEMP,
    strlist ("RLOC",
      "Local",
      "hasImg_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eansTemp_attr1",
      "eansTemp_attr2",
      "eansTemp_attr3",
      "eansTemp_attr4",
      "eansTemp_attr5",
      "eansTemp_attr6",
      "eansTemp_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r4_1Eca8Del (Ptr<Tuple> hasImg)
{
  RAPIDNET_LOG_INFO ("Prov_r4_1Eca8Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (CANDIDATE)->Join (
    hasImg,
    strlist ("candidate_attr1", "candidate_attr2"),
    strlist ("hasImg_attr1", "hasImg_attr2"));

  result = GetRelation (HASQ)->Join (
    result,
    strlist ("hasQ_attr1", "hasQ_attr3", "hasQ_attr2"),
    strlist ("hasImg_attr1", "hasImg_attr3", "hasImg_attr4"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("candidate")),
          VarExpr::New ("hasImg_attr1")),
        VarExpr::New ("hasImg_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("hasImg_attr1")),
              VarExpr::New ("hasImg_attr4")),
            VarExpr::New ("hasImg_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("hasImg_attr1")),
              VarExpr::New ("hasImg_attr2")),
            VarExpr::New ("hasImg_attr3")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("hasImg_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r4"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("hasQ_attr4"),
      ValueExpr::New (StrValue::New ("WHAT")))));

  result = result->Project (
    EANSTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "hasImg_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eansTempDelete_attr1",
      "eansTempDelete_attr2",
      "eansTempDelete_attr3",
      "eansTempDelete_attr4",
      "eansTempDelete_attr5",
      "eansTempDelete_attr6",
      "eansTempDelete_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r4_2_ecaAdd (Ptr<Tuple> eansTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r4_2_ecaAdd triggered");

  Ptr<Tuple> result = eansTemp;

  result = result->Project (
    RULEEXEC,
    strlist ("eansTemp_attr1",
      "eansTemp_attr4",
      "eansTemp_attr5",
      "eansTemp_attr6",
      "eansTemp_attr7"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Insert (result);
}

void
Vqap::Prov_r4_2_ecaDel (Ptr<Tuple> eansTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r4_2_ecaDel triggered");

  Ptr<Tuple> result = eansTempDelete;

  result = result->Project (
    RULEEXEC,
    strlist ("eansTempDelete_attr1",
      "eansTempDelete_attr4",
      "eansTempDelete_attr5",
      "eansTempDelete_attr6",
      "eansTempDelete_attr7"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Delete (result);
}

void
Vqap::Prov_r4_3_ecaAdd (Ptr<Tuple> eansTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r4_3_ecaAdd triggered");

  Ptr<Tuple> result = eansTemp;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    EANS,
    strlist ("Local",
      "eansTemp_attr3",
      "eansTemp_attr4",
      "eansTemp_attr5",
      "eansTemp_attr1",
      "Local"),
    strlist ("eans_attr1",
      "eans_attr2",
      "eans_attr3",
      "eans_attr4",
      "eans_attr5",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r4_3_ecaDel (Ptr<Tuple> eansTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r4_3_ecaDel triggered");

  Ptr<Tuple> result = eansTempDelete;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    EANSDELETE,
    strlist ("Local",
      "eansTempDelete_attr3",
      "eansTempDelete_attr4",
      "eansTempDelete_attr5",
      "eansTempDelete_attr1",
      "Local"),
    strlist ("eansDelete_attr1",
      "eansDelete_attr2",
      "eansDelete_attr3",
      "eansDelete_attr4",
      "eansDelete_attr5",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r4_4_ecaAdd (Ptr<Tuple> eans)
{
  RAPIDNET_LOG_INFO ("Prov_r4_4_ecaAdd triggered");

  Ptr<Tuple> result = eans;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ANS,
    strlist ("Local",
      "eans_attr2"),
    strlist ("ans_attr1",
      "ans_attr2"));

  Insert (result);
}

void
Vqap::Prov_r4_4_ecaDel (Ptr<Tuple> eansDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r4_4_ecaDel triggered");

  Ptr<Tuple> result = eansDelete;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ANS,
    strlist ("Local",
      "eansDelete_attr2"),
    strlist ("ans_attr1",
      "ans_attr2"));

  Delete (result);
}

void
Vqap::Prov_r4_5_ecaAdd (Ptr<Tuple> eans)
{
  RAPIDNET_LOG_INFO ("Prov_r4_5_ecaAdd triggered");

  Ptr<Tuple> result = eans;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("ans")),
          VarExpr::New ("eans_attr1")),
        VarExpr::New ("eans_attr2")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "eans_attr3",
      "eans_attr5",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Insert (result);
}

void
Vqap::Prov_r4_5_ecaDel (Ptr<Tuple> eansDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r4_5_ecaDel triggered");

  Ptr<Tuple> result = eansDelete;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("ans")),
          VarExpr::New ("eansDelete_attr1")),
        VarExpr::New ("eansDelete_attr2")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "eansDelete_attr3",
      "eansDelete_attr5",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Delete (result);
}

void
Vqap::Prov_r5_1Eca0Ins (Ptr<Tuple> candidate)
{
  RAPIDNET_LOG_INFO ("Prov_r5_1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (HASQ)->Join (
    candidate,
    strlist ("hasQ_attr1"),
    strlist ("candidate_attr1"));

  result = GetRelation (HASIMG)->Join (
    result,
    strlist ("hasImg_attr1", "hasImg_attr3", "hasImg_attr4"),
    strlist ("candidate_attr1", "hasQ_attr3", "hasQ_attr2"));

  result = GetRelation (SIM)->Join (
    result,
    strlist ("sim_attr1", "sim_attr2", "sim_attr3"),
    strlist ("candidate_attr1", "candidate_attr2", "hasImg_attr2"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("candidate")),
          VarExpr::New ("candidate_attr1")),
        VarExpr::New ("candidate_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("candidate_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("candidate_attr1")),
              VarExpr::New ("hasImg_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr2")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("candidate_attr1")),
            VarExpr::New ("candidate_attr2")),
          VarExpr::New ("hasImg_attr2")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("candidate_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r5"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("hasQ_attr4"),
      ValueExpr::New (StrValue::New ("WHAT")))));

  result = result->Project (
    EANSTEMP,
    strlist ("RLOC",
      "Local",
      "candidate_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eansTemp_attr1",
      "eansTemp_attr2",
      "eansTemp_attr3",
      "eansTemp_attr4",
      "eansTemp_attr5",
      "eansTemp_attr6",
      "eansTemp_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r5_1Eca0Del (Ptr<Tuple> candidate)
{
  RAPIDNET_LOG_INFO ("Prov_r5_1Eca0Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (HASQ)->Join (
    candidate,
    strlist ("hasQ_attr1"),
    strlist ("candidate_attr1"));

  result = GetRelation (HASIMG)->Join (
    result,
    strlist ("hasImg_attr1", "hasImg_attr3", "hasImg_attr4"),
    strlist ("candidate_attr1", "hasQ_attr3", "hasQ_attr2"));

  result = GetRelation (SIM)->Join (
    result,
    strlist ("sim_attr1", "sim_attr2", "sim_attr3"),
    strlist ("candidate_attr1", "candidate_attr2", "hasImg_attr2"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("candidate")),
          VarExpr::New ("candidate_attr1")),
        VarExpr::New ("candidate_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("candidate_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("candidate_attr1")),
              VarExpr::New ("hasImg_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr2")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("candidate_attr1")),
            VarExpr::New ("candidate_attr2")),
          VarExpr::New ("hasImg_attr2")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("candidate_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r5"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("hasQ_attr4"),
      ValueExpr::New (StrValue::New ("WHAT")))));

  result = result->Project (
    EANSTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "candidate_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eansTempDelete_attr1",
      "eansTempDelete_attr2",
      "eansTempDelete_attr3",
      "eansTempDelete_attr4",
      "eansTempDelete_attr5",
      "eansTempDelete_attr6",
      "eansTempDelete_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r5_1Eca3Ins (Ptr<Tuple> hasQ)
{
  RAPIDNET_LOG_INFO ("Prov_r5_1Eca3Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (CANDIDATE)->Join (
    hasQ,
    strlist ("candidate_attr1"),
    strlist ("hasQ_attr1"));

  result = GetRelation (HASIMG)->Join (
    result,
    strlist ("hasImg_attr1", "hasImg_attr3", "hasImg_attr4"),
    strlist ("hasQ_attr1", "hasQ_attr3", "hasQ_attr2"));

  result = GetRelation (SIM)->Join (
    result,
    strlist ("sim_attr1", "sim_attr2", "sim_attr3"),
    strlist ("hasQ_attr1", "candidate_attr2", "hasImg_attr2"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("candidate")),
          VarExpr::New ("hasQ_attr1")),
        VarExpr::New ("candidate_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("hasQ_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("hasQ_attr1")),
              VarExpr::New ("hasImg_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr2")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("hasQ_attr1")),
            VarExpr::New ("candidate_attr2")),
          VarExpr::New ("hasImg_attr2")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("hasQ_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r5"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("hasQ_attr4"),
      ValueExpr::New (StrValue::New ("WHAT")))));

  result = result->Project (
    EANSTEMP,
    strlist ("RLOC",
      "Local",
      "candidate_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eansTemp_attr1",
      "eansTemp_attr2",
      "eansTemp_attr3",
      "eansTemp_attr4",
      "eansTemp_attr5",
      "eansTemp_attr6",
      "eansTemp_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r5_1Eca3Del (Ptr<Tuple> hasQ)
{
  RAPIDNET_LOG_INFO ("Prov_r5_1Eca3Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (CANDIDATE)->Join (
    hasQ,
    strlist ("candidate_attr1"),
    strlist ("hasQ_attr1"));

  result = GetRelation (HASIMG)->Join (
    result,
    strlist ("hasImg_attr1", "hasImg_attr3", "hasImg_attr4"),
    strlist ("hasQ_attr1", "hasQ_attr3", "hasQ_attr2"));

  result = GetRelation (SIM)->Join (
    result,
    strlist ("sim_attr1", "sim_attr2", "sim_attr3"),
    strlist ("hasQ_attr1", "candidate_attr2", "hasImg_attr2"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("candidate")),
          VarExpr::New ("hasQ_attr1")),
        VarExpr::New ("candidate_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("hasQ_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("hasQ_attr1")),
              VarExpr::New ("hasImg_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr2")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("hasQ_attr1")),
            VarExpr::New ("candidate_attr2")),
          VarExpr::New ("hasImg_attr2")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("hasQ_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r5"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("hasQ_attr4"),
      ValueExpr::New (StrValue::New ("WHAT")))));

  result = result->Project (
    EANSTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "candidate_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eansTempDelete_attr1",
      "eansTempDelete_attr2",
      "eansTempDelete_attr3",
      "eansTempDelete_attr4",
      "eansTempDelete_attr5",
      "eansTempDelete_attr6",
      "eansTempDelete_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r5_1Eca8Ins (Ptr<Tuple> hasImg)
{
  RAPIDNET_LOG_INFO ("Prov_r5_1Eca8Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (CANDIDATE)->Join (
    hasImg,
    strlist ("candidate_attr1"),
    strlist ("hasImg_attr1"));

  result = GetRelation (HASQ)->Join (
    result,
    strlist ("hasQ_attr1", "hasQ_attr3", "hasQ_attr2"),
    strlist ("hasImg_attr1", "hasImg_attr3", "hasImg_attr4"));

  result = GetRelation (SIM)->Join (
    result,
    strlist ("sim_attr1", "sim_attr2", "sim_attr3"),
    strlist ("hasImg_attr1", "candidate_attr2", "hasImg_attr2"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("candidate")),
          VarExpr::New ("hasImg_attr1")),
        VarExpr::New ("candidate_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("hasImg_attr1")),
              VarExpr::New ("hasImg_attr4")),
            VarExpr::New ("hasImg_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("hasImg_attr1")),
              VarExpr::New ("hasImg_attr2")),
            VarExpr::New ("hasImg_attr3")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("hasImg_attr1")),
            VarExpr::New ("candidate_attr2")),
          VarExpr::New ("hasImg_attr2")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("hasImg_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r5"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("hasQ_attr4"),
      ValueExpr::New (StrValue::New ("WHAT")))));

  result = result->Project (
    EANSTEMP,
    strlist ("RLOC",
      "Local",
      "candidate_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eansTemp_attr1",
      "eansTemp_attr2",
      "eansTemp_attr3",
      "eansTemp_attr4",
      "eansTemp_attr5",
      "eansTemp_attr6",
      "eansTemp_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r5_1Eca8Del (Ptr<Tuple> hasImg)
{
  RAPIDNET_LOG_INFO ("Prov_r5_1Eca8Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (CANDIDATE)->Join (
    hasImg,
    strlist ("candidate_attr1"),
    strlist ("hasImg_attr1"));

  result = GetRelation (HASQ)->Join (
    result,
    strlist ("hasQ_attr1", "hasQ_attr3", "hasQ_attr2"),
    strlist ("hasImg_attr1", "hasImg_attr3", "hasImg_attr4"));

  result = GetRelation (SIM)->Join (
    result,
    strlist ("sim_attr1", "sim_attr2", "sim_attr3"),
    strlist ("hasImg_attr1", "candidate_attr2", "hasImg_attr2"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("candidate")),
          VarExpr::New ("hasImg_attr1")),
        VarExpr::New ("candidate_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("hasImg_attr1")),
              VarExpr::New ("hasImg_attr4")),
            VarExpr::New ("hasImg_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("hasImg_attr1")),
              VarExpr::New ("hasImg_attr2")),
            VarExpr::New ("hasImg_attr3")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("hasImg_attr1")),
            VarExpr::New ("candidate_attr2")),
          VarExpr::New ("hasImg_attr2")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("hasImg_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r5"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("hasQ_attr4"),
      ValueExpr::New (StrValue::New ("WHAT")))));

  result = result->Project (
    EANSTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "candidate_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eansTempDelete_attr1",
      "eansTempDelete_attr2",
      "eansTempDelete_attr3",
      "eansTempDelete_attr4",
      "eansTempDelete_attr5",
      "eansTempDelete_attr6",
      "eansTempDelete_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r5_1Eca12Ins (Ptr<Tuple> sim)
{
  RAPIDNET_LOG_INFO ("Prov_r5_1Eca12Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (CANDIDATE)->Join (
    sim,
    strlist ("candidate_attr1", "candidate_attr2"),
    strlist ("sim_attr1", "sim_attr2"));

  result = GetRelation (HASQ)->Join (
    result,
    strlist ("hasQ_attr1"),
    strlist ("sim_attr1"));

  result = GetRelation (HASIMG)->Join (
    result,
    strlist ("hasImg_attr1", "hasImg_attr3", "hasImg_attr4", "hasImg_attr2"),
    strlist ("sim_attr1", "hasQ_attr3", "hasQ_attr2", "sim_attr3"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("candidate")),
          VarExpr::New ("sim_attr1")),
        VarExpr::New ("sim_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("sim_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("sim_attr1")),
              VarExpr::New ("sim_attr3")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr2")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("sim_attr1")),
            VarExpr::New ("sim_attr2")),
          VarExpr::New ("sim_attr3")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("sim_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r5"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("hasQ_attr4"),
      ValueExpr::New (StrValue::New ("WHAT")))));

  result = result->Project (
    EANSTEMP,
    strlist ("RLOC",
      "Local",
      "sim_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eansTemp_attr1",
      "eansTemp_attr2",
      "eansTemp_attr3",
      "eansTemp_attr4",
      "eansTemp_attr5",
      "eansTemp_attr6",
      "eansTemp_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r5_1Eca12Del (Ptr<Tuple> sim)
{
  RAPIDNET_LOG_INFO ("Prov_r5_1Eca12Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (CANDIDATE)->Join (
    sim,
    strlist ("candidate_attr1", "candidate_attr2"),
    strlist ("sim_attr1", "sim_attr2"));

  result = GetRelation (HASQ)->Join (
    result,
    strlist ("hasQ_attr1"),
    strlist ("sim_attr1"));

  result = GetRelation (HASIMG)->Join (
    result,
    strlist ("hasImg_attr1", "hasImg_attr3", "hasImg_attr4", "hasImg_attr2"),
    strlist ("sim_attr1", "hasQ_attr3", "hasQ_attr2", "sim_attr3"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("candidate")),
          VarExpr::New ("sim_attr1")),
        VarExpr::New ("sim_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("sim_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("sim_attr1")),
              VarExpr::New ("sim_attr3")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr2")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("sim_attr1")),
            VarExpr::New ("sim_attr2")),
          VarExpr::New ("sim_attr3")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("sim_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r5"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("hasQ_attr4"),
      ValueExpr::New (StrValue::New ("WHAT")))));

  result = result->Project (
    EANSTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "sim_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eansTempDelete_attr1",
      "eansTempDelete_attr2",
      "eansTempDelete_attr3",
      "eansTempDelete_attr4",
      "eansTempDelete_attr5",
      "eansTempDelete_attr6",
      "eansTempDelete_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r6_1Eca0Ins (Ptr<Tuple> candidate)
{
  RAPIDNET_LOG_INFO ("Prov_r6_1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (HASQ)->Join (
    candidate,
    strlist ("hasQ_attr1"),
    strlist ("candidate_attr1"));

  result = GetRelation (HASIMG)->Join (
    result,
    strlist ("hasImg_attr1"),
    strlist ("candidate_attr1"));

  result = GetRelation (SIM)->Join (
    result,
    strlist ("sim_attr1", "sim_attr2", "sim_attr3"),
    strlist ("candidate_attr1", "candidate_attr2", "hasImg_attr2"));

  result = GetRelation (SIMREP1)->Join (
    result,
    strlist ("simRep1_attr1", "simRep1_attr2", "simRep1_attr3"),
    strlist ("candidate_attr1", "hasQ_attr3", "hasImg_attr3"));

  result = GetRelation (SIMREP2)->Join (
    result,
    strlist ("simRep2_attr1", "simRep2_attr2", "simRep2_attr3"),
    strlist ("candidate_attr1", "hasQ_attr2", "hasImg_attr4"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("candidate")),
          VarExpr::New ("candidate_attr1")),
        VarExpr::New ("candidate_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("candidate_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("candidate_attr1")),
              VarExpr::New ("hasImg_attr2")),
            VarExpr::New ("hasImg_attr3")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("candidate_attr1")),
            VarExpr::New ("candidate_attr2")),
          VarExpr::New ("hasImg_attr2")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("PID5",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("candidate_attr1")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasImg_attr3")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List5",
    FAppend::New (
      VarExpr::New ("PID5"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List5"))));

  result->Assign (Assignor::New ("PID6",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep2")),
              VarExpr::New ("candidate_attr1")),
            VarExpr::New ("hasQ_attr2")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("simRep2_attr4")))));

  result->Assign (Assignor::New ("List6",
    FAppend::New (
      VarExpr::New ("PID6"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List6"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("candidate_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r6"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("hasQ_attr4"),
      ValueExpr::New (StrValue::New ("WHAT")))));

  result = result->Project (
    EANSTEMP,
    strlist ("RLOC",
      "Local",
      "candidate_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eansTemp_attr1",
      "eansTemp_attr2",
      "eansTemp_attr3",
      "eansTemp_attr4",
      "eansTemp_attr5",
      "eansTemp_attr6",
      "eansTemp_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r6_1Eca0Del (Ptr<Tuple> candidate)
{
  RAPIDNET_LOG_INFO ("Prov_r6_1Eca0Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (HASQ)->Join (
    candidate,
    strlist ("hasQ_attr1"),
    strlist ("candidate_attr1"));

  result = GetRelation (HASIMG)->Join (
    result,
    strlist ("hasImg_attr1"),
    strlist ("candidate_attr1"));

  result = GetRelation (SIM)->Join (
    result,
    strlist ("sim_attr1", "sim_attr2", "sim_attr3"),
    strlist ("candidate_attr1", "candidate_attr2", "hasImg_attr2"));

  result = GetRelation (SIMREP1)->Join (
    result,
    strlist ("simRep1_attr1", "simRep1_attr2", "simRep1_attr3"),
    strlist ("candidate_attr1", "hasQ_attr3", "hasImg_attr3"));

  result = GetRelation (SIMREP2)->Join (
    result,
    strlist ("simRep2_attr1", "simRep2_attr2", "simRep2_attr3"),
    strlist ("candidate_attr1", "hasQ_attr2", "hasImg_attr4"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("candidate")),
          VarExpr::New ("candidate_attr1")),
        VarExpr::New ("candidate_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("candidate_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("candidate_attr1")),
              VarExpr::New ("hasImg_attr2")),
            VarExpr::New ("hasImg_attr3")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("candidate_attr1")),
            VarExpr::New ("candidate_attr2")),
          VarExpr::New ("hasImg_attr2")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("PID5",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("candidate_attr1")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasImg_attr3")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List5",
    FAppend::New (
      VarExpr::New ("PID5"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List5"))));

  result->Assign (Assignor::New ("PID6",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep2")),
              VarExpr::New ("candidate_attr1")),
            VarExpr::New ("hasQ_attr2")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("simRep2_attr4")))));

  result->Assign (Assignor::New ("List6",
    FAppend::New (
      VarExpr::New ("PID6"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List6"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("candidate_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r6"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("hasQ_attr4"),
      ValueExpr::New (StrValue::New ("WHAT")))));

  result = result->Project (
    EANSTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "candidate_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eansTempDelete_attr1",
      "eansTempDelete_attr2",
      "eansTempDelete_attr3",
      "eansTempDelete_attr4",
      "eansTempDelete_attr5",
      "eansTempDelete_attr6",
      "eansTempDelete_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r6_1Eca3Ins (Ptr<Tuple> hasQ)
{
  RAPIDNET_LOG_INFO ("Prov_r6_1Eca3Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (CANDIDATE)->Join (
    hasQ,
    strlist ("candidate_attr1"),
    strlist ("hasQ_attr1"));

  result = GetRelation (HASIMG)->Join (
    result,
    strlist ("hasImg_attr1"),
    strlist ("hasQ_attr1"));

  result = GetRelation (SIM)->Join (
    result,
    strlist ("sim_attr1", "sim_attr2", "sim_attr3"),
    strlist ("hasQ_attr1", "candidate_attr2", "hasImg_attr2"));

  result = GetRelation (SIMREP1)->Join (
    result,
    strlist ("simRep1_attr1", "simRep1_attr2", "simRep1_attr3"),
    strlist ("hasQ_attr1", "hasQ_attr3", "hasImg_attr3"));

  result = GetRelation (SIMREP2)->Join (
    result,
    strlist ("simRep2_attr1", "simRep2_attr2", "simRep2_attr3"),
    strlist ("hasQ_attr1", "hasQ_attr2", "hasImg_attr4"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("candidate")),
          VarExpr::New ("hasQ_attr1")),
        VarExpr::New ("candidate_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("hasQ_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("hasQ_attr1")),
              VarExpr::New ("hasImg_attr2")),
            VarExpr::New ("hasImg_attr3")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("hasQ_attr1")),
            VarExpr::New ("candidate_attr2")),
          VarExpr::New ("hasImg_attr2")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("PID5",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("hasQ_attr1")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasImg_attr3")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List5",
    FAppend::New (
      VarExpr::New ("PID5"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List5"))));

  result->Assign (Assignor::New ("PID6",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep2")),
              VarExpr::New ("hasQ_attr1")),
            VarExpr::New ("hasQ_attr2")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("simRep2_attr4")))));

  result->Assign (Assignor::New ("List6",
    FAppend::New (
      VarExpr::New ("PID6"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List6"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("hasQ_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r6"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("hasQ_attr4"),
      ValueExpr::New (StrValue::New ("WHAT")))));

  result = result->Project (
    EANSTEMP,
    strlist ("RLOC",
      "Local",
      "candidate_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eansTemp_attr1",
      "eansTemp_attr2",
      "eansTemp_attr3",
      "eansTemp_attr4",
      "eansTemp_attr5",
      "eansTemp_attr6",
      "eansTemp_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r6_1Eca3Del (Ptr<Tuple> hasQ)
{
  RAPIDNET_LOG_INFO ("Prov_r6_1Eca3Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (CANDIDATE)->Join (
    hasQ,
    strlist ("candidate_attr1"),
    strlist ("hasQ_attr1"));

  result = GetRelation (HASIMG)->Join (
    result,
    strlist ("hasImg_attr1"),
    strlist ("hasQ_attr1"));

  result = GetRelation (SIM)->Join (
    result,
    strlist ("sim_attr1", "sim_attr2", "sim_attr3"),
    strlist ("hasQ_attr1", "candidate_attr2", "hasImg_attr2"));

  result = GetRelation (SIMREP1)->Join (
    result,
    strlist ("simRep1_attr1", "simRep1_attr2", "simRep1_attr3"),
    strlist ("hasQ_attr1", "hasQ_attr3", "hasImg_attr3"));

  result = GetRelation (SIMREP2)->Join (
    result,
    strlist ("simRep2_attr1", "simRep2_attr2", "simRep2_attr3"),
    strlist ("hasQ_attr1", "hasQ_attr2", "hasImg_attr4"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("candidate")),
          VarExpr::New ("hasQ_attr1")),
        VarExpr::New ("candidate_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("hasQ_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("hasQ_attr1")),
              VarExpr::New ("hasImg_attr2")),
            VarExpr::New ("hasImg_attr3")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("hasQ_attr1")),
            VarExpr::New ("candidate_attr2")),
          VarExpr::New ("hasImg_attr2")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("PID5",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("hasQ_attr1")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasImg_attr3")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List5",
    FAppend::New (
      VarExpr::New ("PID5"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List5"))));

  result->Assign (Assignor::New ("PID6",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep2")),
              VarExpr::New ("hasQ_attr1")),
            VarExpr::New ("hasQ_attr2")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("simRep2_attr4")))));

  result->Assign (Assignor::New ("List6",
    FAppend::New (
      VarExpr::New ("PID6"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List6"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("hasQ_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r6"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("hasQ_attr4"),
      ValueExpr::New (StrValue::New ("WHAT")))));

  result = result->Project (
    EANSTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "candidate_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eansTempDelete_attr1",
      "eansTempDelete_attr2",
      "eansTempDelete_attr3",
      "eansTempDelete_attr4",
      "eansTempDelete_attr5",
      "eansTempDelete_attr6",
      "eansTempDelete_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r6_1Eca8Ins (Ptr<Tuple> hasImg)
{
  RAPIDNET_LOG_INFO ("Prov_r6_1Eca8Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (CANDIDATE)->Join (
    hasImg,
    strlist ("candidate_attr1"),
    strlist ("hasImg_attr1"));

  result = GetRelation (HASQ)->Join (
    result,
    strlist ("hasQ_attr1"),
    strlist ("hasImg_attr1"));

  result = GetRelation (SIM)->Join (
    result,
    strlist ("sim_attr1", "sim_attr2", "sim_attr3"),
    strlist ("hasImg_attr1", "candidate_attr2", "hasImg_attr2"));

  result = GetRelation (SIMREP1)->Join (
    result,
    strlist ("simRep1_attr1", "simRep1_attr2", "simRep1_attr3"),
    strlist ("hasImg_attr1", "hasQ_attr3", "hasImg_attr3"));

  result = GetRelation (SIMREP2)->Join (
    result,
    strlist ("simRep2_attr1", "simRep2_attr2", "simRep2_attr3"),
    strlist ("hasImg_attr1", "hasQ_attr2", "hasImg_attr4"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("candidate")),
          VarExpr::New ("hasImg_attr1")),
        VarExpr::New ("candidate_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("hasImg_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("hasImg_attr1")),
              VarExpr::New ("hasImg_attr2")),
            VarExpr::New ("hasImg_attr3")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("hasImg_attr1")),
            VarExpr::New ("candidate_attr2")),
          VarExpr::New ("hasImg_attr2")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("PID5",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("hasImg_attr1")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasImg_attr3")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List5",
    FAppend::New (
      VarExpr::New ("PID5"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List5"))));

  result->Assign (Assignor::New ("PID6",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep2")),
              VarExpr::New ("hasImg_attr1")),
            VarExpr::New ("hasQ_attr2")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("simRep2_attr4")))));

  result->Assign (Assignor::New ("List6",
    FAppend::New (
      VarExpr::New ("PID6"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List6"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("hasImg_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r6"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("hasQ_attr4"),
      ValueExpr::New (StrValue::New ("WHAT")))));

  result = result->Project (
    EANSTEMP,
    strlist ("RLOC",
      "Local",
      "candidate_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eansTemp_attr1",
      "eansTemp_attr2",
      "eansTemp_attr3",
      "eansTemp_attr4",
      "eansTemp_attr5",
      "eansTemp_attr6",
      "eansTemp_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r6_1Eca8Del (Ptr<Tuple> hasImg)
{
  RAPIDNET_LOG_INFO ("Prov_r6_1Eca8Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (CANDIDATE)->Join (
    hasImg,
    strlist ("candidate_attr1"),
    strlist ("hasImg_attr1"));

  result = GetRelation (HASQ)->Join (
    result,
    strlist ("hasQ_attr1"),
    strlist ("hasImg_attr1"));

  result = GetRelation (SIM)->Join (
    result,
    strlist ("sim_attr1", "sim_attr2", "sim_attr3"),
    strlist ("hasImg_attr1", "candidate_attr2", "hasImg_attr2"));

  result = GetRelation (SIMREP1)->Join (
    result,
    strlist ("simRep1_attr1", "simRep1_attr2", "simRep1_attr3"),
    strlist ("hasImg_attr1", "hasQ_attr3", "hasImg_attr3"));

  result = GetRelation (SIMREP2)->Join (
    result,
    strlist ("simRep2_attr1", "simRep2_attr2", "simRep2_attr3"),
    strlist ("hasImg_attr1", "hasQ_attr2", "hasImg_attr4"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("candidate")),
          VarExpr::New ("hasImg_attr1")),
        VarExpr::New ("candidate_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("hasImg_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("hasImg_attr1")),
              VarExpr::New ("hasImg_attr2")),
            VarExpr::New ("hasImg_attr3")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("hasImg_attr1")),
            VarExpr::New ("candidate_attr2")),
          VarExpr::New ("hasImg_attr2")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("PID5",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("hasImg_attr1")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasImg_attr3")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List5",
    FAppend::New (
      VarExpr::New ("PID5"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List5"))));

  result->Assign (Assignor::New ("PID6",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep2")),
              VarExpr::New ("hasImg_attr1")),
            VarExpr::New ("hasQ_attr2")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("simRep2_attr4")))));

  result->Assign (Assignor::New ("List6",
    FAppend::New (
      VarExpr::New ("PID6"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List6"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("hasImg_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r6"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("hasQ_attr4"),
      ValueExpr::New (StrValue::New ("WHAT")))));

  result = result->Project (
    EANSTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "candidate_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eansTempDelete_attr1",
      "eansTempDelete_attr2",
      "eansTempDelete_attr3",
      "eansTempDelete_attr4",
      "eansTempDelete_attr5",
      "eansTempDelete_attr6",
      "eansTempDelete_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r6_1Eca12Ins (Ptr<Tuple> sim)
{
  RAPIDNET_LOG_INFO ("Prov_r6_1Eca12Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (CANDIDATE)->Join (
    sim,
    strlist ("candidate_attr1", "candidate_attr2"),
    strlist ("sim_attr1", "sim_attr2"));

  result = GetRelation (HASQ)->Join (
    result,
    strlist ("hasQ_attr1"),
    strlist ("sim_attr1"));

  result = GetRelation (HASIMG)->Join (
    result,
    strlist ("hasImg_attr1", "hasImg_attr2"),
    strlist ("sim_attr1", "sim_attr3"));

  result = GetRelation (SIMREP1)->Join (
    result,
    strlist ("simRep1_attr1", "simRep1_attr2", "simRep1_attr3"),
    strlist ("sim_attr1", "hasQ_attr3", "hasImg_attr3"));

  result = GetRelation (SIMREP2)->Join (
    result,
    strlist ("simRep2_attr1", "simRep2_attr2", "simRep2_attr3"),
    strlist ("sim_attr1", "hasQ_attr2", "hasImg_attr4"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("candidate")),
          VarExpr::New ("sim_attr1")),
        VarExpr::New ("sim_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("sim_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("sim_attr1")),
              VarExpr::New ("sim_attr3")),
            VarExpr::New ("hasImg_attr3")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("sim_attr1")),
            VarExpr::New ("sim_attr2")),
          VarExpr::New ("sim_attr3")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("PID5",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("sim_attr1")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasImg_attr3")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List5",
    FAppend::New (
      VarExpr::New ("PID5"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List5"))));

  result->Assign (Assignor::New ("PID6",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep2")),
              VarExpr::New ("sim_attr1")),
            VarExpr::New ("hasQ_attr2")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("simRep2_attr4")))));

  result->Assign (Assignor::New ("List6",
    FAppend::New (
      VarExpr::New ("PID6"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List6"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("sim_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r6"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("hasQ_attr4"),
      ValueExpr::New (StrValue::New ("WHAT")))));

  result = result->Project (
    EANSTEMP,
    strlist ("RLOC",
      "Local",
      "sim_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eansTemp_attr1",
      "eansTemp_attr2",
      "eansTemp_attr3",
      "eansTemp_attr4",
      "eansTemp_attr5",
      "eansTemp_attr6",
      "eansTemp_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r6_1Eca12Del (Ptr<Tuple> sim)
{
  RAPIDNET_LOG_INFO ("Prov_r6_1Eca12Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (CANDIDATE)->Join (
    sim,
    strlist ("candidate_attr1", "candidate_attr2"),
    strlist ("sim_attr1", "sim_attr2"));

  result = GetRelation (HASQ)->Join (
    result,
    strlist ("hasQ_attr1"),
    strlist ("sim_attr1"));

  result = GetRelation (HASIMG)->Join (
    result,
    strlist ("hasImg_attr1", "hasImg_attr2"),
    strlist ("sim_attr1", "sim_attr3"));

  result = GetRelation (SIMREP1)->Join (
    result,
    strlist ("simRep1_attr1", "simRep1_attr2", "simRep1_attr3"),
    strlist ("sim_attr1", "hasQ_attr3", "hasImg_attr3"));

  result = GetRelation (SIMREP2)->Join (
    result,
    strlist ("simRep2_attr1", "simRep2_attr2", "simRep2_attr3"),
    strlist ("sim_attr1", "hasQ_attr2", "hasImg_attr4"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("candidate")),
          VarExpr::New ("sim_attr1")),
        VarExpr::New ("sim_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("sim_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("sim_attr1")),
              VarExpr::New ("sim_attr3")),
            VarExpr::New ("hasImg_attr3")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("sim_attr1")),
            VarExpr::New ("sim_attr2")),
          VarExpr::New ("sim_attr3")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("PID5",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("sim_attr1")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasImg_attr3")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List5",
    FAppend::New (
      VarExpr::New ("PID5"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List5"))));

  result->Assign (Assignor::New ("PID6",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep2")),
              VarExpr::New ("sim_attr1")),
            VarExpr::New ("hasQ_attr2")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("simRep2_attr4")))));

  result->Assign (Assignor::New ("List6",
    FAppend::New (
      VarExpr::New ("PID6"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List6"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("sim_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r6"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("hasQ_attr4"),
      ValueExpr::New (StrValue::New ("WHAT")))));

  result = result->Project (
    EANSTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "sim_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eansTempDelete_attr1",
      "eansTempDelete_attr2",
      "eansTempDelete_attr3",
      "eansTempDelete_attr4",
      "eansTempDelete_attr5",
      "eansTempDelete_attr6",
      "eansTempDelete_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r6_1Eca16Ins (Ptr<Tuple> simRep1)
{
  RAPIDNET_LOG_INFO ("Prov_r6_1Eca16Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (CANDIDATE)->Join (
    simRep1,
    strlist ("candidate_attr1"),
    strlist ("simRep1_attr1"));

  result = GetRelation (HASQ)->Join (
    result,
    strlist ("hasQ_attr1", "hasQ_attr3"),
    strlist ("simRep1_attr1", "simRep1_attr2"));

  result = GetRelation (HASIMG)->Join (
    result,
    strlist ("hasImg_attr1", "hasImg_attr3"),
    strlist ("simRep1_attr1", "simRep1_attr3"));

  result = GetRelation (SIM)->Join (
    result,
    strlist ("sim_attr1", "sim_attr2", "sim_attr3"),
    strlist ("simRep1_attr1", "candidate_attr2", "hasImg_attr2"));

  result = GetRelation (SIMREP2)->Join (
    result,
    strlist ("simRep2_attr1", "simRep2_attr2", "simRep2_attr3"),
    strlist ("simRep1_attr1", "hasQ_attr2", "hasImg_attr4"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("candidate")),
          VarExpr::New ("simRep1_attr1")),
        VarExpr::New ("candidate_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("simRep1_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("simRep1_attr2")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("simRep1_attr1")),
              VarExpr::New ("hasImg_attr2")),
            VarExpr::New ("simRep1_attr3")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("simRep1_attr1")),
            VarExpr::New ("candidate_attr2")),
          VarExpr::New ("hasImg_attr2")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("PID5",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("simRep1_attr1")),
            VarExpr::New ("simRep1_attr2")),
          VarExpr::New ("simRep1_attr3")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List5",
    FAppend::New (
      VarExpr::New ("PID5"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List5"))));

  result->Assign (Assignor::New ("PID6",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep2")),
              VarExpr::New ("simRep1_attr1")),
            VarExpr::New ("hasQ_attr2")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("simRep2_attr4")))));

  result->Assign (Assignor::New ("List6",
    FAppend::New (
      VarExpr::New ("PID6"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List6"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("simRep1_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r6"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("hasQ_attr4"),
      ValueExpr::New (StrValue::New ("WHAT")))));

  result = result->Project (
    EANSTEMP,
    strlist ("RLOC",
      "Local",
      "candidate_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eansTemp_attr1",
      "eansTemp_attr2",
      "eansTemp_attr3",
      "eansTemp_attr4",
      "eansTemp_attr5",
      "eansTemp_attr6",
      "eansTemp_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r6_1Eca16Del (Ptr<Tuple> simRep1)
{
  RAPIDNET_LOG_INFO ("Prov_r6_1Eca16Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (CANDIDATE)->Join (
    simRep1,
    strlist ("candidate_attr1"),
    strlist ("simRep1_attr1"));

  result = GetRelation (HASQ)->Join (
    result,
    strlist ("hasQ_attr1", "hasQ_attr3"),
    strlist ("simRep1_attr1", "simRep1_attr2"));

  result = GetRelation (HASIMG)->Join (
    result,
    strlist ("hasImg_attr1", "hasImg_attr3"),
    strlist ("simRep1_attr1", "simRep1_attr3"));

  result = GetRelation (SIM)->Join (
    result,
    strlist ("sim_attr1", "sim_attr2", "sim_attr3"),
    strlist ("simRep1_attr1", "candidate_attr2", "hasImg_attr2"));

  result = GetRelation (SIMREP2)->Join (
    result,
    strlist ("simRep2_attr1", "simRep2_attr2", "simRep2_attr3"),
    strlist ("simRep1_attr1", "hasQ_attr2", "hasImg_attr4"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("candidate")),
          VarExpr::New ("simRep1_attr1")),
        VarExpr::New ("candidate_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("simRep1_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("simRep1_attr2")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("simRep1_attr1")),
              VarExpr::New ("hasImg_attr2")),
            VarExpr::New ("simRep1_attr3")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("simRep1_attr1")),
            VarExpr::New ("candidate_attr2")),
          VarExpr::New ("hasImg_attr2")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("PID5",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("simRep1_attr1")),
            VarExpr::New ("simRep1_attr2")),
          VarExpr::New ("simRep1_attr3")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List5",
    FAppend::New (
      VarExpr::New ("PID5"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List5"))));

  result->Assign (Assignor::New ("PID6",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep2")),
              VarExpr::New ("simRep1_attr1")),
            VarExpr::New ("hasQ_attr2")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("simRep2_attr4")))));

  result->Assign (Assignor::New ("List6",
    FAppend::New (
      VarExpr::New ("PID6"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List6"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("simRep1_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r6"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("hasQ_attr4"),
      ValueExpr::New (StrValue::New ("WHAT")))));

  result = result->Project (
    EANSTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "candidate_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eansTempDelete_attr1",
      "eansTempDelete_attr2",
      "eansTempDelete_attr3",
      "eansTempDelete_attr4",
      "eansTempDelete_attr5",
      "eansTempDelete_attr6",
      "eansTempDelete_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r6_1Eca20Ins (Ptr<Tuple> simRep2)
{
  RAPIDNET_LOG_INFO ("Prov_r6_1Eca20Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (CANDIDATE)->Join (
    simRep2,
    strlist ("candidate_attr1"),
    strlist ("simRep2_attr1"));

  result = GetRelation (HASQ)->Join (
    result,
    strlist ("hasQ_attr1", "hasQ_attr2"),
    strlist ("simRep2_attr1", "simRep2_attr2"));

  result = GetRelation (HASIMG)->Join (
    result,
    strlist ("hasImg_attr1", "hasImg_attr4"),
    strlist ("simRep2_attr1", "simRep2_attr3"));

  result = GetRelation (SIM)->Join (
    result,
    strlist ("sim_attr1", "sim_attr2", "sim_attr3"),
    strlist ("simRep2_attr1", "candidate_attr2", "hasImg_attr2"));

  result = GetRelation (SIMREP1)->Join (
    result,
    strlist ("simRep1_attr1", "simRep1_attr2", "simRep1_attr3"),
    strlist ("simRep2_attr1", "hasQ_attr3", "hasImg_attr3"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("candidate")),
          VarExpr::New ("simRep2_attr1")),
        VarExpr::New ("candidate_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("simRep2_attr1")),
              VarExpr::New ("simRep2_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("simRep2_attr1")),
              VarExpr::New ("hasImg_attr2")),
            VarExpr::New ("hasImg_attr3")),
          VarExpr::New ("simRep2_attr3")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("simRep2_attr1")),
            VarExpr::New ("candidate_attr2")),
          VarExpr::New ("hasImg_attr2")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("PID5",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("simRep2_attr1")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasImg_attr3")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List5",
    FAppend::New (
      VarExpr::New ("PID5"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List5"))));

  result->Assign (Assignor::New ("PID6",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep2")),
              VarExpr::New ("simRep2_attr1")),
            VarExpr::New ("simRep2_attr2")),
          VarExpr::New ("simRep2_attr3")),
        VarExpr::New ("simRep2_attr4")))));

  result->Assign (Assignor::New ("List6",
    FAppend::New (
      VarExpr::New ("PID6"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List6"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("simRep2_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r6"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("hasQ_attr4"),
      ValueExpr::New (StrValue::New ("WHAT")))));

  result = result->Project (
    EANSTEMP,
    strlist ("RLOC",
      "Local",
      "candidate_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eansTemp_attr1",
      "eansTemp_attr2",
      "eansTemp_attr3",
      "eansTemp_attr4",
      "eansTemp_attr5",
      "eansTemp_attr6",
      "eansTemp_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r6_1Eca20Del (Ptr<Tuple> simRep2)
{
  RAPIDNET_LOG_INFO ("Prov_r6_1Eca20Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (CANDIDATE)->Join (
    simRep2,
    strlist ("candidate_attr1"),
    strlist ("simRep2_attr1"));

  result = GetRelation (HASQ)->Join (
    result,
    strlist ("hasQ_attr1", "hasQ_attr2"),
    strlist ("simRep2_attr1", "simRep2_attr2"));

  result = GetRelation (HASIMG)->Join (
    result,
    strlist ("hasImg_attr1", "hasImg_attr4"),
    strlist ("simRep2_attr1", "simRep2_attr3"));

  result = GetRelation (SIM)->Join (
    result,
    strlist ("sim_attr1", "sim_attr2", "sim_attr3"),
    strlist ("simRep2_attr1", "candidate_attr2", "hasImg_attr2"));

  result = GetRelation (SIMREP1)->Join (
    result,
    strlist ("simRep1_attr1", "simRep1_attr2", "simRep1_attr3"),
    strlist ("simRep2_attr1", "hasQ_attr3", "hasImg_attr3"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("candidate")),
          VarExpr::New ("simRep2_attr1")),
        VarExpr::New ("candidate_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("simRep2_attr1")),
              VarExpr::New ("simRep2_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("PID3",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("simRep2_attr1")),
              VarExpr::New ("hasImg_attr2")),
            VarExpr::New ("hasImg_attr3")),
          VarExpr::New ("simRep2_attr3")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List3",
    FAppend::New (
      VarExpr::New ("PID3"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List3"))));

  result->Assign (Assignor::New ("PID4",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("simRep2_attr1")),
            VarExpr::New ("candidate_attr2")),
          VarExpr::New ("hasImg_attr2")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List4",
    FAppend::New (
      VarExpr::New ("PID4"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List4"))));

  result->Assign (Assignor::New ("PID5",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("simRep2_attr1")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasImg_attr3")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List5",
    FAppend::New (
      VarExpr::New ("PID5"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List5"))));

  result->Assign (Assignor::New ("PID6",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep2")),
              VarExpr::New ("simRep2_attr1")),
            VarExpr::New ("simRep2_attr2")),
          VarExpr::New ("simRep2_attr3")),
        VarExpr::New ("simRep2_attr4")))));

  result->Assign (Assignor::New ("List6",
    FAppend::New (
      VarExpr::New ("PID6"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List6"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("simRep2_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r6"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("hasQ_attr4"),
      ValueExpr::New (StrValue::New ("WHAT")))));

  result = result->Project (
    EANSTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "candidate_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eansTempDelete_attr1",
      "eansTempDelete_attr2",
      "eansTempDelete_attr3",
      "eansTempDelete_attr4",
      "eansTempDelete_attr5",
      "eansTempDelete_attr6",
      "eansTempDelete_attr7",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r7_1Eca0Ins (Ptr<Tuple> word)
{
  RAPIDNET_LOG_INFO ("Prov_r7_1Eca0Ins triggered");

  Ptr<Tuple> result = word;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("word")),
            VarExpr::New ("word_attr1")),
          VarExpr::New ("word_attr2")),
        VarExpr::New ("word_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("word")),
            VarExpr::New ("word_attr1")),
          VarExpr::New ("word_attr2")),
        VarExpr::New ("word_attr3")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("word"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        VarExpr::New ("Name"),
        VarExpr::New ("word_attr2")),
      VarExpr::New ("word_attr3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("word_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r7"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESHARESULTTEMP,
    strlist ("RLOC",
      "Local",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTemp_attr1",
      "eshaResultTemp_attr2",
      "eshaResultTemp_attr3",
      "eshaResultTemp_attr4",
      "eshaResultTemp_attr5",
      "eshaResultTemp_attr6",
      "eshaResultTemp_attr7",
      "eshaResultTemp_attr8",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r7_1Eca0Del (Ptr<Tuple> word)
{
  RAPIDNET_LOG_INFO ("Prov_r7_1Eca0Del triggered");

  Ptr<Tuple> result = word;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("word")),
            VarExpr::New ("word_attr1")),
          VarExpr::New ("word_attr2")),
        VarExpr::New ("word_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("word")),
            VarExpr::New ("word_attr1")),
          VarExpr::New ("word_attr2")),
        VarExpr::New ("word_attr3")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("word"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        VarExpr::New ("Name"),
        VarExpr::New ("word_attr2")),
      VarExpr::New ("word_attr3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("word_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r7"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESHARESULTTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTempDelete_attr1",
      "eshaResultTempDelete_attr2",
      "eshaResultTempDelete_attr3",
      "eshaResultTempDelete_attr4",
      "eshaResultTempDelete_attr5",
      "eshaResultTempDelete_attr6",
      "eshaResultTempDelete_attr7",
      "eshaResultTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r7_2_ecaAdd (Ptr<Tuple> eshaResultTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r7_2_ecaAdd triggered");

  Ptr<Tuple> result = eshaResultTemp;

  result = result->Project (
    RULEEXEC,
    strlist ("eshaResultTemp_attr1",
      "eshaResultTemp_attr5",
      "eshaResultTemp_attr6",
      "eshaResultTemp_attr7",
      "eshaResultTemp_attr8"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Insert (result);
}

void
Vqap::Prov_r7_2_ecaDel (Ptr<Tuple> eshaResultTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r7_2_ecaDel triggered");

  Ptr<Tuple> result = eshaResultTempDelete;

  result = result->Project (
    RULEEXEC,
    strlist ("eshaResultTempDelete_attr1",
      "eshaResultTempDelete_attr5",
      "eshaResultTempDelete_attr6",
      "eshaResultTempDelete_attr7",
      "eshaResultTempDelete_attr8"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Delete (result);
}

void
Vqap::Prov_r7_3_ecaAdd (Ptr<Tuple> eshaResultTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r7_3_ecaAdd triggered");

  Ptr<Tuple> result = eshaResultTemp;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESHARESULT,
    strlist ("Local",
      "eshaResultTemp_attr3",
      "eshaResultTemp_attr4",
      "eshaResultTemp_attr5",
      "eshaResultTemp_attr6",
      "eshaResultTemp_attr1",
      "Local"),
    strlist ("eshaResult_attr1",
      "eshaResult_attr2",
      "eshaResult_attr3",
      "eshaResult_attr4",
      "eshaResult_attr5",
      "eshaResult_attr6",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r7_3_ecaDel (Ptr<Tuple> eshaResultTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r7_3_ecaDel triggered");

  Ptr<Tuple> result = eshaResultTempDelete;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESHARESULTDELETE,
    strlist ("Local",
      "eshaResultTempDelete_attr3",
      "eshaResultTempDelete_attr4",
      "eshaResultTempDelete_attr5",
      "eshaResultTempDelete_attr6",
      "eshaResultTempDelete_attr1",
      "Local"),
    strlist ("eshaResultDelete_attr1",
      "eshaResultDelete_attr2",
      "eshaResultDelete_attr3",
      "eshaResultDelete_attr4",
      "eshaResultDelete_attr5",
      "eshaResultDelete_attr6",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r7_4_ecaAdd (Ptr<Tuple> eshaResult)
{
  RAPIDNET_LOG_INFO ("Prov_r7_4_ecaAdd triggered");

  Ptr<Tuple> result = eshaResult;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    SHARESULT,
    strlist ("Local",
      "eshaResult_attr2",
      "eshaResult_attr3"),
    strlist ("shaResult_attr1",
      "shaResult_attr2",
      "shaResult_attr3"));

  Insert (result);
}

void
Vqap::Prov_r7_4_ecaDel (Ptr<Tuple> eshaResultDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r7_4_ecaDel triggered");

  Ptr<Tuple> result = eshaResultDelete;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    SHARESULT,
    strlist ("Local",
      "eshaResultDelete_attr2",
      "eshaResultDelete_attr3"),
    strlist ("shaResult_attr1",
      "shaResult_attr2",
      "shaResult_attr3"));

  Delete (result);
}

void
Vqap::Prov_r7_5_ecaAdd (Ptr<Tuple> eshaResult)
{
  RAPIDNET_LOG_INFO ("Prov_r7_5_ecaAdd triggered");

  Ptr<Tuple> result = eshaResult;

  result->Assign (Assignor::New ("eshaResult_attr2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("shaResult")),
            VarExpr::New ("eshaResult_attr1")),
          VarExpr::New ("eshaResult_attr2")),
        VarExpr::New ("eshaResult_attr3")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "eshaResult_attr2",
      "eshaResult_attr4",
      "eshaResult_attr6",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Insert (result);
}

void
Vqap::Prov_r7_5_ecaDel (Ptr<Tuple> eshaResultDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r7_5_ecaDel triggered");

  Ptr<Tuple> result = eshaResultDelete;

  result->Assign (Assignor::New ("eshaResultDelete_attr2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("shaResult")),
            VarExpr::New ("eshaResultDelete_attr1")),
          VarExpr::New ("eshaResultDelete_attr2")),
        VarExpr::New ("eshaResultDelete_attr3")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "eshaResultDelete_attr2",
      "eshaResultDelete_attr4",
      "eshaResultDelete_attr6",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Delete (result);
}

void
Vqap::Prov_r8_1Eca0Ins (Ptr<Tuple> hasImg)
{
  RAPIDNET_LOG_INFO ("Prov_r8_1Eca0Ins triggered");

  Ptr<Tuple> result = hasImg;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("hasImg_attr1")),
              VarExpr::New ("hasImg_attr2")),
            VarExpr::New ("hasImg_attr3")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("hasImg_attr1")),
              VarExpr::New ("hasImg_attr2")),
            VarExpr::New ("hasImg_attr3")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("hasImg"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            VarExpr::New ("Name"),
            VarExpr::New ("hasImg_attr2")),
          VarExpr::New ("hasImg_attr3")),
        VarExpr::New ("hasImg_attr4")),
      VarExpr::New ("hasImg_attr5"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("hasImg_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r8"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESHARESULTTEMP,
    strlist ("RLOC",
      "Local",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTemp_attr1",
      "eshaResultTemp_attr2",
      "eshaResultTemp_attr3",
      "eshaResultTemp_attr4",
      "eshaResultTemp_attr5",
      "eshaResultTemp_attr6",
      "eshaResultTemp_attr7",
      "eshaResultTemp_attr8",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r8_1Eca0Del (Ptr<Tuple> hasImg)
{
  RAPIDNET_LOG_INFO ("Prov_r8_1Eca0Del triggered");

  Ptr<Tuple> result = hasImg;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("hasImg_attr1")),
              VarExpr::New ("hasImg_attr2")),
            VarExpr::New ("hasImg_attr3")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("hasImg_attr1")),
              VarExpr::New ("hasImg_attr2")),
            VarExpr::New ("hasImg_attr3")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("hasImg"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            VarExpr::New ("Name"),
            VarExpr::New ("hasImg_attr2")),
          VarExpr::New ("hasImg_attr3")),
        VarExpr::New ("hasImg_attr4")),
      VarExpr::New ("hasImg_attr5"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("hasImg_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r8"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESHARESULTTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTempDelete_attr1",
      "eshaResultTempDelete_attr2",
      "eshaResultTempDelete_attr3",
      "eshaResultTempDelete_attr4",
      "eshaResultTempDelete_attr5",
      "eshaResultTempDelete_attr6",
      "eshaResultTempDelete_attr7",
      "eshaResultTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r9_1Eca0Ins (Ptr<Tuple> hasQ)
{
  RAPIDNET_LOG_INFO ("Prov_r9_1Eca0Ins triggered");

  Ptr<Tuple> result = hasQ;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("hasQ_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("hasQ_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("hasQ"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            VarExpr::New ("Name"),
            VarExpr::New ("hasQ_attr2")),
          VarExpr::New ("hasQ_attr3")),
        VarExpr::New ("hasQ_attr4")),
      VarExpr::New ("hasQ_attr5"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("hasQ_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r9"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESHARESULTTEMP,
    strlist ("RLOC",
      "Local",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTemp_attr1",
      "eshaResultTemp_attr2",
      "eshaResultTemp_attr3",
      "eshaResultTemp_attr4",
      "eshaResultTemp_attr5",
      "eshaResultTemp_attr6",
      "eshaResultTemp_attr7",
      "eshaResultTemp_attr8",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r9_1Eca0Del (Ptr<Tuple> hasQ)
{
  RAPIDNET_LOG_INFO ("Prov_r9_1Eca0Del triggered");

  Ptr<Tuple> result = hasQ;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("hasQ_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("hasQ_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("hasQ"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            VarExpr::New ("Name"),
            VarExpr::New ("hasQ_attr2")),
          VarExpr::New ("hasQ_attr3")),
        VarExpr::New ("hasQ_attr4")),
      VarExpr::New ("hasQ_attr5"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("hasQ_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r9"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESHARESULTTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTempDelete_attr1",
      "eshaResultTempDelete_attr2",
      "eshaResultTempDelete_attr3",
      "eshaResultTempDelete_attr4",
      "eshaResultTempDelete_attr5",
      "eshaResultTempDelete_attr6",
      "eshaResultTempDelete_attr7",
      "eshaResultTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r10_1Eca0Ins (Ptr<Tuple> sim)
{
  RAPIDNET_LOG_INFO ("Prov_r10_1Eca0Ins triggered");

  Ptr<Tuple> result = sim;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("sim_attr1")),
            VarExpr::New ("sim_attr2")),
          VarExpr::New ("sim_attr3")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("sim_attr1")),
            VarExpr::New ("sim_attr2")),
          VarExpr::New ("sim_attr3")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("sim"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("Name"),
          VarExpr::New ("sim_attr2")),
        VarExpr::New ("sim_attr3")),
      VarExpr::New ("sim_attr4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("sim_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r10"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESHARESULTTEMP,
    strlist ("RLOC",
      "Local",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTemp_attr1",
      "eshaResultTemp_attr2",
      "eshaResultTemp_attr3",
      "eshaResultTemp_attr4",
      "eshaResultTemp_attr5",
      "eshaResultTemp_attr6",
      "eshaResultTemp_attr7",
      "eshaResultTemp_attr8",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r10_1Eca0Del (Ptr<Tuple> sim)
{
  RAPIDNET_LOG_INFO ("Prov_r10_1Eca0Del triggered");

  Ptr<Tuple> result = sim;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("sim_attr1")),
            VarExpr::New ("sim_attr2")),
          VarExpr::New ("sim_attr3")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("sim_attr1")),
            VarExpr::New ("sim_attr2")),
          VarExpr::New ("sim_attr3")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("sim"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("Name"),
          VarExpr::New ("sim_attr2")),
        VarExpr::New ("sim_attr3")),
      VarExpr::New ("sim_attr4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("sim_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r10"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESHARESULTTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTempDelete_attr1",
      "eshaResultTempDelete_attr2",
      "eshaResultTempDelete_attr3",
      "eshaResultTempDelete_attr4",
      "eshaResultTempDelete_attr5",
      "eshaResultTempDelete_attr6",
      "eshaResultTempDelete_attr7",
      "eshaResultTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r11_1Eca0Ins (Ptr<Tuple> simRep1)
{
  RAPIDNET_LOG_INFO ("Prov_r11_1Eca0Ins triggered");

  Ptr<Tuple> result = simRep1;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("simRep1_attr1")),
            VarExpr::New ("simRep1_attr2")),
          VarExpr::New ("simRep1_attr3")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("simRep1_attr1")),
            VarExpr::New ("simRep1_attr2")),
          VarExpr::New ("simRep1_attr3")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("simRep1"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("Name"),
          VarExpr::New ("simRep1_attr2")),
        VarExpr::New ("simRep1_attr3")),
      VarExpr::New ("simRep1_attr4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("simRep1_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r11"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESHARESULTTEMP,
    strlist ("RLOC",
      "Local",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTemp_attr1",
      "eshaResultTemp_attr2",
      "eshaResultTemp_attr3",
      "eshaResultTemp_attr4",
      "eshaResultTemp_attr5",
      "eshaResultTemp_attr6",
      "eshaResultTemp_attr7",
      "eshaResultTemp_attr8",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r11_1Eca0Del (Ptr<Tuple> simRep1)
{
  RAPIDNET_LOG_INFO ("Prov_r11_1Eca0Del triggered");

  Ptr<Tuple> result = simRep1;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("simRep1_attr1")),
            VarExpr::New ("simRep1_attr2")),
          VarExpr::New ("simRep1_attr3")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep1")),
              VarExpr::New ("simRep1_attr1")),
            VarExpr::New ("simRep1_attr2")),
          VarExpr::New ("simRep1_attr3")),
        VarExpr::New ("simRep1_attr4")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("simRep1"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("Name"),
          VarExpr::New ("simRep1_attr2")),
        VarExpr::New ("simRep1_attr3")),
      VarExpr::New ("simRep1_attr4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("simRep1_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r11"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESHARESULTTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTempDelete_attr1",
      "eshaResultTempDelete_attr2",
      "eshaResultTempDelete_attr3",
      "eshaResultTempDelete_attr4",
      "eshaResultTempDelete_attr5",
      "eshaResultTempDelete_attr6",
      "eshaResultTempDelete_attr7",
      "eshaResultTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r12_1Eca0Ins (Ptr<Tuple> simRep2)
{
  RAPIDNET_LOG_INFO ("Prov_r12_1Eca0Ins triggered");

  Ptr<Tuple> result = simRep2;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep2")),
              VarExpr::New ("simRep2_attr1")),
            VarExpr::New ("simRep2_attr2")),
          VarExpr::New ("simRep2_attr3")),
        VarExpr::New ("simRep2_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep2")),
              VarExpr::New ("simRep2_attr1")),
            VarExpr::New ("simRep2_attr2")),
          VarExpr::New ("simRep2_attr3")),
        VarExpr::New ("simRep2_attr4")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("simRep2"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("Name"),
          VarExpr::New ("simRep2_attr2")),
        VarExpr::New ("simRep2_attr3")),
      VarExpr::New ("simRep2_attr4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("simRep2_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r12"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESHARESULTTEMP,
    strlist ("RLOC",
      "Local",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTemp_attr1",
      "eshaResultTemp_attr2",
      "eshaResultTemp_attr3",
      "eshaResultTemp_attr4",
      "eshaResultTemp_attr5",
      "eshaResultTemp_attr6",
      "eshaResultTemp_attr7",
      "eshaResultTemp_attr8",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_r12_1Eca0Del (Ptr<Tuple> simRep2)
{
  RAPIDNET_LOG_INFO ("Prov_r12_1Eca0Del triggered");

  Ptr<Tuple> result = simRep2;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep2")),
              VarExpr::New ("simRep2_attr1")),
            VarExpr::New ("simRep2_attr2")),
          VarExpr::New ("simRep2_attr3")),
        VarExpr::New ("simRep2_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("simRep2")),
              VarExpr::New ("simRep2_attr1")),
            VarExpr::New ("simRep2_attr2")),
          VarExpr::New ("simRep2_attr3")),
        VarExpr::New ("simRep2_attr4")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("simRep2"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("Name"),
          VarExpr::New ("simRep2_attr2")),
        VarExpr::New ("simRep2_attr3")),
      VarExpr::New ("simRep2_attr4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("simRep2_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r12"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESHARESULTTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTempDelete_attr1",
      "eshaResultTempDelete_attr2",
      "eshaResultTempDelete_attr3",
      "eshaResultTempDelete_attr4",
      "eshaResultTempDelete_attr5",
      "eshaResultTempDelete_attr6",
      "eshaResultTempDelete_attr7",
      "eshaResultTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
Vqap::Prov_edb_1Eca1Ins (Ptr<Tuple> hasImg)
{
  RAPIDNET_LOG_INFO ("Prov_edb_1Eca1Ins triggered");

  Ptr<Tuple> result = hasImg;

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("hasImg_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("hasImg_attr1")),
              VarExpr::New ("hasImg_attr2")),
            VarExpr::New ("hasImg_attr3")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result->Assign (Assignor::New ("Score",
    VarExpr::New ("hasImg_attr5")));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "RID",
      "RLoc",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Insert (result);
}

void
Vqap::Prov_edb_1Eca1Del (Ptr<Tuple> hasImg)
{
  RAPIDNET_LOG_INFO ("Prov_edb_1Eca1Del triggered");

  Ptr<Tuple> result = hasImg;

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("hasImg_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasImg")),
                VarExpr::New ("hasImg_attr1")),
              VarExpr::New ("hasImg_attr2")),
            VarExpr::New ("hasImg_attr3")),
          VarExpr::New ("hasImg_attr4")),
        VarExpr::New ("hasImg_attr5")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result->Assign (Assignor::New ("Score",
    VarExpr::New ("hasImg_attr5")));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "RID",
      "RLoc",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Delete (result);
}

void
Vqap::Prov_edb_2Eca1Ins (Ptr<Tuple> hasQ)
{
  RAPIDNET_LOG_INFO ("Prov_edb_2Eca1Ins triggered");

  Ptr<Tuple> result = hasQ;

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("hasQ_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("hasQ_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result->Assign (Assignor::New ("Score",
    VarExpr::New ("hasQ_attr5")));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "RID",
      "RLoc",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Insert (result);
}

void
Vqap::Prov_edb_2Eca1Del (Ptr<Tuple> hasQ)
{
  RAPIDNET_LOG_INFO ("Prov_edb_2Eca1Del triggered");

  Ptr<Tuple> result = hasQ;

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("hasQ_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("hasQ")),
                VarExpr::New ("hasQ_attr1")),
              VarExpr::New ("hasQ_attr2")),
            VarExpr::New ("hasQ_attr3")),
          VarExpr::New ("hasQ_attr4")),
        VarExpr::New ("hasQ_attr5")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result->Assign (Assignor::New ("Score",
    VarExpr::New ("hasQ_attr5")));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "RID",
      "RLoc",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Delete (result);
}

void
Vqap::Prov_edb_3Eca1Ins (Ptr<Tuple> sim)
{
  RAPIDNET_LOG_INFO ("Prov_edb_3Eca1Ins triggered");

  Ptr<Tuple> result = sim;

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("sim_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("sim_attr1")),
            VarExpr::New ("sim_attr2")),
          VarExpr::New ("sim_attr3")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result->Assign (Assignor::New ("Score",
    VarExpr::New ("sim_attr4")));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "RID",
      "RLoc",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Insert (result);
}

void
Vqap::Prov_edb_3Eca1Del (Ptr<Tuple> sim)
{
  RAPIDNET_LOG_INFO ("Prov_edb_3Eca1Del triggered");

  Ptr<Tuple> result = sim;

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("sim_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("sim")),
              VarExpr::New ("sim_attr1")),
            VarExpr::New ("sim_attr2")),
          VarExpr::New ("sim_attr3")),
        VarExpr::New ("sim_attr4")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result->Assign (Assignor::New ("Score",
    VarExpr::New ("sim_attr4")));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "RID",
      "RLoc",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Delete (result);
}

void
Vqap::Prov_edb_4Eca1Ins (Ptr<Tuple> word)
{
  RAPIDNET_LOG_INFO ("Prov_edb_4Eca1Ins triggered");

  Ptr<Tuple> result = word;

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("word_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("word")),
            VarExpr::New ("word_attr1")),
          VarExpr::New ("word_attr2")),
        VarExpr::New ("word_attr3")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result->Assign (Assignor::New ("Score",
    VarExpr::New ("word_attr3")));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "RID",
      "RLoc",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Insert (result);
}

void
Vqap::Prov_edb_4Eca1Del (Ptr<Tuple> word)
{
  RAPIDNET_LOG_INFO ("Prov_edb_4Eca1Del triggered");

  Ptr<Tuple> result = word;

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("word_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("word")),
            VarExpr::New ("word_attr1")),
          VarExpr::New ("word_attr2")),
        VarExpr::New ("word_attr3")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result->Assign (Assignor::New ("Score",
    VarExpr::New ("word_attr3")));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "RID",
      "RLoc",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Delete (result);
}

void
Vqap::Edb1_eca (Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO ("Edb1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROV)->Join (
    provQuery,
    strlist ("prov_attr2", "prov_attr1"),
    strlist ("provQuery_attr3", "provQuery_attr1"));

  result = GetRelation (SHARESULT)->Join (
    result,
    strlist ("shaResult_attr2", "shaResult_attr1"),
    strlist ("provQuery_attr3", "provQuery_attr1"));

  result->Assign (Assignor::New ("Prov",
    VarExpr::New ("shaResult_attr3")));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("prov_attr3"),
      VarExpr::New ("provQuery_attr3"))));

  result = result->Project (
    PRETURN,
    strlist ("provQuery_attr5",
      "provQuery_attr2",
      "provQuery_attr3",
      "Prov",
      "provQuery_attr5"),
    strlist ("pReturn_attr1",
      "pReturn_attr2",
      "pReturn_attr3",
      "pReturn_attr4",
      RN_DEST));

  Send (result);
}

void
Vqap::Idb1a_eca (Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO ("Idb1a_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROV)->Join (
    provQuery,
    strlist ("prov_attr2", "prov_attr1"),
    strlist ("provQuery_attr3", "provQuery_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("prov_attr3"),
      VarExpr::New ("provQuery_attr3"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FMember::New (
        VarExpr::New ("provQuery_attr4"),
        VarExpr::New ("provQuery_attr3")),
      ValueExpr::New (Int32Value::New (0)))));

  result = AggWrapList::New ()->Compute (result, provQuery, "prov_attr3");

  result = result->Project (
    PQLIST,
    strlist ("provQuery_attr1",
      "provQuery_attr2",
      "provQuery_attr4",
      "list"),
    strlist ("pQList_attr1",
      "pQList_attr2",
      "pQList_attr3",
      "pQList_attr4"));

  Insert (result);
}

void
Vqap::Idb1b_eca (Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO ("Idb1b_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (SHARESULT)->Join (
    provQuery,
    strlist ("shaResult_attr2", "shaResult_attr1"),
    strlist ("provQuery_attr3", "provQuery_attr1"));

  result->Assign (Assignor::New ("Prov",
    VarExpr::New ("shaResult_attr3")));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      FMember::New (
        VarExpr::New ("provQuery_attr4"),
        VarExpr::New ("provQuery_attr3")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    PRETURN,
    strlist ("provQuery_attr5",
      "provQuery_attr2",
      "provQuery_attr3",
      "Prov",
      "provQuery_attr5"),
    strlist ("pReturn_attr1",
      "pReturn_attr2",
      "pReturn_attr3",
      "pReturn_attr4",
      RN_DEST));

  Send (result);
}

void
Vqap::Idb2_eca (Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO ("Idb2_eca triggered");

  Ptr<Tuple> result = provQuery;

  result->Assign (Assignor::New ("Buf",
    FEmpty::New (
)));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FMember::New (
        VarExpr::New ("provQuery_attr4"),
        VarExpr::New ("provQuery_attr3")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    PRESULTTMP,
    strlist ("provQuery_attr1",
      "provQuery_attr2",
      "provQuery_attr5",
      "provQuery_attr3",
      "Buf"),
    strlist ("pResultTmp_attr1",
      "pResultTmp_attr2",
      "pResultTmp_attr3",
      "pResultTmp_attr4",
      "pResultTmp_attr5"));

  Insert (result);
}

void
Vqap::Idb3_eca (Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO ("Idb3_eca triggered");

  Ptr<Tuple> result = provQuery;

  result->Assign (Assignor::New ("N",
    ValueExpr::New (Int32Value::New (1))));

  result = result->Project (
    PITERATE,
    strlist ("provQuery_attr1",
      "provQuery_attr2",
      "N",
      "provQuery_attr5"),
    strlist ("pIterate_attr1",
      "pIterate_attr2",
      "pIterate_attr3",
      "pIterate_attr4"));

  SendLocal (result);
}

void
Vqap::Idb4_eca (Ptr<Tuple> pIterate)
{
  RAPIDNET_LOG_INFO ("Idb4_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PQLIST)->Join (
    pIterate,
    strlist ("pQList_attr2", "pQList_attr1"),
    strlist ("pIterate_attr2", "pIterate_attr1"));

  result->Assign (Assignor::New ("N",
    Operation::New (RN_PLUS,
      VarExpr::New ("pIterate_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_LT,
      VarExpr::New ("pIterate_attr3"),
      FSize::New (
        VarExpr::New ("pQList_attr4")))));

  result = result->Project (
    PITERATE,
    strlist ("pIterate_attr1",
      "pIterate_attr2",
      "N",
      "pIterate_attr4"),
    strlist ("pIterate_attr1",
      "pIterate_attr2",
      "pIterate_attr3",
      "pIterate_attr4"));

  SendLocal (result);
}

void
Vqap::Idb5_eca (Ptr<Tuple> pIterate)
{
  RAPIDNET_LOG_INFO ("Idb5_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PQLIST)->Join (
    pIterate,
    strlist ("pQList_attr2", "pQList_attr1"),
    strlist ("pIterate_attr2", "pIterate_attr1"));

  result->Assign (Assignor::New ("RID",
    FItem::New (
      VarExpr::New ("pQList_attr4"),
      VarExpr::New ("pIterate_attr3"))));

  result->Assign (Assignor::New ("NQID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("pIterate_attr2")),
        VarExpr::New ("RID")))));

  result = result->Select (Selector::New (
    Operation::New (RN_LTE,
      VarExpr::New ("pIterate_attr3"),
      FSize::New (
        VarExpr::New ("pQList_attr4")))));

  result = result->Project (
    ERULEQUERY,
    strlist ("pIterate_attr1",
      "NQID",
      "pIterate_attr2",
      "RID",
      "pQList_attr3",
      "pIterate_attr4"),
    strlist ("eRuleQuery_attr1",
      "eRuleQuery_attr2",
      "eRuleQuery_attr3",
      "eRuleQuery_attr4",
      "eRuleQuery_attr5",
      "eRuleQuery_attr6"));

  SendLocal (result);
}

void
Vqap::Idb6a_eca (Ptr<Tuple> eRuleQuery)
{
  RAPIDNET_LOG_INFO ("Idb6a_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROV)->Join (
    eRuleQuery,
    strlist ("prov_attr3", "prov_attr1"),
    strlist ("eRuleQuery_attr4", "eRuleQuery_attr1"));

  result->Assign (Assignor::New ("P2",
    FAppend::New (
      VarExpr::New ("prov_attr2"))));

  result->Assign (Assignor::New ("P",
    FConcat::New (
      VarExpr::New ("eRuleQuery_attr5"),
      VarExpr::New ("P2"))));

  result = result->Project (
    RULEQUERY,
    strlist ("prov_attr4",
      "eRuleQuery_attr2",
      "eRuleQuery_attr4",
      "P",
      "eRuleQuery_attr1",
      "prov_attr4"),
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "ruleQuery_attr3",
      "ruleQuery_attr4",
      "ruleQuery_attr5",
      RN_DEST));

  Send (result);
}

void
Vqap::Idb7_eca (Ptr<Tuple> rReturn)
{
  RAPIDNET_LOG_INFO ("Idb7_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PRESULTTMP)->Join (
    rReturn,
    strlist ("pResultTmp_attr1"),
    strlist ("rReturn_attr1"));

  result->Assign (Assignor::New ("Buf2",
    FAppend::New (
      VarExpr::New ("rReturn_attr4"))));

  result->Assign (Assignor::New ("Buf",
    FConcat::New (
      VarExpr::New ("pResultTmp_attr5"),
      VarExpr::New ("Buf2"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("rReturn_attr2"),
      FSha1::New (
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("")),
            VarExpr::New ("pResultTmp_attr2")),
          VarExpr::New ("rReturn_attr3"))))));

  result = result->Project (
    PRESULTTMP,
    strlist ("rReturn_attr1",
      "pResultTmp_attr2",
      "pResultTmp_attr3",
      "pResultTmp_attr4",
      "Buf"),
    strlist ("pResultTmp_attr1",
      "pResultTmp_attr2",
      "pResultTmp_attr3",
      "pResultTmp_attr4",
      "pResultTmp_attr5"));

  Insert (result);
}

void
Vqap::Idb8Eca0Ins (Ptr<Tuple> pResultTmp)
{
  RAPIDNET_LOG_INFO ("Idb8Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PQLIST)->Join (
    pResultTmp,
    strlist ("pQList_attr2", "pQList_attr1"),
    strlist ("pResultTmp_attr2", "pResultTmp_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("pResultTmp_attr5")),
      FSize::New (
        VarExpr::New ("pQList_attr4")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FSize::New (
        VarExpr::New ("pResultTmp_attr5")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EPRETURN,
    strlist ("pResultTmp_attr1",
      "pResultTmp_attr2"),
    strlist ("ePReturn_attr1",
      "ePReturn_attr2"));

  SendLocal (result);
}

void
Vqap::Idb8Eca1Ins (Ptr<Tuple> pQList)
{
  RAPIDNET_LOG_INFO ("Idb8Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PRESULTTMP)->Join (
    pQList,
    strlist ("pResultTmp_attr2", "pResultTmp_attr1"),
    strlist ("pQList_attr2", "pQList_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("pResultTmp_attr5")),
      FSize::New (
        VarExpr::New ("pQList_attr4")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FSize::New (
        VarExpr::New ("pResultTmp_attr5")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EPRETURN,
    strlist ("pQList_attr1",
      "pQList_attr2"),
    strlist ("ePReturn_attr1",
      "ePReturn_attr2"));

  SendLocal (result);
}

void
Vqap::Idb9_eca (Ptr<Tuple> ePReturn)
{
  RAPIDNET_LOG_INFO ("Idb9_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PRESULTTMP)->Join (
    ePReturn,
    strlist ("pResultTmp_attr2", "pResultTmp_attr1"),
    strlist ("ePReturn_attr2", "ePReturn_attr1"));

  result->Assign (Assignor::New ("Prov",
    FPIdb::New (
      VarExpr::New ("pResultTmp_attr5"),
      VarExpr::New ("ePReturn_attr1"))));

  result = result->Project (
    PRETURN,
    strlist ("pResultTmp_attr3",
      "ePReturn_attr2",
      "pResultTmp_attr4",
      "Prov",
      "pResultTmp_attr3"),
    strlist ("pReturn_attr1",
      "pReturn_attr2",
      "pReturn_attr3",
      "pReturn_attr4",
      RN_DEST));

  Send (result);
}

void
Vqap::Rv1_eca (Ptr<Tuple> ruleQuery)
{
  RAPIDNET_LOG_INFO ("Rv1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RULEEXEC)->Join (
    ruleQuery,
    strlist ("ruleExec_attr2", "ruleExec_attr1"),
    strlist ("ruleQuery_attr3", "ruleQuery_attr1"));

  result = result->Project (
    RQLIST,
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "ruleExec_attr5",
      "ruleQuery_attr4"),
    strlist ("rQList_attr1",
      "rQList_attr2",
      "rQList_attr3",
      "rQList_attr4"));

  Insert (result);
}

void
Vqap::Rv2_eca (Ptr<Tuple> ruleQuery)
{
  RAPIDNET_LOG_INFO ("Rv2_eca triggered");

  Ptr<Tuple> result = ruleQuery;

  result->Assign (Assignor::New ("Buf",
    FEmpty::New (
)));

  result = result->Project (
    RRESULTTMP,
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "ruleQuery_attr5",
      "ruleQuery_attr3",
      "Buf"),
    strlist ("rResultTmp_attr1",
      "rResultTmp_attr2",
      "rResultTmp_attr3",
      "rResultTmp_attr4",
      "rResultTmp_attr5"));

  Insert (result);
}

void
Vqap::Rv3_eca (Ptr<Tuple> ruleQuery)
{
  RAPIDNET_LOG_INFO ("Rv3_eca triggered");

  Ptr<Tuple> result = ruleQuery;

  result->Assign (Assignor::New ("N",
    ValueExpr::New (Int32Value::New (1))));

  result = result->Project (
    RITERATE,
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "N"),
    strlist ("rIterate_attr1",
      "rIterate_attr2",
      "rIterate_attr3"));

  SendLocal (result);
}

void
Vqap::Rv4_eca (Ptr<Tuple> rIterate)
{
  RAPIDNET_LOG_INFO ("Rv4_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RQLIST)->Join (
    rIterate,
    strlist ("rQList_attr2", "rQList_attr1"),
    strlist ("rIterate_attr2", "rIterate_attr1"));

  result->Assign (Assignor::New ("N",
    Operation::New (RN_PLUS,
      VarExpr::New ("rIterate_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_LT,
      VarExpr::New ("rIterate_attr3"),
      FSize::New (
        VarExpr::New ("rQList_attr3")))));

  result = result->Project (
    RITERATE,
    strlist ("rIterate_attr1",
      "rIterate_attr2",
      "N"),
    strlist ("rIterate_attr1",
      "rIterate_attr2",
      "rIterate_attr3"));

  SendLocal (result);
}

void
Vqap::Rv5_eca (Ptr<Tuple> rIterate)
{
  RAPIDNET_LOG_INFO ("Rv5_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RQLIST)->Join (
    rIterate,
    strlist ("rQList_attr2", "rQList_attr1"),
    strlist ("rIterate_attr2", "rIterate_attr1"));

  result->Assign (Assignor::New ("VID",
    FItem::New (
      VarExpr::New ("rQList_attr3"),
      VarExpr::New ("rIterate_attr3"))));

  result->Assign (Assignor::New ("NQID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("rIterate_attr2")),
        VarExpr::New ("VID")))));

  result = result->Project (
    EPROVQUERY,
    strlist ("rIterate_attr1",
      "NQID",
      "VID",
      "rQList_attr4"),
    strlist ("eProvQuery_attr1",
      "eProvQuery_attr2",
      "eProvQuery_attr3",
      "eProvQuery_attr4"));

  SendLocal (result);
}

void
Vqap::Rv6_eca (Ptr<Tuple> eProvQuery)
{
  RAPIDNET_LOG_INFO ("Rv6_eca triggered");

  Ptr<Tuple> result = eProvQuery;

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("eProvQuery_attr1")));

  result = result->Project (
    PROVQUERY,
    strlist ("eProvQuery_attr1",
      "eProvQuery_attr2",
      "eProvQuery_attr3",
      "eProvQuery_attr4",
      "$1"),
    strlist ("provQuery_attr1",
      "provQuery_attr2",
      "provQuery_attr3",
      "provQuery_attr4",
      "provQuery_attr5"));

  SendLocal (result);
}

void
Vqap::Rv7_eca (Ptr<Tuple> pReturn)
{
  RAPIDNET_LOG_INFO ("Rv7_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RRESULTTMP)->Join (
    pReturn,
    strlist ("rResultTmp_attr1"),
    strlist ("pReturn_attr1"));

  result->Assign (Assignor::New ("Buf2",
    FAppend::New (
      VarExpr::New ("pReturn_attr4"))));

  result->Assign (Assignor::New ("Buf",
    FConcat::New (
      VarExpr::New ("rResultTmp_attr5"),
      VarExpr::New ("Buf2"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("pReturn_attr2"),
      FSha1::New (
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("")),
            VarExpr::New ("rResultTmp_attr2")),
          VarExpr::New ("pReturn_attr3"))))));

  result = result->Project (
    RRESULTTMP,
    strlist ("pReturn_attr1",
      "rResultTmp_attr2",
      "rResultTmp_attr3",
      "rResultTmp_attr4",
      "Buf"),
    strlist ("rResultTmp_attr1",
      "rResultTmp_attr2",
      "rResultTmp_attr3",
      "rResultTmp_attr4",
      "rResultTmp_attr5"));

  Insert (result);
}

void
Vqap::Rv8Eca0Ins (Ptr<Tuple> rResultTmp)
{
  RAPIDNET_LOG_INFO ("Rv8Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RQLIST)->Join (
    rResultTmp,
    strlist ("rQList_attr2", "rQList_attr1"),
    strlist ("rResultTmp_attr2", "rResultTmp_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("rResultTmp_attr5")),
      FSize::New (
        VarExpr::New ("rQList_attr3")))));

  result = result->Project (
    ERRETURN,
    strlist ("rResultTmp_attr1",
      "rResultTmp_attr2"),
    strlist ("eRReturn_attr1",
      "eRReturn_attr2"));

  SendLocal (result);
}

void
Vqap::Rv8Eca1Ins (Ptr<Tuple> rQList)
{
  RAPIDNET_LOG_INFO ("Rv8Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RRESULTTMP)->Join (
    rQList,
    strlist ("rResultTmp_attr2", "rResultTmp_attr1"),
    strlist ("rQList_attr2", "rQList_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("rResultTmp_attr5")),
      FSize::New (
        VarExpr::New ("rQList_attr3")))));

  result = result->Project (
    ERRETURN,
    strlist ("rQList_attr1",
      "rQList_attr2"),
    strlist ("eRReturn_attr1",
      "eRReturn_attr2"));

  SendLocal (result);
}

void
Vqap::Rv9_eca (Ptr<Tuple> eRReturn)
{
  RAPIDNET_LOG_INFO ("Rv9_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RRESULTTMP)->Join (
    eRReturn,
    strlist ("rResultTmp_attr2", "rResultTmp_attr1"),
    strlist ("eRReturn_attr2", "eRReturn_attr1"));

  result = GetRelation (RULEEXEC)->Join (
    result,
    strlist ("ruleExec_attr2", "ruleExec_attr1"),
    strlist ("rResultTmp_attr4", "eRReturn_attr1"));

  result->Assign (Assignor::New ("Prov",
    FPRule::New (
      VarExpr::New ("rResultTmp_attr5"),
      VarExpr::New ("eRReturn_attr1"),
      VarExpr::New ("ruleExec_attr4"),
      VarExpr::New ("ruleExec_attr3"))));

  result = result->Project (
    RRETURN,
    strlist ("rResultTmp_attr3",
      "eRReturn_attr2",
      "rResultTmp_attr4",
      "Prov",
      "rResultTmp_attr3"),
    strlist ("rReturn_attr1",
      "rReturn_attr2",
      "rReturn_attr3",
      "rReturn_attr4",
      RN_DEST));

  Send (result);
}

