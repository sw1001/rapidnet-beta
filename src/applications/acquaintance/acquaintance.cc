/* A RapidNet application. Generated by RapidNet compiler. */

#include "acquaintance.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::acquaintance;

const string Acquaintance::EPRETURN = "ePReturn";
const string Acquaintance::EPROVQUERY = "eProvQuery";
const string Acquaintance::ERRETURN = "eRReturn";
const string Acquaintance::ERULEQUERY = "eRuleQuery";
const string Acquaintance::EKNOW = "eknow";
const string Acquaintance::EKNOWDELETE = "eknowDelete";
const string Acquaintance::EKNOWEVENT = "eknowEvent";
const string Acquaintance::EKNOWEVENTDELETE = "eknowEventDelete";
const string Acquaintance::EKNOWEVENTTEMP = "eknowEventTemp";
const string Acquaintance::EKNOWEVENTTEMPDELETE = "eknowEventTempDelete";
const string Acquaintance::EKNOWTEMP = "eknowTemp";
const string Acquaintance::EKNOWTEMPDELETE = "eknowTempDelete";
const string Acquaintance::ELIKE = "elike";
const string Acquaintance::ELIKEDELETE = "elikeDelete";
const string Acquaintance::ELIKETEMP = "elikeTemp";
const string Acquaintance::ELIKETEMPDELETE = "elikeTempDelete";
const string Acquaintance::ELIVE = "elive";
const string Acquaintance::ELIVEDELETE = "eliveDelete";
const string Acquaintance::ELIVETEMP = "eliveTemp";
const string Acquaintance::ELIVETEMPDELETE = "eliveTempDelete";
const string Acquaintance::ESHARESULT = "eshaResult";
const string Acquaintance::ESHARESULTDELETE = "eshaResultDelete";
const string Acquaintance::ESHARESULTTEMP = "eshaResultTemp";
const string Acquaintance::ESHARESULTTEMPDELETE = "eshaResultTempDelete";
const string Acquaintance::KNOW = "know";
const string Acquaintance::KNOWEVENT = "knowEvent";
const string Acquaintance::LIKE = "like";
const string Acquaintance::LIKEEVENT = "likeEvent";
const string Acquaintance::LIVE = "live";
const string Acquaintance::LIVEEVENT = "liveEvent";
const string Acquaintance::PITERATE = "pIterate";
const string Acquaintance::PQLIST = "pQList";
const string Acquaintance::PRESULTTMP = "pResultTmp";
const string Acquaintance::PRETURN = "pReturn";
const string Acquaintance::PROV = "prov";
const string Acquaintance::PROVQUERY = "provQuery";
const string Acquaintance::RITERATE = "rIterate";
const string Acquaintance::RQLIST = "rQList";
const string Acquaintance::RRESULTTMP = "rResultTmp";
const string Acquaintance::RRETURN = "rReturn";
const string Acquaintance::RELATION = "relation";
const string Acquaintance::RULEEXEC = "ruleExec";
const string Acquaintance::RULEQUERY = "ruleQuery";
const string Acquaintance::SHARESULT = "shaResult";
const string Acquaintance::TEMPLIST = "tempList";

NS_LOG_COMPONENT_DEFINE ("Acquaintance");
NS_OBJECT_ENSURE_REGISTERED (Acquaintance);

TypeId
Acquaintance::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::acquaintance::Acquaintance")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<Acquaintance> ()
    ;
  return tid;
}

Acquaintance::Acquaintance()
{
  NS_LOG_FUNCTION_NOARGS ();
}

Acquaintance::~Acquaintance()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
Acquaintance::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
Acquaintance::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("Acquaintance Application Started");
}

void
Acquaintance::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("Acquaintance Application Stopped");
}

void
Acquaintance::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (KNOW, attrdeflist (
    attrdef ("know_attr1", IPV4),
    attrdef ("know_attr2", INT32),
    attrdef ("know_attr3", INT32),
    attrdef ("know_attr4", INT32)));

  AddRelationWithKeys (KNOWEVENT, attrdeflist (
    attrdef ("knowEvent_attr1", IPV4),
    attrdef ("knowEvent_attr2", INT32),
    attrdef ("knowEvent_attr3", INT32),
    attrdef ("knowEvent_attr4", INT32)));

  AddRelationWithKeys (LIKE, attrdeflist (
    attrdef ("like_attr1", IPV4),
    attrdef ("like_attr2", INT32),
    attrdef ("like_attr3", INT32)));

  AddRelationWithKeys (LIKEEVENT, attrdeflist (
    attrdef ("likeEvent_attr1", IPV4),
    attrdef ("likeEvent_attr2", INT32),
    attrdef ("likeEvent_attr3", INT32)));

  AddRelationWithKeys (LIVE, attrdeflist (
    attrdef ("live_attr1", IPV4),
    attrdef ("live_attr2", INT32),
    attrdef ("live_attr3", INT32)));

  AddRelationWithKeys (LIVEEVENT, attrdeflist (
    attrdef ("liveEvent_attr1", IPV4),
    attrdef ("liveEvent_attr2", INT32),
    attrdef ("liveEvent_attr3", INT32)));

  AddRelationWithKeys (PQLIST, attrdeflist (
    attrdef ("pQList_attr1", IPV4),
    attrdef ("pQList_attr2", ID)));

  AddRelationWithKeys (PRESULTTMP, attrdeflist (
    attrdef ("pResultTmp_attr1", IPV4),
    attrdef ("pResultTmp_attr2", ID)));

  AddRelationWithKeys (PROV, attrdeflist (
    attrdef ("prov_attr1", IPV4),
    attrdef ("prov_attr2", ID),
    attrdef ("prov_attr3", ID)));

  AddRelationWithKeys (RQLIST, attrdeflist (
    attrdef ("rQList_attr1", IPV4),
    attrdef ("rQList_attr2", ID)));

  AddRelationWithKeys (RRESULTTMP, attrdeflist (
    attrdef ("rResultTmp_attr1", IPV4),
    attrdef ("rResultTmp_attr2", ID)));

  AddRelationWithKeys (RELATION, attrdeflist (
    attrdef ("relation_attr1", IPV4),
    attrdef ("relation_attr2", INT32),
    attrdef ("relation_attr3", INT32)));

  AddRelationWithKeys (RULEEXEC, attrdeflist (
    attrdef ("ruleExec_attr1", IPV4),
    attrdef ("ruleExec_attr2", ID)));

  AddRelationWithKeys (SHARESULT, attrdeflist (
    attrdef ("shaResult_attr1", IPV4),
    attrdef ("shaResult_attr2", ID),
    attrdef ("shaResult_attr3", STR)));

}

void
Acquaintance::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsInsertEvent (tuple, LIVEEVENT))
    {
      Prov_ra_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, LIVEEVENT))
    {
      Prov_ra_1Eca0Del (tuple);
    }
  if (IsRecvEvent (tuple, ELIVETEMP))
    {
      Prov_ra_2_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ELIVETEMPDELETE))
    {
      Prov_ra_2_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ELIVETEMP))
    {
      Prov_ra_3_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ELIVETEMPDELETE))
    {
      Prov_ra_3_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ELIVE))
    {
      Prov_ra_4_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ELIVEDELETE))
    {
      Prov_ra_4_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ELIVE))
    {
      Prov_ra_5_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ELIVEDELETE))
    {
      Prov_ra_5_ecaDel (tuple);
    }
  if (IsInsertEvent (tuple, LIKEEVENT))
    {
      Prov_rb_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, LIKEEVENT))
    {
      Prov_rb_1Eca0Del (tuple);
    }
  if (IsRecvEvent (tuple, ELIKETEMP))
    {
      Prov_rb_2_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ELIKETEMPDELETE))
    {
      Prov_rb_2_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ELIKETEMP))
    {
      Prov_rb_3_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ELIKETEMPDELETE))
    {
      Prov_rb_3_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ELIKE))
    {
      Prov_rb_4_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ELIKEDELETE))
    {
      Prov_rb_4_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ELIKE))
    {
      Prov_rb_5_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ELIKEDELETE))
    {
      Prov_rb_5_ecaDel (tuple);
    }
  if (IsInsertEvent (tuple, KNOWEVENT))
    {
      Prov_rc_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, KNOWEVENT))
    {
      Prov_rc_1Eca0Del (tuple);
    }
  if (IsRecvEvent (tuple, EKNOWTEMP))
    {
      Prov_rc_2_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EKNOWTEMPDELETE))
    {
      Prov_rc_2_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EKNOWTEMP))
    {
      Prov_rc_3_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EKNOWTEMPDELETE))
    {
      Prov_rc_3_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EKNOW))
    {
      Prov_rc_4_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EKNOWDELETE))
    {
      Prov_rc_4_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EKNOW))
    {
      Prov_rc_5_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EKNOWDELETE))
    {
      Prov_rc_5_ecaDel (tuple);
    }
  if (IsInsertEvent (tuple, RELATION))
    {
      Prov_rd_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, RELATION))
    {
      Prov_rd_1Eca0Del (tuple);
    }
  if (IsRecvEvent (tuple, EKNOWEVENTTEMP))
    {
      Prov_rd_2_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EKNOWEVENTTEMPDELETE))
    {
      Prov_rd_2_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EKNOWEVENTTEMP))
    {
      Prov_rd_3_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EKNOWEVENTTEMPDELETE))
    {
      Prov_rd_3_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EKNOWEVENT))
    {
      Prov_rd_4_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EKNOWEVENTDELETE))
    {
      Prov_rd_4_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EKNOWEVENT))
    {
      Prov_rd_5_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EKNOWEVENTDELETE))
    {
      Prov_rd_5_ecaDel (tuple);
    }
  if (IsInsertEvent (tuple, LIVEEVENT))
    {
      Prov_r1_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, LIVEEVENT))
    {
      Prov_r1_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, LIVE))
    {
      Prov_r1_1Eca3Ins (tuple);
    }
  if (IsDeleteEvent (tuple, LIVE))
    {
      Prov_r1_1Eca3Del (tuple);
    }
  if (IsInsertEvent (tuple, LIKEEVENT))
    {
      Prov_r2_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, LIKEEVENT))
    {
      Prov_r2_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, LIKE))
    {
      Prov_r2_1Eca3Ins (tuple);
    }
  if (IsDeleteEvent (tuple, LIKE))
    {
      Prov_r2_1Eca3Del (tuple);
    }
  if (IsInsertEvent (tuple, LIVEEVENT))
    {
      Prov_r3_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, LIVEEVENT))
    {
      Prov_r3_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, LIVE))
    {
      Prov_r3_1Eca3Ins (tuple);
    }
  if (IsDeleteEvent (tuple, LIVE))
    {
      Prov_r3_1Eca3Del (tuple);
    }
  if (IsInsertEvent (tuple, LIVEEVENT))
    {
      Prov_r6_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, LIVEEVENT))
    {
      Prov_r6_1Eca0Del (tuple);
    }
  if (IsRecvEvent (tuple, ESHARESULTTEMP))
    {
      Prov_r6_2_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ESHARESULTTEMPDELETE))
    {
      Prov_r6_2_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ESHARESULTTEMP))
    {
      Prov_r6_3_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ESHARESULTTEMPDELETE))
    {
      Prov_r6_3_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ESHARESULT))
    {
      Prov_r6_4_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ESHARESULTDELETE))
    {
      Prov_r6_4_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ESHARESULT))
    {
      Prov_r6_5_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ESHARESULTDELETE))
    {
      Prov_r6_5_ecaDel (tuple);
    }
  if (IsInsertEvent (tuple, LIKEEVENT))
    {
      Prov_r7_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, LIKEEVENT))
    {
      Prov_r7_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, KNOWEVENT))
    {
      Prov_r8_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, KNOWEVENT))
    {
      Prov_r8_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, RELATION))
    {
      Prov_r9_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, RELATION))
    {
      Prov_r9_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, LIVE))
    {
      Prov_r10_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, LIVE))
    {
      Prov_r10_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, LIKE))
    {
      Prov_r11_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, LIKE))
    {
      Prov_r11_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, KNOW))
    {
      Prov_r12_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, KNOW))
    {
      Prov_r12_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, KNOWEVENT))
    {
      Prov_r13_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, KNOWEVENT))
    {
      Prov_r13_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, KNOW))
    {
      Prov_r13_1Eca3Ins (tuple);
    }
  if (IsDeleteEvent (tuple, KNOW))
    {
      Prov_r13_1Eca3Del (tuple);
    }
  if (IsInsertEvent (tuple, LIKEEVENT))
    {
      Prov_edb_1Eca1Ins (tuple);
    }
  if (IsDeleteEvent (tuple, LIKEEVENT))
    {
      Prov_edb_1Eca1Del (tuple);
    }
  if (IsInsertEvent (tuple, LIVEEVENT))
    {
      Prov_edb_2Eca1Ins (tuple);
    }
  if (IsDeleteEvent (tuple, LIVEEVENT))
    {
      Prov_edb_2Eca1Del (tuple);
    }
  if (IsInsertEvent (tuple, RELATION))
    {
      Prov_edb_3Eca1Ins (tuple);
    }
  if (IsDeleteEvent (tuple, RELATION))
    {
      Prov_edb_3Eca1Del (tuple);
    }
  if (IsRecvEvent (tuple, PROVQUERY))
    {
      Edb1_eca (tuple);
    }
  if (IsRecvEvent (tuple, TEMPLIST))
    {
      Idb1_eca (tuple);
    }
  if (IsRecvEvent (tuple, TEMPLIST))
    {
      Idb2_eca (tuple);
    }
  if (IsRecvEvent (tuple, TEMPLIST))
    {
      Idb3_eca (tuple);
    }
  if (IsRecvEvent (tuple, PITERATE))
    {
      Idb4_eca (tuple);
    }
  if (IsRecvEvent (tuple, PITERATE))
    {
      Idb5_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERULEQUERY))
    {
      Idb6_eca (tuple);
    }
  if (IsRecvEvent (tuple, RRETURN))
    {
      Idb7_eca (tuple);
    }
  if (IsInsertEvent (tuple, PRESULTTMP))
    {
      Idb8Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, PQLIST))
    {
      Idb8Eca1Ins (tuple);
    }
  if (IsRecvEvent (tuple, EPRETURN))
    {
      Idb9_eca (tuple);
    }
  if (IsRecvEvent (tuple, RULEQUERY))
    {
      Rv1_eca (tuple);
    }
  if (IsRecvEvent (tuple, RULEQUERY))
    {
      Rv2_eca (tuple);
    }
  if (IsRecvEvent (tuple, RULEQUERY))
    {
      Rv3_eca (tuple);
    }
  if (IsRecvEvent (tuple, RITERATE))
    {
      Rv4_eca (tuple);
    }
  if (IsRecvEvent (tuple, RITERATE))
    {
      Rv5_eca (tuple);
    }
  if (IsRecvEvent (tuple, EPROVQUERY))
    {
      Rv6_eca (tuple);
    }
  if (IsRecvEvent (tuple, PRETURN))
    {
      Rv7_eca (tuple);
    }
  if (IsInsertEvent (tuple, RRESULTTMP))
    {
      Rv8Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, RQLIST))
    {
      Rv8Eca1Ins (tuple);
    }
  if (IsRecvEvent (tuple, ERRETURN))
    {
      Rv9_eca (tuple);
    }
}

void
Acquaintance::Prov_ra_1Eca0Ins (Ptr<Tuple> liveEvent)
{
  RAPIDNET_LOG_INFO ("Prov_ra_1Eca0Ins triggered");

  Ptr<Tuple> result = liveEvent;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("liveEvent")),
                VarExpr::New ("liveEvent_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("liveEvent_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("liveEvent_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("liveEvent_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("ra"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ELIVETEMP,
    strlist ("RLOC",
      "Local",
      "liveEvent_attr2",
      "liveEvent_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eliveTemp_attr1",
      "eliveTemp_attr2",
      "eliveTemp_attr3",
      "eliveTemp_attr4",
      "eliveTemp_attr5",
      "eliveTemp_attr6",
      "eliveTemp_attr7",
      "eliveTemp_attr8",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_ra_1Eca0Del (Ptr<Tuple> liveEvent)
{
  RAPIDNET_LOG_INFO ("Prov_ra_1Eca0Del triggered");

  Ptr<Tuple> result = liveEvent;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("liveEvent")),
                VarExpr::New ("liveEvent_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("liveEvent_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("liveEvent_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("liveEvent_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("ra"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ELIVETEMPDELETE,
    strlist ("RLOC",
      "Local",
      "liveEvent_attr2",
      "liveEvent_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eliveTempDelete_attr1",
      "eliveTempDelete_attr2",
      "eliveTempDelete_attr3",
      "eliveTempDelete_attr4",
      "eliveTempDelete_attr5",
      "eliveTempDelete_attr6",
      "eliveTempDelete_attr7",
      "eliveTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_ra_2_ecaAdd (Ptr<Tuple> eliveTemp)
{
  RAPIDNET_LOG_INFO ("Prov_ra_2_ecaAdd triggered");

  Ptr<Tuple> result = eliveTemp;

  result = result->Project (
    RULEEXEC,
    strlist ("eliveTemp_attr1",
      "eliveTemp_attr5",
      "eliveTemp_attr6",
      "eliveTemp_attr7",
      "eliveTemp_attr8"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Insert (result);
}

void
Acquaintance::Prov_ra_2_ecaDel (Ptr<Tuple> eliveTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_ra_2_ecaDel triggered");

  Ptr<Tuple> result = eliveTempDelete;

  result = result->Project (
    RULEEXEC,
    strlist ("eliveTempDelete_attr1",
      "eliveTempDelete_attr5",
      "eliveTempDelete_attr6",
      "eliveTempDelete_attr7",
      "eliveTempDelete_attr8"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Delete (result);
}

void
Acquaintance::Prov_ra_3_ecaAdd (Ptr<Tuple> eliveTemp)
{
  RAPIDNET_LOG_INFO ("Prov_ra_3_ecaAdd triggered");

  Ptr<Tuple> result = eliveTemp;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ELIVE,
    strlist ("Local",
      "eliveTemp_attr3",
      "eliveTemp_attr4",
      "eliveTemp_attr5",
      "eliveTemp_attr6",
      "eliveTemp_attr1",
      "Local"),
    strlist ("elive_attr1",
      "elive_attr2",
      "elive_attr3",
      "elive_attr4",
      "elive_attr5",
      "elive_attr6",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_ra_3_ecaDel (Ptr<Tuple> eliveTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_ra_3_ecaDel triggered");

  Ptr<Tuple> result = eliveTempDelete;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ELIVEDELETE,
    strlist ("Local",
      "eliveTempDelete_attr3",
      "eliveTempDelete_attr4",
      "eliveTempDelete_attr5",
      "eliveTempDelete_attr6",
      "eliveTempDelete_attr1",
      "Local"),
    strlist ("eliveDelete_attr1",
      "eliveDelete_attr2",
      "eliveDelete_attr3",
      "eliveDelete_attr4",
      "eliveDelete_attr5",
      "eliveDelete_attr6",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_ra_4_ecaAdd (Ptr<Tuple> elive)
{
  RAPIDNET_LOG_INFO ("Prov_ra_4_ecaAdd triggered");

  Ptr<Tuple> result = elive;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    LIVE,
    strlist ("Local",
      "elive_attr2",
      "elive_attr3"),
    strlist ("live_attr1",
      "live_attr2",
      "live_attr3"));

  Insert (result);
}

void
Acquaintance::Prov_ra_4_ecaDel (Ptr<Tuple> eliveDelete)
{
  RAPIDNET_LOG_INFO ("Prov_ra_4_ecaDel triggered");

  Ptr<Tuple> result = eliveDelete;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    LIVE,
    strlist ("Local",
      "eliveDelete_attr2",
      "eliveDelete_attr3"),
    strlist ("live_attr1",
      "live_attr2",
      "live_attr3"));

  Delete (result);
}

void
Acquaintance::Prov_ra_5_ecaAdd (Ptr<Tuple> elive)
{
  RAPIDNET_LOG_INFO ("Prov_ra_5_ecaAdd triggered");

  Ptr<Tuple> result = elive;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("live")),
                VarExpr::New ("elive_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("elive_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("elive_attr3")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "elive_attr4",
      "elive_attr6",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Insert (result);
}

void
Acquaintance::Prov_ra_5_ecaDel (Ptr<Tuple> eliveDelete)
{
  RAPIDNET_LOG_INFO ("Prov_ra_5_ecaDel triggered");

  Ptr<Tuple> result = eliveDelete;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("live")),
                VarExpr::New ("eliveDelete_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("eliveDelete_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("eliveDelete_attr3")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "eliveDelete_attr4",
      "eliveDelete_attr6",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Delete (result);
}

void
Acquaintance::Prov_rb_1Eca0Ins (Ptr<Tuple> likeEvent)
{
  RAPIDNET_LOG_INFO ("Prov_rb_1Eca0Ins triggered");

  Ptr<Tuple> result = likeEvent;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("likeEvent")),
                VarExpr::New ("likeEvent_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("likeEvent_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("likeEvent_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("likeEvent_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rb"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ELIKETEMP,
    strlist ("RLOC",
      "Local",
      "likeEvent_attr2",
      "likeEvent_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("elikeTemp_attr1",
      "elikeTemp_attr2",
      "elikeTemp_attr3",
      "elikeTemp_attr4",
      "elikeTemp_attr5",
      "elikeTemp_attr6",
      "elikeTemp_attr7",
      "elikeTemp_attr8",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_rb_1Eca0Del (Ptr<Tuple> likeEvent)
{
  RAPIDNET_LOG_INFO ("Prov_rb_1Eca0Del triggered");

  Ptr<Tuple> result = likeEvent;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("likeEvent")),
                VarExpr::New ("likeEvent_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("likeEvent_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("likeEvent_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("likeEvent_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rb"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ELIKETEMPDELETE,
    strlist ("RLOC",
      "Local",
      "likeEvent_attr2",
      "likeEvent_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("elikeTempDelete_attr1",
      "elikeTempDelete_attr2",
      "elikeTempDelete_attr3",
      "elikeTempDelete_attr4",
      "elikeTempDelete_attr5",
      "elikeTempDelete_attr6",
      "elikeTempDelete_attr7",
      "elikeTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_rb_2_ecaAdd (Ptr<Tuple> elikeTemp)
{
  RAPIDNET_LOG_INFO ("Prov_rb_2_ecaAdd triggered");

  Ptr<Tuple> result = elikeTemp;

  result = result->Project (
    RULEEXEC,
    strlist ("elikeTemp_attr1",
      "elikeTemp_attr5",
      "elikeTemp_attr6",
      "elikeTemp_attr7",
      "elikeTemp_attr8"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Insert (result);
}

void
Acquaintance::Prov_rb_2_ecaDel (Ptr<Tuple> elikeTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_rb_2_ecaDel triggered");

  Ptr<Tuple> result = elikeTempDelete;

  result = result->Project (
    RULEEXEC,
    strlist ("elikeTempDelete_attr1",
      "elikeTempDelete_attr5",
      "elikeTempDelete_attr6",
      "elikeTempDelete_attr7",
      "elikeTempDelete_attr8"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Delete (result);
}

void
Acquaintance::Prov_rb_3_ecaAdd (Ptr<Tuple> elikeTemp)
{
  RAPIDNET_LOG_INFO ("Prov_rb_3_ecaAdd triggered");

  Ptr<Tuple> result = elikeTemp;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ELIKE,
    strlist ("Local",
      "elikeTemp_attr3",
      "elikeTemp_attr4",
      "elikeTemp_attr5",
      "elikeTemp_attr6",
      "elikeTemp_attr1",
      "Local"),
    strlist ("elike_attr1",
      "elike_attr2",
      "elike_attr3",
      "elike_attr4",
      "elike_attr5",
      "elike_attr6",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_rb_3_ecaDel (Ptr<Tuple> elikeTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_rb_3_ecaDel triggered");

  Ptr<Tuple> result = elikeTempDelete;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ELIKEDELETE,
    strlist ("Local",
      "elikeTempDelete_attr3",
      "elikeTempDelete_attr4",
      "elikeTempDelete_attr5",
      "elikeTempDelete_attr6",
      "elikeTempDelete_attr1",
      "Local"),
    strlist ("elikeDelete_attr1",
      "elikeDelete_attr2",
      "elikeDelete_attr3",
      "elikeDelete_attr4",
      "elikeDelete_attr5",
      "elikeDelete_attr6",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_rb_4_ecaAdd (Ptr<Tuple> elike)
{
  RAPIDNET_LOG_INFO ("Prov_rb_4_ecaAdd triggered");

  Ptr<Tuple> result = elike;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    LIKE,
    strlist ("Local",
      "elike_attr2",
      "elike_attr3"),
    strlist ("like_attr1",
      "like_attr2",
      "like_attr3"));

  Insert (result);
}

void
Acquaintance::Prov_rb_4_ecaDel (Ptr<Tuple> elikeDelete)
{
  RAPIDNET_LOG_INFO ("Prov_rb_4_ecaDel triggered");

  Ptr<Tuple> result = elikeDelete;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    LIKE,
    strlist ("Local",
      "elikeDelete_attr2",
      "elikeDelete_attr3"),
    strlist ("like_attr1",
      "like_attr2",
      "like_attr3"));

  Delete (result);
}

void
Acquaintance::Prov_rb_5_ecaAdd (Ptr<Tuple> elike)
{
  RAPIDNET_LOG_INFO ("Prov_rb_5_ecaAdd triggered");

  Ptr<Tuple> result = elike;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("like")),
                VarExpr::New ("elike_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("elike_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("elike_attr3")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "elike_attr4",
      "elike_attr6",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Insert (result);
}

void
Acquaintance::Prov_rb_5_ecaDel (Ptr<Tuple> elikeDelete)
{
  RAPIDNET_LOG_INFO ("Prov_rb_5_ecaDel triggered");

  Ptr<Tuple> result = elikeDelete;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("like")),
                VarExpr::New ("elikeDelete_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("elikeDelete_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("elikeDelete_attr3")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "elikeDelete_attr4",
      "elikeDelete_attr6",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Delete (result);
}

void
Acquaintance::Prov_rc_1Eca0Ins (Ptr<Tuple> knowEvent)
{
  RAPIDNET_LOG_INFO ("Prov_rc_1Eca0Ins triggered");

  Ptr<Tuple> result = knowEvent;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("knowEvent")),
                    VarExpr::New ("knowEvent_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("knowEvent_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("knowEvent_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("knowEvent_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("knowEvent_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rc"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("knowEvent_attr2"),
      VarExpr::New ("knowEvent_attr3"))));

  result = result->Project (
    EKNOWTEMP,
    strlist ("RLOC",
      "Local",
      "knowEvent_attr2",
      "knowEvent_attr3",
      "knowEvent_attr4",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eknowTemp_attr1",
      "eknowTemp_attr2",
      "eknowTemp_attr3",
      "eknowTemp_attr4",
      "eknowTemp_attr5",
      "eknowTemp_attr6",
      "eknowTemp_attr7",
      "eknowTemp_attr8",
      "eknowTemp_attr9",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_rc_1Eca0Del (Ptr<Tuple> knowEvent)
{
  RAPIDNET_LOG_INFO ("Prov_rc_1Eca0Del triggered");

  Ptr<Tuple> result = knowEvent;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("knowEvent")),
                    VarExpr::New ("knowEvent_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("knowEvent_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("knowEvent_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("knowEvent_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("knowEvent_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rc"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("knowEvent_attr2"),
      VarExpr::New ("knowEvent_attr3"))));

  result = result->Project (
    EKNOWTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "knowEvent_attr2",
      "knowEvent_attr3",
      "knowEvent_attr4",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eknowTempDelete_attr1",
      "eknowTempDelete_attr2",
      "eknowTempDelete_attr3",
      "eknowTempDelete_attr4",
      "eknowTempDelete_attr5",
      "eknowTempDelete_attr6",
      "eknowTempDelete_attr7",
      "eknowTempDelete_attr8",
      "eknowTempDelete_attr9",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_rc_2_ecaAdd (Ptr<Tuple> eknowTemp)
{
  RAPIDNET_LOG_INFO ("Prov_rc_2_ecaAdd triggered");

  Ptr<Tuple> result = eknowTemp;

  result = result->Project (
    RULEEXEC,
    strlist ("eknowTemp_attr1",
      "eknowTemp_attr6",
      "eknowTemp_attr7",
      "eknowTemp_attr8",
      "eknowTemp_attr9"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Insert (result);
}

void
Acquaintance::Prov_rc_2_ecaDel (Ptr<Tuple> eknowTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_rc_2_ecaDel triggered");

  Ptr<Tuple> result = eknowTempDelete;

  result = result->Project (
    RULEEXEC,
    strlist ("eknowTempDelete_attr1",
      "eknowTempDelete_attr6",
      "eknowTempDelete_attr7",
      "eknowTempDelete_attr8",
      "eknowTempDelete_attr9"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Delete (result);
}

void
Acquaintance::Prov_rc_3_ecaAdd (Ptr<Tuple> eknowTemp)
{
  RAPIDNET_LOG_INFO ("Prov_rc_3_ecaAdd triggered");

  Ptr<Tuple> result = eknowTemp;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    EKNOW,
    strlist ("Local",
      "eknowTemp_attr3",
      "eknowTemp_attr4",
      "eknowTemp_attr5",
      "eknowTemp_attr6",
      "eknowTemp_attr7",
      "eknowTemp_attr1",
      "Local"),
    strlist ("eknow_attr1",
      "eknow_attr2",
      "eknow_attr3",
      "eknow_attr4",
      "eknow_attr5",
      "eknow_attr6",
      "eknow_attr7",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_rc_3_ecaDel (Ptr<Tuple> eknowTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_rc_3_ecaDel triggered");

  Ptr<Tuple> result = eknowTempDelete;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    EKNOWDELETE,
    strlist ("Local",
      "eknowTempDelete_attr3",
      "eknowTempDelete_attr4",
      "eknowTempDelete_attr5",
      "eknowTempDelete_attr6",
      "eknowTempDelete_attr7",
      "eknowTempDelete_attr1",
      "Local"),
    strlist ("eknowDelete_attr1",
      "eknowDelete_attr2",
      "eknowDelete_attr3",
      "eknowDelete_attr4",
      "eknowDelete_attr5",
      "eknowDelete_attr6",
      "eknowDelete_attr7",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_rc_4_ecaAdd (Ptr<Tuple> eknow)
{
  RAPIDNET_LOG_INFO ("Prov_rc_4_ecaAdd triggered");

  Ptr<Tuple> result = eknow;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    KNOW,
    strlist ("Local",
      "eknow_attr2",
      "eknow_attr3",
      "eknow_attr4"),
    strlist ("know_attr1",
      "know_attr2",
      "know_attr3",
      "know_attr4"));

  Insert (result);
}

void
Acquaintance::Prov_rc_4_ecaDel (Ptr<Tuple> eknowDelete)
{
  RAPIDNET_LOG_INFO ("Prov_rc_4_ecaDel triggered");

  Ptr<Tuple> result = eknowDelete;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    KNOW,
    strlist ("Local",
      "eknowDelete_attr2",
      "eknowDelete_attr3",
      "eknowDelete_attr4"),
    strlist ("know_attr1",
      "know_attr2",
      "know_attr3",
      "know_attr4"));

  Delete (result);
}

void
Acquaintance::Prov_rc_5_ecaAdd (Ptr<Tuple> eknow)
{
  RAPIDNET_LOG_INFO ("Prov_rc_5_ecaAdd triggered");

  Ptr<Tuple> result = eknow;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("know")),
                    VarExpr::New ("eknow_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("eknow_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("eknow_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("eknow_attr4")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "eknow_attr5",
      "eknow_attr7",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Insert (result);
}

void
Acquaintance::Prov_rc_5_ecaDel (Ptr<Tuple> eknowDelete)
{
  RAPIDNET_LOG_INFO ("Prov_rc_5_ecaDel triggered");

  Ptr<Tuple> result = eknowDelete;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("know")),
                    VarExpr::New ("eknowDelete_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("eknowDelete_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("eknowDelete_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("eknowDelete_attr4")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "eknowDelete_attr5",
      "eknowDelete_attr7",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Delete (result);
}

void
Acquaintance::Prov_rd_1Eca0Ins (Ptr<Tuple> relation)
{
  RAPIDNET_LOG_INFO ("Prov_rd_1Eca0Ins triggered");

  Ptr<Tuple> result = relation;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("relation")),
                    VarExpr::New ("relation_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("relation_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("relation_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("relation_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("relation_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rd"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    EKNOWEVENTTEMP,
    strlist ("RLOC",
      "Local",
      "relation_attr2",
      "relation_attr3",
      "relation_attr4",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eknowEventTemp_attr1",
      "eknowEventTemp_attr2",
      "eknowEventTemp_attr3",
      "eknowEventTemp_attr4",
      "eknowEventTemp_attr5",
      "eknowEventTemp_attr6",
      "eknowEventTemp_attr7",
      "eknowEventTemp_attr8",
      "eknowEventTemp_attr9",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_rd_1Eca0Del (Ptr<Tuple> relation)
{
  RAPIDNET_LOG_INFO ("Prov_rd_1Eca0Del triggered");

  Ptr<Tuple> result = relation;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("relation")),
                    VarExpr::New ("relation_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("relation_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("relation_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("relation_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("relation_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("rd"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    EKNOWEVENTTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "relation_attr2",
      "relation_attr3",
      "relation_attr4",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eknowEventTempDelete_attr1",
      "eknowEventTempDelete_attr2",
      "eknowEventTempDelete_attr3",
      "eknowEventTempDelete_attr4",
      "eknowEventTempDelete_attr5",
      "eknowEventTempDelete_attr6",
      "eknowEventTempDelete_attr7",
      "eknowEventTempDelete_attr8",
      "eknowEventTempDelete_attr9",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_rd_2_ecaAdd (Ptr<Tuple> eknowEventTemp)
{
  RAPIDNET_LOG_INFO ("Prov_rd_2_ecaAdd triggered");

  Ptr<Tuple> result = eknowEventTemp;

  result = result->Project (
    RULEEXEC,
    strlist ("eknowEventTemp_attr1",
      "eknowEventTemp_attr6",
      "eknowEventTemp_attr7",
      "eknowEventTemp_attr8",
      "eknowEventTemp_attr9"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Insert (result);
}

void
Acquaintance::Prov_rd_2_ecaDel (Ptr<Tuple> eknowEventTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_rd_2_ecaDel triggered");

  Ptr<Tuple> result = eknowEventTempDelete;

  result = result->Project (
    RULEEXEC,
    strlist ("eknowEventTempDelete_attr1",
      "eknowEventTempDelete_attr6",
      "eknowEventTempDelete_attr7",
      "eknowEventTempDelete_attr8",
      "eknowEventTempDelete_attr9"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Delete (result);
}

void
Acquaintance::Prov_rd_3_ecaAdd (Ptr<Tuple> eknowEventTemp)
{
  RAPIDNET_LOG_INFO ("Prov_rd_3_ecaAdd triggered");

  Ptr<Tuple> result = eknowEventTemp;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    EKNOWEVENT,
    strlist ("Local",
      "eknowEventTemp_attr3",
      "eknowEventTemp_attr4",
      "eknowEventTemp_attr5",
      "eknowEventTemp_attr6",
      "eknowEventTemp_attr7",
      "eknowEventTemp_attr1",
      "Local"),
    strlist ("eknowEvent_attr1",
      "eknowEvent_attr2",
      "eknowEvent_attr3",
      "eknowEvent_attr4",
      "eknowEvent_attr5",
      "eknowEvent_attr6",
      "eknowEvent_attr7",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_rd_3_ecaDel (Ptr<Tuple> eknowEventTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_rd_3_ecaDel triggered");

  Ptr<Tuple> result = eknowEventTempDelete;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    EKNOWEVENTDELETE,
    strlist ("Local",
      "eknowEventTempDelete_attr3",
      "eknowEventTempDelete_attr4",
      "eknowEventTempDelete_attr5",
      "eknowEventTempDelete_attr6",
      "eknowEventTempDelete_attr7",
      "eknowEventTempDelete_attr1",
      "Local"),
    strlist ("eknowEventDelete_attr1",
      "eknowEventDelete_attr2",
      "eknowEventDelete_attr3",
      "eknowEventDelete_attr4",
      "eknowEventDelete_attr5",
      "eknowEventDelete_attr6",
      "eknowEventDelete_attr7",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_rd_4_ecaAdd (Ptr<Tuple> eknowEvent)
{
  RAPIDNET_LOG_INFO ("Prov_rd_4_ecaAdd triggered");

  Ptr<Tuple> result = eknowEvent;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    KNOWEVENT,
    strlist ("Local",
      "eknowEvent_attr2",
      "eknowEvent_attr3",
      "eknowEvent_attr4"),
    strlist ("knowEvent_attr1",
      "knowEvent_attr2",
      "knowEvent_attr3",
      "knowEvent_attr4"));

  Insert (result);
}

void
Acquaintance::Prov_rd_4_ecaDel (Ptr<Tuple> eknowEventDelete)
{
  RAPIDNET_LOG_INFO ("Prov_rd_4_ecaDel triggered");

  Ptr<Tuple> result = eknowEventDelete;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    KNOWEVENT,
    strlist ("Local",
      "eknowEventDelete_attr2",
      "eknowEventDelete_attr3",
      "eknowEventDelete_attr4"),
    strlist ("knowEvent_attr1",
      "knowEvent_attr2",
      "knowEvent_attr3",
      "knowEvent_attr4"));

  Delete (result);
}

void
Acquaintance::Prov_rd_5_ecaAdd (Ptr<Tuple> eknowEvent)
{
  RAPIDNET_LOG_INFO ("Prov_rd_5_ecaAdd triggered");

  Ptr<Tuple> result = eknowEvent;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("knowEvent")),
                    VarExpr::New ("eknowEvent_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("eknowEvent_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("eknowEvent_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("eknowEvent_attr4")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "eknowEvent_attr5",
      "eknowEvent_attr7",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Insert (result);
}

void
Acquaintance::Prov_rd_5_ecaDel (Ptr<Tuple> eknowEventDelete)
{
  RAPIDNET_LOG_INFO ("Prov_rd_5_ecaDel triggered");

  Ptr<Tuple> result = eknowEventDelete;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("knowEvent")),
                    VarExpr::New ("eknowEventDelete_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("eknowEventDelete_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("eknowEventDelete_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("eknowEventDelete_attr4")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "eknowEventDelete_attr5",
      "eknowEventDelete_attr7",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Delete (result);
}

void
Acquaintance::Prov_r1_1Eca0Ins (Ptr<Tuple> liveEvent)
{
  RAPIDNET_LOG_INFO ("Prov_r1_1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LIVE)->Join (
    liveEvent,
    strlist ("live_attr3", "live_attr1"),
    strlist ("liveEvent_attr3", "liveEvent_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("liveEvent")),
                VarExpr::New ("liveEvent_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("liveEvent_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("liveEvent_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("live")),
                VarExpr::New ("liveEvent_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("live_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("liveEvent_attr3")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("S",
    ValueExpr::New (Int32Value::New (1))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("liveEvent_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (0.8))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("liveEvent_attr2"),
      VarExpr::New ("live_attr2"))));

  result = result->Project (
    EKNOWEVENTTEMP,
    strlist ("RLOC",
      "Local",
      "liveEvent_attr2",
      "live_attr2",
      "S",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eknowEventTemp_attr1",
      "eknowEventTemp_attr2",
      "eknowEventTemp_attr3",
      "eknowEventTemp_attr4",
      "eknowEventTemp_attr5",
      "eknowEventTemp_attr6",
      "eknowEventTemp_attr7",
      "eknowEventTemp_attr8",
      "eknowEventTemp_attr9",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_r1_1Eca0Del (Ptr<Tuple> liveEvent)
{
  RAPIDNET_LOG_INFO ("Prov_r1_1Eca0Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LIVE)->Join (
    liveEvent,
    strlist ("live_attr3", "live_attr1"),
    strlist ("liveEvent_attr3", "liveEvent_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("liveEvent")),
                VarExpr::New ("liveEvent_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("liveEvent_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("liveEvent_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("live")),
                VarExpr::New ("liveEvent_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("live_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("liveEvent_attr3")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("S",
    ValueExpr::New (Int32Value::New (1))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("liveEvent_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (0.8))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("liveEvent_attr2"),
      VarExpr::New ("live_attr2"))));

  result = result->Project (
    EKNOWEVENTTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "liveEvent_attr2",
      "live_attr2",
      "S",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eknowEventTempDelete_attr1",
      "eknowEventTempDelete_attr2",
      "eknowEventTempDelete_attr3",
      "eknowEventTempDelete_attr4",
      "eknowEventTempDelete_attr5",
      "eknowEventTempDelete_attr6",
      "eknowEventTempDelete_attr7",
      "eknowEventTempDelete_attr8",
      "eknowEventTempDelete_attr9",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_r1_1Eca3Ins (Ptr<Tuple> live)
{
  RAPIDNET_LOG_INFO ("Prov_r1_1Eca3Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LIVEEVENT)->Join (
    live,
    strlist ("liveEvent_attr3", "liveEvent_attr1"),
    strlist ("live_attr3", "live_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("liveEvent")),
                VarExpr::New ("live_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("liveEvent_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("live_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("live")),
                VarExpr::New ("live_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("live_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("live_attr3")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("S",
    ValueExpr::New (Int32Value::New (1))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("live_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (0.8))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("liveEvent_attr2"),
      VarExpr::New ("live_attr2"))));

  result = result->Project (
    EKNOWEVENTTEMP,
    strlist ("RLOC",
      "Local",
      "liveEvent_attr2",
      "live_attr2",
      "S",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eknowEventTemp_attr1",
      "eknowEventTemp_attr2",
      "eknowEventTemp_attr3",
      "eknowEventTemp_attr4",
      "eknowEventTemp_attr5",
      "eknowEventTemp_attr6",
      "eknowEventTemp_attr7",
      "eknowEventTemp_attr8",
      "eknowEventTemp_attr9",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_r1_1Eca3Del (Ptr<Tuple> live)
{
  RAPIDNET_LOG_INFO ("Prov_r1_1Eca3Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LIVEEVENT)->Join (
    live,
    strlist ("liveEvent_attr3", "liveEvent_attr1"),
    strlist ("live_attr3", "live_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("liveEvent")),
                VarExpr::New ("live_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("liveEvent_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("live_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("live")),
                VarExpr::New ("live_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("live_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("live_attr3")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("S",
    ValueExpr::New (Int32Value::New (1))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("live_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (0.8))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("liveEvent_attr2"),
      VarExpr::New ("live_attr2"))));

  result = result->Project (
    EKNOWEVENTTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "liveEvent_attr2",
      "live_attr2",
      "S",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eknowEventTempDelete_attr1",
      "eknowEventTempDelete_attr2",
      "eknowEventTempDelete_attr3",
      "eknowEventTempDelete_attr4",
      "eknowEventTempDelete_attr5",
      "eknowEventTempDelete_attr6",
      "eknowEventTempDelete_attr7",
      "eknowEventTempDelete_attr8",
      "eknowEventTempDelete_attr9",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_r2_1Eca0Ins (Ptr<Tuple> likeEvent)
{
  RAPIDNET_LOG_INFO ("Prov_r2_1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LIKE)->Join (
    likeEvent,
    strlist ("like_attr3", "like_attr1"),
    strlist ("likeEvent_attr3", "likeEvent_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("likeEvent")),
                VarExpr::New ("likeEvent_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("likeEvent_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("likeEvent_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("like")),
                VarExpr::New ("likeEvent_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("like_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("likeEvent_attr3")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("S",
    ValueExpr::New (Int32Value::New (1))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("likeEvent_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (0.4))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("likeEvent_attr2"),
      VarExpr::New ("like_attr2"))));

  result = result->Project (
    EKNOWEVENTTEMP,
    strlist ("RLOC",
      "Local",
      "likeEvent_attr2",
      "like_attr2",
      "S",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eknowEventTemp_attr1",
      "eknowEventTemp_attr2",
      "eknowEventTemp_attr3",
      "eknowEventTemp_attr4",
      "eknowEventTemp_attr5",
      "eknowEventTemp_attr6",
      "eknowEventTemp_attr7",
      "eknowEventTemp_attr8",
      "eknowEventTemp_attr9",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_r2_1Eca0Del (Ptr<Tuple> likeEvent)
{
  RAPIDNET_LOG_INFO ("Prov_r2_1Eca0Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LIKE)->Join (
    likeEvent,
    strlist ("like_attr3", "like_attr1"),
    strlist ("likeEvent_attr3", "likeEvent_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("likeEvent")),
                VarExpr::New ("likeEvent_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("likeEvent_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("likeEvent_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("like")),
                VarExpr::New ("likeEvent_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("like_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("likeEvent_attr3")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("S",
    ValueExpr::New (Int32Value::New (1))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("likeEvent_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (0.4))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("likeEvent_attr2"),
      VarExpr::New ("like_attr2"))));

  result = result->Project (
    EKNOWEVENTTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "likeEvent_attr2",
      "like_attr2",
      "S",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eknowEventTempDelete_attr1",
      "eknowEventTempDelete_attr2",
      "eknowEventTempDelete_attr3",
      "eknowEventTempDelete_attr4",
      "eknowEventTempDelete_attr5",
      "eknowEventTempDelete_attr6",
      "eknowEventTempDelete_attr7",
      "eknowEventTempDelete_attr8",
      "eknowEventTempDelete_attr9",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_r2_1Eca3Ins (Ptr<Tuple> like)
{
  RAPIDNET_LOG_INFO ("Prov_r2_1Eca3Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LIKEEVENT)->Join (
    like,
    strlist ("likeEvent_attr3", "likeEvent_attr1"),
    strlist ("like_attr3", "like_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("likeEvent")),
                VarExpr::New ("like_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("likeEvent_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("like_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("like")),
                VarExpr::New ("like_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("like_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("like_attr3")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("S",
    ValueExpr::New (Int32Value::New (1))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("like_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (0.4))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("likeEvent_attr2"),
      VarExpr::New ("like_attr2"))));

  result = result->Project (
    EKNOWEVENTTEMP,
    strlist ("RLOC",
      "Local",
      "likeEvent_attr2",
      "like_attr2",
      "S",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eknowEventTemp_attr1",
      "eknowEventTemp_attr2",
      "eknowEventTemp_attr3",
      "eknowEventTemp_attr4",
      "eknowEventTemp_attr5",
      "eknowEventTemp_attr6",
      "eknowEventTemp_attr7",
      "eknowEventTemp_attr8",
      "eknowEventTemp_attr9",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_r2_1Eca3Del (Ptr<Tuple> like)
{
  RAPIDNET_LOG_INFO ("Prov_r2_1Eca3Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LIKEEVENT)->Join (
    like,
    strlist ("likeEvent_attr3", "likeEvent_attr1"),
    strlist ("like_attr3", "like_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("likeEvent")),
                VarExpr::New ("like_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("likeEvent_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("like_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("like")),
                VarExpr::New ("like_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("like_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("like_attr3")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("S",
    ValueExpr::New (Int32Value::New (1))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("like_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (0.4))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("likeEvent_attr2"),
      VarExpr::New ("like_attr2"))));

  result = result->Project (
    EKNOWEVENTTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "likeEvent_attr2",
      "like_attr2",
      "S",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eknowEventTempDelete_attr1",
      "eknowEventTempDelete_attr2",
      "eknowEventTempDelete_attr3",
      "eknowEventTempDelete_attr4",
      "eknowEventTempDelete_attr5",
      "eknowEventTempDelete_attr6",
      "eknowEventTempDelete_attr7",
      "eknowEventTempDelete_attr8",
      "eknowEventTempDelete_attr9",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_r3_1Eca0Ins (Ptr<Tuple> liveEvent)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LIVE)->Join (
    liveEvent,
    strlist ("live_attr1"),
    strlist ("liveEvent_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("liveEvent")),
                VarExpr::New ("liveEvent_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("liveEvent_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("liveEvent_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("live")),
                VarExpr::New ("liveEvent_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("live_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("live_attr3")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("S",
    ValueExpr::New (Int32Value::New (0))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("liveEvent_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (0.2))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("liveEvent_attr2"),
      VarExpr::New ("live_attr2"))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("liveEvent_attr3"),
      VarExpr::New ("live_attr3"))));

  result = result->Project (
    EKNOWEVENTTEMP,
    strlist ("RLOC",
      "Local",
      "liveEvent_attr2",
      "live_attr2",
      "S",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eknowEventTemp_attr1",
      "eknowEventTemp_attr2",
      "eknowEventTemp_attr3",
      "eknowEventTemp_attr4",
      "eknowEventTemp_attr5",
      "eknowEventTemp_attr6",
      "eknowEventTemp_attr7",
      "eknowEventTemp_attr8",
      "eknowEventTemp_attr9",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_r3_1Eca0Del (Ptr<Tuple> liveEvent)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1Eca0Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LIVE)->Join (
    liveEvent,
    strlist ("live_attr1"),
    strlist ("liveEvent_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("liveEvent")),
                VarExpr::New ("liveEvent_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("liveEvent_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("liveEvent_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("live")),
                VarExpr::New ("liveEvent_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("live_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("live_attr3")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("S",
    ValueExpr::New (Int32Value::New (0))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("liveEvent_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (0.2))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("liveEvent_attr2"),
      VarExpr::New ("live_attr2"))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("liveEvent_attr3"),
      VarExpr::New ("live_attr3"))));

  result = result->Project (
    EKNOWEVENTTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "liveEvent_attr2",
      "live_attr2",
      "S",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eknowEventTempDelete_attr1",
      "eknowEventTempDelete_attr2",
      "eknowEventTempDelete_attr3",
      "eknowEventTempDelete_attr4",
      "eknowEventTempDelete_attr5",
      "eknowEventTempDelete_attr6",
      "eknowEventTempDelete_attr7",
      "eknowEventTempDelete_attr8",
      "eknowEventTempDelete_attr9",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_r3_1Eca3Ins (Ptr<Tuple> live)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1Eca3Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LIVEEVENT)->Join (
    live,
    strlist ("liveEvent_attr1"),
    strlist ("live_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("liveEvent")),
                VarExpr::New ("live_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("liveEvent_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("liveEvent_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("live")),
                VarExpr::New ("live_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("live_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("live_attr3")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("S",
    ValueExpr::New (Int32Value::New (0))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("live_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (0.2))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("liveEvent_attr2"),
      VarExpr::New ("live_attr2"))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("liveEvent_attr3"),
      VarExpr::New ("live_attr3"))));

  result = result->Project (
    EKNOWEVENTTEMP,
    strlist ("RLOC",
      "Local",
      "liveEvent_attr2",
      "live_attr2",
      "S",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eknowEventTemp_attr1",
      "eknowEventTemp_attr2",
      "eknowEventTemp_attr3",
      "eknowEventTemp_attr4",
      "eknowEventTemp_attr5",
      "eknowEventTemp_attr6",
      "eknowEventTemp_attr7",
      "eknowEventTemp_attr8",
      "eknowEventTemp_attr9",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_r3_1Eca3Del (Ptr<Tuple> live)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1Eca3Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LIVEEVENT)->Join (
    live,
    strlist ("liveEvent_attr1"),
    strlist ("live_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("liveEvent")),
                VarExpr::New ("live_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("liveEvent_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("liveEvent_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("live")),
                VarExpr::New ("live_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("live_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("live_attr3")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("S",
    ValueExpr::New (Int32Value::New (0))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("live_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (0.2))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("liveEvent_attr2"),
      VarExpr::New ("live_attr2"))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("liveEvent_attr3"),
      VarExpr::New ("live_attr3"))));

  result = result->Project (
    EKNOWEVENTTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "liveEvent_attr2",
      "live_attr2",
      "S",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eknowEventTempDelete_attr1",
      "eknowEventTempDelete_attr2",
      "eknowEventTempDelete_attr3",
      "eknowEventTempDelete_attr4",
      "eknowEventTempDelete_attr5",
      "eknowEventTempDelete_attr6",
      "eknowEventTempDelete_attr7",
      "eknowEventTempDelete_attr8",
      "eknowEventTempDelete_attr9",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_r6_1Eca0Ins (Ptr<Tuple> liveEvent)
{
  RAPIDNET_LOG_INFO ("Prov_r6_1Eca0Ins triggered");

  Ptr<Tuple> result = liveEvent;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("liveEvent")),
                VarExpr::New ("liveEvent_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("liveEvent_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("liveEvent_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("liveEvent")),
            VarExpr::New ("liveEvent_attr1")),
          VarExpr::New ("liveEvent_attr2")),
        VarExpr::New ("liveEvent_attr3")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("liveEvent"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        VarExpr::New ("Name"),
        VarExpr::New ("liveEvent_attr2")),
      VarExpr::New ("liveEvent_attr3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("liveEvent_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r6"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESHARESULTTEMP,
    strlist ("RLOC",
      "Local",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTemp_attr1",
      "eshaResultTemp_attr2",
      "eshaResultTemp_attr3",
      "eshaResultTemp_attr4",
      "eshaResultTemp_attr5",
      "eshaResultTemp_attr6",
      "eshaResultTemp_attr7",
      "eshaResultTemp_attr8",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_r6_1Eca0Del (Ptr<Tuple> liveEvent)
{
  RAPIDNET_LOG_INFO ("Prov_r6_1Eca0Del triggered");

  Ptr<Tuple> result = liveEvent;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("liveEvent")),
                VarExpr::New ("liveEvent_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("liveEvent_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("liveEvent_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("liveEvent")),
            VarExpr::New ("liveEvent_attr1")),
          VarExpr::New ("liveEvent_attr2")),
        VarExpr::New ("liveEvent_attr3")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("liveEvent"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        VarExpr::New ("Name"),
        VarExpr::New ("liveEvent_attr2")),
      VarExpr::New ("liveEvent_attr3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("liveEvent_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r6"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESHARESULTTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTempDelete_attr1",
      "eshaResultTempDelete_attr2",
      "eshaResultTempDelete_attr3",
      "eshaResultTempDelete_attr4",
      "eshaResultTempDelete_attr5",
      "eshaResultTempDelete_attr6",
      "eshaResultTempDelete_attr7",
      "eshaResultTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_r6_2_ecaAdd (Ptr<Tuple> eshaResultTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r6_2_ecaAdd triggered");

  Ptr<Tuple> result = eshaResultTemp;

  result = result->Project (
    RULEEXEC,
    strlist ("eshaResultTemp_attr1",
      "eshaResultTemp_attr5",
      "eshaResultTemp_attr6",
      "eshaResultTemp_attr7",
      "eshaResultTemp_attr8"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Insert (result);
}

void
Acquaintance::Prov_r6_2_ecaDel (Ptr<Tuple> eshaResultTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r6_2_ecaDel triggered");

  Ptr<Tuple> result = eshaResultTempDelete;

  result = result->Project (
    RULEEXEC,
    strlist ("eshaResultTempDelete_attr1",
      "eshaResultTempDelete_attr5",
      "eshaResultTempDelete_attr6",
      "eshaResultTempDelete_attr7",
      "eshaResultTempDelete_attr8"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Delete (result);
}

void
Acquaintance::Prov_r6_3_ecaAdd (Ptr<Tuple> eshaResultTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r6_3_ecaAdd triggered");

  Ptr<Tuple> result = eshaResultTemp;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESHARESULT,
    strlist ("Local",
      "eshaResultTemp_attr3",
      "eshaResultTemp_attr4",
      "eshaResultTemp_attr5",
      "eshaResultTemp_attr6",
      "eshaResultTemp_attr1",
      "Local"),
    strlist ("eshaResult_attr1",
      "eshaResult_attr2",
      "eshaResult_attr3",
      "eshaResult_attr4",
      "eshaResult_attr5",
      "eshaResult_attr6",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_r6_3_ecaDel (Ptr<Tuple> eshaResultTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r6_3_ecaDel triggered");

  Ptr<Tuple> result = eshaResultTempDelete;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESHARESULTDELETE,
    strlist ("Local",
      "eshaResultTempDelete_attr3",
      "eshaResultTempDelete_attr4",
      "eshaResultTempDelete_attr5",
      "eshaResultTempDelete_attr6",
      "eshaResultTempDelete_attr1",
      "Local"),
    strlist ("eshaResultDelete_attr1",
      "eshaResultDelete_attr2",
      "eshaResultDelete_attr3",
      "eshaResultDelete_attr4",
      "eshaResultDelete_attr5",
      "eshaResultDelete_attr6",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_r6_4_ecaAdd (Ptr<Tuple> eshaResult)
{
  RAPIDNET_LOG_INFO ("Prov_r6_4_ecaAdd triggered");

  Ptr<Tuple> result = eshaResult;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    SHARESULT,
    strlist ("Local",
      "eshaResult_attr2",
      "eshaResult_attr3"),
    strlist ("shaResult_attr1",
      "shaResult_attr2",
      "shaResult_attr3"));

  Insert (result);
}

void
Acquaintance::Prov_r6_4_ecaDel (Ptr<Tuple> eshaResultDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r6_4_ecaDel triggered");

  Ptr<Tuple> result = eshaResultDelete;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    SHARESULT,
    strlist ("Local",
      "eshaResultDelete_attr2",
      "eshaResultDelete_attr3"),
    strlist ("shaResult_attr1",
      "shaResult_attr2",
      "shaResult_attr3"));

  Delete (result);
}

void
Acquaintance::Prov_r6_5_ecaAdd (Ptr<Tuple> eshaResult)
{
  RAPIDNET_LOG_INFO ("Prov_r6_5_ecaAdd triggered");

  Ptr<Tuple> result = eshaResult;

  result->Assign (Assignor::New ("eshaResult_attr2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("shaResult")),
                VarExpr::New ("eshaResult_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("eshaResult_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("eshaResult_attr3")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "eshaResult_attr2",
      "eshaResult_attr4",
      "eshaResult_attr6",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Insert (result);
}

void
Acquaintance::Prov_r6_5_ecaDel (Ptr<Tuple> eshaResultDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r6_5_ecaDel triggered");

  Ptr<Tuple> result = eshaResultDelete;

  result->Assign (Assignor::New ("eshaResultDelete_attr2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("shaResult")),
                VarExpr::New ("eshaResultDelete_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("eshaResultDelete_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("eshaResultDelete_attr3")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "eshaResultDelete_attr2",
      "eshaResultDelete_attr4",
      "eshaResultDelete_attr6",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Delete (result);
}

void
Acquaintance::Prov_r7_1Eca0Ins (Ptr<Tuple> likeEvent)
{
  RAPIDNET_LOG_INFO ("Prov_r7_1Eca0Ins triggered");

  Ptr<Tuple> result = likeEvent;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("likeEvent")),
                VarExpr::New ("likeEvent_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("likeEvent_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("likeEvent_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("likeEvent")),
            VarExpr::New ("likeEvent_attr1")),
          VarExpr::New ("likeEvent_attr2")),
        VarExpr::New ("likeEvent_attr3")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("likeEvent"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        VarExpr::New ("Name"),
        VarExpr::New ("likeEvent_attr2")),
      VarExpr::New ("likeEvent_attr3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("likeEvent_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r7"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESHARESULTTEMP,
    strlist ("RLOC",
      "Local",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTemp_attr1",
      "eshaResultTemp_attr2",
      "eshaResultTemp_attr3",
      "eshaResultTemp_attr4",
      "eshaResultTemp_attr5",
      "eshaResultTemp_attr6",
      "eshaResultTemp_attr7",
      "eshaResultTemp_attr8",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_r7_1Eca0Del (Ptr<Tuple> likeEvent)
{
  RAPIDNET_LOG_INFO ("Prov_r7_1Eca0Del triggered");

  Ptr<Tuple> result = likeEvent;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("likeEvent")),
                VarExpr::New ("likeEvent_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("likeEvent_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("likeEvent_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("likeEvent")),
            VarExpr::New ("likeEvent_attr1")),
          VarExpr::New ("likeEvent_attr2")),
        VarExpr::New ("likeEvent_attr3")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("likeEvent"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        VarExpr::New ("Name"),
        VarExpr::New ("likeEvent_attr2")),
      VarExpr::New ("likeEvent_attr3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("likeEvent_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r7"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESHARESULTTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTempDelete_attr1",
      "eshaResultTempDelete_attr2",
      "eshaResultTempDelete_attr3",
      "eshaResultTempDelete_attr4",
      "eshaResultTempDelete_attr5",
      "eshaResultTempDelete_attr6",
      "eshaResultTempDelete_attr7",
      "eshaResultTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_r8_1Eca0Ins (Ptr<Tuple> knowEvent)
{
  RAPIDNET_LOG_INFO ("Prov_r8_1Eca0Ins triggered");

  Ptr<Tuple> result = knowEvent;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("knowEvent")),
                    VarExpr::New ("knowEvent_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("knowEvent_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("knowEvent_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("knowEvent_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("knowEvent")),
              VarExpr::New ("knowEvent_attr1")),
            VarExpr::New ("knowEvent_attr2")),
          VarExpr::New ("knowEvent_attr3")),
        VarExpr::New ("knowEvent_attr4")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("knowEvent"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("Name"),
          VarExpr::New ("knowEvent_attr2")),
        VarExpr::New ("knowEvent_attr3")),
      VarExpr::New ("knowEvent_attr4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("knowEvent_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r8"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESHARESULTTEMP,
    strlist ("RLOC",
      "Local",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTemp_attr1",
      "eshaResultTemp_attr2",
      "eshaResultTemp_attr3",
      "eshaResultTemp_attr4",
      "eshaResultTemp_attr5",
      "eshaResultTemp_attr6",
      "eshaResultTemp_attr7",
      "eshaResultTemp_attr8",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_r8_1Eca0Del (Ptr<Tuple> knowEvent)
{
  RAPIDNET_LOG_INFO ("Prov_r8_1Eca0Del triggered");

  Ptr<Tuple> result = knowEvent;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("knowEvent")),
                    VarExpr::New ("knowEvent_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("knowEvent_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("knowEvent_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("knowEvent_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("knowEvent")),
              VarExpr::New ("knowEvent_attr1")),
            VarExpr::New ("knowEvent_attr2")),
          VarExpr::New ("knowEvent_attr3")),
        VarExpr::New ("knowEvent_attr4")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("knowEvent"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("Name"),
          VarExpr::New ("knowEvent_attr2")),
        VarExpr::New ("knowEvent_attr3")),
      VarExpr::New ("knowEvent_attr4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("knowEvent_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r8"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESHARESULTTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTempDelete_attr1",
      "eshaResultTempDelete_attr2",
      "eshaResultTempDelete_attr3",
      "eshaResultTempDelete_attr4",
      "eshaResultTempDelete_attr5",
      "eshaResultTempDelete_attr6",
      "eshaResultTempDelete_attr7",
      "eshaResultTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_r9_1Eca0Ins (Ptr<Tuple> relation)
{
  RAPIDNET_LOG_INFO ("Prov_r9_1Eca0Ins triggered");

  Ptr<Tuple> result = relation;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("relation")),
                    VarExpr::New ("relation_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("relation_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("relation_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("relation_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("relation")),
              VarExpr::New ("relation_attr1")),
            VarExpr::New ("relation_attr2")),
          VarExpr::New ("relation_attr3")),
        VarExpr::New ("relation_attr4")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("relation"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("Name"),
          VarExpr::New ("relation_attr2")),
        VarExpr::New ("relation_attr3")),
      VarExpr::New ("relation_attr4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("relation_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r9"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESHARESULTTEMP,
    strlist ("RLOC",
      "Local",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTemp_attr1",
      "eshaResultTemp_attr2",
      "eshaResultTemp_attr3",
      "eshaResultTemp_attr4",
      "eshaResultTemp_attr5",
      "eshaResultTemp_attr6",
      "eshaResultTemp_attr7",
      "eshaResultTemp_attr8",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_r9_1Eca0Del (Ptr<Tuple> relation)
{
  RAPIDNET_LOG_INFO ("Prov_r9_1Eca0Del triggered");

  Ptr<Tuple> result = relation;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("relation")),
                    VarExpr::New ("relation_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("relation_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("relation_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("relation_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("relation")),
              VarExpr::New ("relation_attr1")),
            VarExpr::New ("relation_attr2")),
          VarExpr::New ("relation_attr3")),
        VarExpr::New ("relation_attr4")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("relation"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("Name"),
          VarExpr::New ("relation_attr2")),
        VarExpr::New ("relation_attr3")),
      VarExpr::New ("relation_attr4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("relation_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r9"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESHARESULTTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTempDelete_attr1",
      "eshaResultTempDelete_attr2",
      "eshaResultTempDelete_attr3",
      "eshaResultTempDelete_attr4",
      "eshaResultTempDelete_attr5",
      "eshaResultTempDelete_attr6",
      "eshaResultTempDelete_attr7",
      "eshaResultTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_r10_1Eca0Ins (Ptr<Tuple> live)
{
  RAPIDNET_LOG_INFO ("Prov_r10_1Eca0Ins triggered");

  Ptr<Tuple> result = live;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("live")),
                VarExpr::New ("live_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("live_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("live_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("live")),
            VarExpr::New ("live_attr1")),
          VarExpr::New ("live_attr2")),
        VarExpr::New ("live_attr3")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("live"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        VarExpr::New ("Name"),
        VarExpr::New ("live_attr2")),
      VarExpr::New ("live_attr3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("live_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r10"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESHARESULTTEMP,
    strlist ("RLOC",
      "Local",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTemp_attr1",
      "eshaResultTemp_attr2",
      "eshaResultTemp_attr3",
      "eshaResultTemp_attr4",
      "eshaResultTemp_attr5",
      "eshaResultTemp_attr6",
      "eshaResultTemp_attr7",
      "eshaResultTemp_attr8",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_r10_1Eca0Del (Ptr<Tuple> live)
{
  RAPIDNET_LOG_INFO ("Prov_r10_1Eca0Del triggered");

  Ptr<Tuple> result = live;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("live")),
                VarExpr::New ("live_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("live_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("live_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("live")),
            VarExpr::New ("live_attr1")),
          VarExpr::New ("live_attr2")),
        VarExpr::New ("live_attr3")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("live"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        VarExpr::New ("Name"),
        VarExpr::New ("live_attr2")),
      VarExpr::New ("live_attr3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("live_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r10"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESHARESULTTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTempDelete_attr1",
      "eshaResultTempDelete_attr2",
      "eshaResultTempDelete_attr3",
      "eshaResultTempDelete_attr4",
      "eshaResultTempDelete_attr5",
      "eshaResultTempDelete_attr6",
      "eshaResultTempDelete_attr7",
      "eshaResultTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_r11_1Eca0Ins (Ptr<Tuple> like)
{
  RAPIDNET_LOG_INFO ("Prov_r11_1Eca0Ins triggered");

  Ptr<Tuple> result = like;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("like")),
                VarExpr::New ("like_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("like_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("like_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("like")),
            VarExpr::New ("like_attr1")),
          VarExpr::New ("like_attr2")),
        VarExpr::New ("like_attr3")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("like"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        VarExpr::New ("Name"),
        VarExpr::New ("like_attr2")),
      VarExpr::New ("like_attr3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("like_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r11"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESHARESULTTEMP,
    strlist ("RLOC",
      "Local",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTemp_attr1",
      "eshaResultTemp_attr2",
      "eshaResultTemp_attr3",
      "eshaResultTemp_attr4",
      "eshaResultTemp_attr5",
      "eshaResultTemp_attr6",
      "eshaResultTemp_attr7",
      "eshaResultTemp_attr8",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_r11_1Eca0Del (Ptr<Tuple> like)
{
  RAPIDNET_LOG_INFO ("Prov_r11_1Eca0Del triggered");

  Ptr<Tuple> result = like;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("like")),
                VarExpr::New ("like_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("like_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("like_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("like")),
            VarExpr::New ("like_attr1")),
          VarExpr::New ("like_attr2")),
        VarExpr::New ("like_attr3")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("like"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        VarExpr::New ("Name"),
        VarExpr::New ("like_attr2")),
      VarExpr::New ("like_attr3"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("like_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r11"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESHARESULTTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTempDelete_attr1",
      "eshaResultTempDelete_attr2",
      "eshaResultTempDelete_attr3",
      "eshaResultTempDelete_attr4",
      "eshaResultTempDelete_attr5",
      "eshaResultTempDelete_attr6",
      "eshaResultTempDelete_attr7",
      "eshaResultTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_r12_1Eca0Ins (Ptr<Tuple> know)
{
  RAPIDNET_LOG_INFO ("Prov_r12_1Eca0Ins triggered");

  Ptr<Tuple> result = know;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("know")),
                    VarExpr::New ("know_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("know_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("know_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("know_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("know")),
              VarExpr::New ("know_attr1")),
            VarExpr::New ("know_attr2")),
          VarExpr::New ("know_attr3")),
        VarExpr::New ("know_attr4")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("know"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("Name"),
          VarExpr::New ("know_attr2")),
        VarExpr::New ("know_attr3")),
      VarExpr::New ("know_attr4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("know_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r12"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESHARESULTTEMP,
    strlist ("RLOC",
      "Local",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTemp_attr1",
      "eshaResultTemp_attr2",
      "eshaResultTemp_attr3",
      "eshaResultTemp_attr4",
      "eshaResultTemp_attr5",
      "eshaResultTemp_attr6",
      "eshaResultTemp_attr7",
      "eshaResultTemp_attr8",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_r12_1Eca0Del (Ptr<Tuple> know)
{
  RAPIDNET_LOG_INFO ("Prov_r12_1Eca0Del triggered");

  Ptr<Tuple> result = know;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("know")),
                    VarExpr::New ("know_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("know_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("know_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("know_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("know")),
              VarExpr::New ("know_attr1")),
            VarExpr::New ("know_attr2")),
          VarExpr::New ("know_attr3")),
        VarExpr::New ("know_attr4")))));

  result->Assign (Assignor::New ("Name",
    ValueExpr::New (StrValue::New ("know"))));

  result->Assign (Assignor::New ("Content",
    Operation::New (RN_PLUS,
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("Name"),
          VarExpr::New ("know_attr2")),
        VarExpr::New ("know_attr3")),
      VarExpr::New ("know_attr4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("know_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r12"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ESHARESULTTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "VID",
      "Content",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eshaResultTempDelete_attr1",
      "eshaResultTempDelete_attr2",
      "eshaResultTempDelete_attr3",
      "eshaResultTempDelete_attr4",
      "eshaResultTempDelete_attr5",
      "eshaResultTempDelete_attr6",
      "eshaResultTempDelete_attr7",
      "eshaResultTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_r13_1Eca0Ins (Ptr<Tuple> knowEvent)
{
  RAPIDNET_LOG_INFO ("Prov_r13_1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (KNOW)->Join (
    knowEvent,
    strlist ("know_attr2", "know_attr1"),
    strlist ("knowEvent_attr3", "knowEvent_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("knowEvent")),
                    VarExpr::New ("knowEvent_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("knowEvent_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("knowEvent_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("knowEvent_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("know")),
                    VarExpr::New ("knowEvent_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("knowEvent_attr3")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("know_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("know_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("S",
    ValueExpr::New (Int32Value::New (1))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("knowEvent_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (0.4))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r13"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("knowEvent_attr2"),
      VarExpr::New ("knowEvent_attr3"))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("knowEvent_attr2"),
      VarExpr::New ("know_attr3"))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("knowEvent_attr3"),
      VarExpr::New ("know_attr3"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("knowEvent_attr4"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("know_attr4"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Project (
    EKNOWEVENTTEMP,
    strlist ("RLOC",
      "Local",
      "knowEvent_attr2",
      "know_attr3",
      "S",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eknowEventTemp_attr1",
      "eknowEventTemp_attr2",
      "eknowEventTemp_attr3",
      "eknowEventTemp_attr4",
      "eknowEventTemp_attr5",
      "eknowEventTemp_attr6",
      "eknowEventTemp_attr7",
      "eknowEventTemp_attr8",
      "eknowEventTemp_attr9",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_r13_1Eca0Del (Ptr<Tuple> knowEvent)
{
  RAPIDNET_LOG_INFO ("Prov_r13_1Eca0Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (KNOW)->Join (
    knowEvent,
    strlist ("know_attr2", "know_attr1"),
    strlist ("knowEvent_attr3", "knowEvent_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("knowEvent")),
                    VarExpr::New ("knowEvent_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("knowEvent_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("knowEvent_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("knowEvent_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("know")),
                    VarExpr::New ("knowEvent_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("knowEvent_attr3")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("know_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("know_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("S",
    ValueExpr::New (Int32Value::New (1))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("knowEvent_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (0.4))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r13"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("knowEvent_attr2"),
      VarExpr::New ("knowEvent_attr3"))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("knowEvent_attr2"),
      VarExpr::New ("know_attr3"))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("knowEvent_attr3"),
      VarExpr::New ("know_attr3"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("knowEvent_attr4"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("know_attr4"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Project (
    EKNOWEVENTTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "knowEvent_attr2",
      "know_attr3",
      "S",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eknowEventTempDelete_attr1",
      "eknowEventTempDelete_attr2",
      "eknowEventTempDelete_attr3",
      "eknowEventTempDelete_attr4",
      "eknowEventTempDelete_attr5",
      "eknowEventTempDelete_attr6",
      "eknowEventTempDelete_attr7",
      "eknowEventTempDelete_attr8",
      "eknowEventTempDelete_attr9",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_r13_1Eca3Ins (Ptr<Tuple> know)
{
  RAPIDNET_LOG_INFO ("Prov_r13_1Eca3Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (KNOWEVENT)->Join (
    know,
    strlist ("knowEvent_attr3", "knowEvent_attr1"),
    strlist ("know_attr2", "know_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("knowEvent")),
                    VarExpr::New ("know_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("knowEvent_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("know_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("knowEvent_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("know")),
                    VarExpr::New ("know_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("know_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("know_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("know_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("S",
    ValueExpr::New (Int32Value::New (1))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("know_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (0.4))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r13"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("knowEvent_attr2"),
      VarExpr::New ("know_attr2"))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("knowEvent_attr2"),
      VarExpr::New ("know_attr3"))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("know_attr2"),
      VarExpr::New ("know_attr3"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("knowEvent_attr4"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("know_attr4"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Project (
    EKNOWEVENTTEMP,
    strlist ("RLOC",
      "Local",
      "knowEvent_attr2",
      "know_attr3",
      "S",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eknowEventTemp_attr1",
      "eknowEventTemp_attr2",
      "eknowEventTemp_attr3",
      "eknowEventTemp_attr4",
      "eknowEventTemp_attr5",
      "eknowEventTemp_attr6",
      "eknowEventTemp_attr7",
      "eknowEventTemp_attr8",
      "eknowEventTemp_attr9",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_r13_1Eca3Del (Ptr<Tuple> know)
{
  RAPIDNET_LOG_INFO ("Prov_r13_1Eca3Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (KNOWEVENT)->Join (
    know,
    strlist ("knowEvent_attr3", "knowEvent_attr1"),
    strlist ("know_attr2", "know_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("knowEvent")),
                    VarExpr::New ("know_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("knowEvent_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("know_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("knowEvent_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  Operation::New (RN_PLUS,
                    ValueExpr::New (StrValue::New ("know")),
                    VarExpr::New ("know_attr1")),
                  ValueExpr::New (StrValue::New (","))),
                VarExpr::New ("know_attr2")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("know_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("know_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("S",
    ValueExpr::New (Int32Value::New (1))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("know_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (0.4))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r13"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("knowEvent_attr2"),
      VarExpr::New ("know_attr2"))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("knowEvent_attr2"),
      VarExpr::New ("know_attr3"))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("know_attr2"),
      VarExpr::New ("know_attr3"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("knowEvent_attr4"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("know_attr4"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Project (
    EKNOWEVENTTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "knowEvent_attr2",
      "know_attr3",
      "S",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("eknowEventTempDelete_attr1",
      "eknowEventTempDelete_attr2",
      "eknowEventTempDelete_attr3",
      "eknowEventTempDelete_attr4",
      "eknowEventTempDelete_attr5",
      "eknowEventTempDelete_attr6",
      "eknowEventTempDelete_attr7",
      "eknowEventTempDelete_attr8",
      "eknowEventTempDelete_attr9",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Prov_edb_1Eca1Ins (Ptr<Tuple> likeEvent)
{
  RAPIDNET_LOG_INFO ("Prov_edb_1Eca1Ins triggered");

  Ptr<Tuple> result = likeEvent;

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("likeEvent_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("likeEvent")),
            VarExpr::New ("likeEvent_attr1")),
          VarExpr::New ("likeEvent_attr2")),
        VarExpr::New ("likeEvent_attr3")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result->Assign (Assignor::New ("Score",
    VarExpr::New ("likeEvent_attr3")));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "RID",
      "RLoc",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Insert (result);
}

void
Acquaintance::Prov_edb_1Eca1Del (Ptr<Tuple> likeEvent)
{
  RAPIDNET_LOG_INFO ("Prov_edb_1Eca1Del triggered");

  Ptr<Tuple> result = likeEvent;

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("likeEvent_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("likeEvent")),
            VarExpr::New ("likeEvent_attr1")),
          VarExpr::New ("likeEvent_attr2")),
        VarExpr::New ("likeEvent_attr3")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result->Assign (Assignor::New ("Score",
    VarExpr::New ("likeEvent_attr3")));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "RID",
      "RLoc",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Delete (result);
}

void
Acquaintance::Prov_edb_2Eca1Ins (Ptr<Tuple> liveEvent)
{
  RAPIDNET_LOG_INFO ("Prov_edb_2Eca1Ins triggered");

  Ptr<Tuple> result = liveEvent;

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("liveEvent_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("liveEvent")),
            VarExpr::New ("liveEvent_attr1")),
          VarExpr::New ("liveEvent_attr2")),
        VarExpr::New ("liveEvent_attr3")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result->Assign (Assignor::New ("Score",
    VarExpr::New ("liveEvent_attr3")));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "RID",
      "RLoc",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Insert (result);
}

void
Acquaintance::Prov_edb_2Eca1Del (Ptr<Tuple> liveEvent)
{
  RAPIDNET_LOG_INFO ("Prov_edb_2Eca1Del triggered");

  Ptr<Tuple> result = liveEvent;

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("liveEvent_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("liveEvent")),
            VarExpr::New ("liveEvent_attr1")),
          VarExpr::New ("liveEvent_attr2")),
        VarExpr::New ("liveEvent_attr3")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result->Assign (Assignor::New ("Score",
    VarExpr::New ("liveEvent_attr3")));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "RID",
      "RLoc",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Delete (result);
}

void
Acquaintance::Prov_edb_3Eca1Ins (Ptr<Tuple> relation)
{
  RAPIDNET_LOG_INFO ("Prov_edb_3Eca1Ins triggered");

  Ptr<Tuple> result = relation;

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("relation_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("relation")),
              VarExpr::New ("relation_attr1")),
            VarExpr::New ("relation_attr2")),
          VarExpr::New ("relation_attr3")),
        VarExpr::New ("relation_attr4")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result->Assign (Assignor::New ("Score",
    VarExpr::New ("relation_attr4")));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "RID",
      "RLoc",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Insert (result);
}

void
Acquaintance::Prov_edb_3Eca1Del (Ptr<Tuple> relation)
{
  RAPIDNET_LOG_INFO ("Prov_edb_3Eca1Del triggered");

  Ptr<Tuple> result = relation;

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("relation_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("relation")),
              VarExpr::New ("relation_attr1")),
            VarExpr::New ("relation_attr2")),
          VarExpr::New ("relation_attr3")),
        VarExpr::New ("relation_attr4")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result->Assign (Assignor::New ("Score",
    VarExpr::New ("relation_attr4")));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "RID",
      "RLoc",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Delete (result);
}

void
Acquaintance::Edb1_eca (Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO ("Edb1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROV)->Join (
    provQuery,
    strlist ("prov_attr2", "prov_attr1"),
    strlist ("provQuery_attr3", "provQuery_attr1"));

  result = GetRelation (SHARESULT)->Join (
    result,
    strlist ("shaResult_attr2", "shaResult_attr1"),
    strlist ("provQuery_attr3", "provQuery_attr1"));

  result->Assign (Assignor::New ("Prov",
    VarExpr::New ("shaResult_attr3")));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("prov_attr3"),
      VarExpr::New ("provQuery_attr3"))));

  result = result->Project (
    PRETURN,
    strlist ("provQuery_attr5",
      "provQuery_attr2",
      "provQuery_attr3",
      "Prov",
      "provQuery_attr5"),
    strlist ("pReturn_attr1",
      "pReturn_attr2",
      "pReturn_attr3",
      "pReturn_attr4",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Idb1_eca (Ptr<Tuple> tempList)
{
  RAPIDNET_LOG_INFO ("Idb1_eca triggered");

  Ptr<Tuple> result = tempList;

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FSize::New (
        VarExpr::New ("tempList_attr6")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    PQLIST,
    strlist ("tempList_attr1",
      "tempList_attr2",
      "tempList_attr3",
      "tempList_attr4",
      "tempList_attr6"),
    strlist ("pQList_attr1",
      "pQList_attr2",
      "pQList_attr3",
      "pQList_attr4",
      "pQList_attr5"));

  Insert (result);
}

void
Acquaintance::Idb2_eca (Ptr<Tuple> tempList)
{
  RAPIDNET_LOG_INFO ("Idb2_eca triggered");

  Ptr<Tuple> result = tempList;

  result->Assign (Assignor::New ("Buf",
    FEmpty::New (
)));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FSize::New (
        VarExpr::New ("tempList_attr6")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    PRESULTTMP,
    strlist ("tempList_attr1",
      "tempList_attr2",
      "tempList_attr5",
      "tempList_attr3",
      "Buf"),
    strlist ("pResultTmp_attr1",
      "pResultTmp_attr2",
      "pResultTmp_attr3",
      "pResultTmp_attr4",
      "pResultTmp_attr5"));

  Insert (result);
}

void
Acquaintance::Idb3_eca (Ptr<Tuple> tempList)
{
  RAPIDNET_LOG_INFO ("Idb3_eca triggered");

  Ptr<Tuple> result = tempList;

  result->Assign (Assignor::New ("N",
    ValueExpr::New (Int32Value::New (1))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FSize::New (
        VarExpr::New ("tempList_attr6")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    PITERATE,
    strlist ("tempList_attr1",
      "tempList_attr2",
      "N",
      "tempList_attr5"),
    strlist ("pIterate_attr1",
      "pIterate_attr2",
      "pIterate_attr3",
      "pIterate_attr4"));

  SendLocal (result);
}

void
Acquaintance::Idb4_eca (Ptr<Tuple> pIterate)
{
  RAPIDNET_LOG_INFO ("Idb4_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PQLIST)->Join (
    pIterate,
    strlist ("pQList_attr2", "pQList_attr1"),
    strlist ("pIterate_attr2", "pIterate_attr1"));

  result->Assign (Assignor::New ("N",
    Operation::New (RN_PLUS,
      VarExpr::New ("pIterate_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_LT,
      VarExpr::New ("pIterate_attr3"),
      FSize::New (
        VarExpr::New ("pQList_attr5")))));

  result = result->Project (
    PITERATE,
    strlist ("pIterate_attr1",
      "pIterate_attr2",
      "N",
      "pIterate_attr4"),
    strlist ("pIterate_attr1",
      "pIterate_attr2",
      "pIterate_attr3",
      "pIterate_attr4"));

  SendLocal (result);
}

void
Acquaintance::Idb5_eca (Ptr<Tuple> pIterate)
{
  RAPIDNET_LOG_INFO ("Idb5_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PQLIST)->Join (
    pIterate,
    strlist ("pQList_attr2", "pQList_attr1"),
    strlist ("pIterate_attr2", "pIterate_attr1"));

  result->Assign (Assignor::New ("RID",
    FItem::New (
      VarExpr::New ("pQList_attr5"),
      VarExpr::New ("pIterate_attr3"))));

  result->Assign (Assignor::New ("NQID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("pIterate_attr2")),
        VarExpr::New ("RID")))));

  result = result->Select (Selector::New (
    Operation::New (RN_LTE,
      VarExpr::New ("pIterate_attr3"),
      FSize::New (
        VarExpr::New ("pQList_attr5")))));

  result = result->Project (
    ERULEQUERY,
    strlist ("pIterate_attr1",
      "NQID",
      "pIterate_attr2",
      "pQList_attr3",
      "RID",
      "pQList_attr4",
      "pIterate_attr4"),
    strlist ("eRuleQuery_attr1",
      "eRuleQuery_attr2",
      "eRuleQuery_attr3",
      "eRuleQuery_attr4",
      "eRuleQuery_attr5",
      "eRuleQuery_attr6",
      "eRuleQuery_attr7"));

  SendLocal (result);
}

void
Acquaintance::Idb6_eca (Ptr<Tuple> eRuleQuery)
{
  RAPIDNET_LOG_INFO ("Idb6_eca triggered");

  Ptr<Tuple> result = eRuleQuery;

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("eRuleQuery_attr1")));

  result->Assign (Assignor::New ("P2",
    FAppend::New (
      VarExpr::New ("eRuleQuery_attr4"))));

  result->Assign (Assignor::New ("P",
    FConcat::New (
      VarExpr::New ("eRuleQuery_attr6"),
      VarExpr::New ("P2"))));

  result = result->Project (
    RULEQUERY,
    strlist ("eRuleQuery_attr1",
      "eRuleQuery_attr2",
      "eRuleQuery_attr5",
      "P",
      "$1"),
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "ruleQuery_attr3",
      "ruleQuery_attr4",
      "ruleQuery_attr5"));

  SendLocal (result);
}

void
Acquaintance::Idb7_eca (Ptr<Tuple> rReturn)
{
  RAPIDNET_LOG_INFO ("Idb7_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PRESULTTMP)->Join (
    rReturn,
    strlist ("pResultTmp_attr1"),
    strlist ("rReturn_attr1"));

  result->Assign (Assignor::New ("Buf2",
    FAppend::New (
      VarExpr::New ("rReturn_attr4"))));

  result->Assign (Assignor::New ("Buf",
    FConcat::New (
      VarExpr::New ("pResultTmp_attr5"),
      VarExpr::New ("Buf2"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("rReturn_attr2"),
      FSha1::New (
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("")),
            VarExpr::New ("pResultTmp_attr2")),
          VarExpr::New ("rReturn_attr3"))))));

  result = result->Project (
    PRESULTTMP,
    strlist ("rReturn_attr1",
      "pResultTmp_attr2",
      "pResultTmp_attr3",
      "pResultTmp_attr4",
      "Buf"),
    strlist ("pResultTmp_attr1",
      "pResultTmp_attr2",
      "pResultTmp_attr3",
      "pResultTmp_attr4",
      "pResultTmp_attr5"));

  Insert (result);
}

void
Acquaintance::Idb8Eca0Ins (Ptr<Tuple> pResultTmp)
{
  RAPIDNET_LOG_INFO ("Idb8Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PQLIST)->Join (
    pResultTmp,
    strlist ("pQList_attr2", "pQList_attr3", "pQList_attr1"),
    strlist ("pResultTmp_attr2", "pResultTmp_attr4", "pResultTmp_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("pResultTmp_attr5")),
      FSize::New (
        VarExpr::New ("pQList_attr5")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FSize::New (
        VarExpr::New ("pResultTmp_attr5")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EPRETURN,
    strlist ("pResultTmp_attr1",
      "pResultTmp_attr2"),
    strlist ("ePReturn_attr1",
      "ePReturn_attr2"));

  SendLocal (result);
}

void
Acquaintance::Idb8Eca1Ins (Ptr<Tuple> pQList)
{
  RAPIDNET_LOG_INFO ("Idb8Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PRESULTTMP)->Join (
    pQList,
    strlist ("pResultTmp_attr2", "pResultTmp_attr4", "pResultTmp_attr1"),
    strlist ("pQList_attr2", "pQList_attr3", "pQList_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("pResultTmp_attr5")),
      FSize::New (
        VarExpr::New ("pQList_attr5")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FSize::New (
        VarExpr::New ("pResultTmp_attr5")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EPRETURN,
    strlist ("pQList_attr1",
      "pQList_attr2"),
    strlist ("ePReturn_attr1",
      "ePReturn_attr2"));

  SendLocal (result);
}

void
Acquaintance::Idb9_eca (Ptr<Tuple> ePReturn)
{
  RAPIDNET_LOG_INFO ("Idb9_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PRESULTTMP)->Join (
    ePReturn,
    strlist ("pResultTmp_attr2", "pResultTmp_attr1"),
    strlist ("ePReturn_attr2", "ePReturn_attr1"));

  result->Assign (Assignor::New ("Prov",
    FPIdb::New (
      VarExpr::New ("pResultTmp_attr5"),
      VarExpr::New ("ePReturn_attr1"))));

  result = result->Project (
    PRETURN,
    strlist ("pResultTmp_attr3",
      "ePReturn_attr2",
      "pResultTmp_attr4",
      "Prov",
      "pResultTmp_attr3"),
    strlist ("pReturn_attr1",
      "pReturn_attr2",
      "pReturn_attr3",
      "pReturn_attr4",
      RN_DEST));

  Send (result);
}

void
Acquaintance::Rv1_eca (Ptr<Tuple> ruleQuery)
{
  RAPIDNET_LOG_INFO ("Rv1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RULEEXEC)->Join (
    ruleQuery,
    strlist ("ruleExec_attr2", "ruleExec_attr1"),
    strlist ("ruleQuery_attr3", "ruleQuery_attr1"));

  result = result->Project (
    RQLIST,
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "ruleExec_attr4",
      "ruleExec_attr3",
      "ruleExec_attr5",
      "ruleQuery_attr4"),
    strlist ("rQList_attr1",
      "rQList_attr2",
      "rQList_attr3",
      "rQList_attr4",
      "rQList_attr5",
      "rQList_attr6"));

  Insert (result);
}

void
Acquaintance::Rv2_eca (Ptr<Tuple> ruleQuery)
{
  RAPIDNET_LOG_INFO ("Rv2_eca triggered");

  Ptr<Tuple> result = ruleQuery;

  result->Assign (Assignor::New ("Buf",
    FEmpty::New (
)));

  result = result->Project (
    RRESULTTMP,
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "ruleQuery_attr5",
      "ruleQuery_attr3",
      "Buf"),
    strlist ("rResultTmp_attr1",
      "rResultTmp_attr2",
      "rResultTmp_attr3",
      "rResultTmp_attr4",
      "rResultTmp_attr5"));

  Insert (result);
}

void
Acquaintance::Rv3_eca (Ptr<Tuple> ruleQuery)
{
  RAPIDNET_LOG_INFO ("Rv3_eca triggered");

  Ptr<Tuple> result = ruleQuery;

  result->Assign (Assignor::New ("N",
    ValueExpr::New (Int32Value::New (1))));

  result = result->Project (
    RITERATE,
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "N"),
    strlist ("rIterate_attr1",
      "rIterate_attr2",
      "rIterate_attr3"));

  SendLocal (result);
}

void
Acquaintance::Rv4_eca (Ptr<Tuple> rIterate)
{
  RAPIDNET_LOG_INFO ("Rv4_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RQLIST)->Join (
    rIterate,
    strlist ("rQList_attr2", "rQList_attr1"),
    strlist ("rIterate_attr2", "rIterate_attr1"));

  result->Assign (Assignor::New ("N",
    Operation::New (RN_PLUS,
      VarExpr::New ("rIterate_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_LT,
      VarExpr::New ("rIterate_attr3"),
      FSize::New (
        VarExpr::New ("rQList_attr5")))));

  result = result->Project (
    RITERATE,
    strlist ("rIterate_attr1",
      "rIterate_attr2",
      "N"),
    strlist ("rIterate_attr1",
      "rIterate_attr2",
      "rIterate_attr3"));

  SendLocal (result);
}

void
Acquaintance::Rv5_eca (Ptr<Tuple> rIterate)
{
  RAPIDNET_LOG_INFO ("Rv5_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RQLIST)->Join (
    rIterate,
    strlist ("rQList_attr2", "rQList_attr1"),
    strlist ("rIterate_attr2", "rIterate_attr1"));

  result->Assign (Assignor::New ("VID",
    FItem::New (
      VarExpr::New ("rQList_attr5"),
      VarExpr::New ("rIterate_attr3"))));

  result->Assign (Assignor::New ("NQID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("rIterate_attr2")),
        VarExpr::New ("VID")))));

  result = result->Project (
    EPROVQUERY,
    strlist ("rIterate_attr1",
      "NQID",
      "VID",
      "rQList_attr6"),
    strlist ("eProvQuery_attr1",
      "eProvQuery_attr2",
      "eProvQuery_attr3",
      "eProvQuery_attr4"));

  SendLocal (result);
}

void
Acquaintance::Rv6_eca (Ptr<Tuple> eProvQuery)
{
  RAPIDNET_LOG_INFO ("Rv6_eca triggered");

  Ptr<Tuple> result = eProvQuery;

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("eProvQuery_attr1")));

  result = result->Project (
    PROVQUERY,
    strlist ("eProvQuery_attr1",
      "eProvQuery_attr2",
      "eProvQuery_attr3",
      "eProvQuery_attr4",
      "$1"),
    strlist ("provQuery_attr1",
      "provQuery_attr2",
      "provQuery_attr3",
      "provQuery_attr4",
      "provQuery_attr5"));

  SendLocal (result);
}

void
Acquaintance::Rv7_eca (Ptr<Tuple> pReturn)
{
  RAPIDNET_LOG_INFO ("Rv7_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RRESULTTMP)->Join (
    pReturn,
    strlist ("rResultTmp_attr1"),
    strlist ("pReturn_attr1"));

  result->Assign (Assignor::New ("Buf2",
    FAppend::New (
      VarExpr::New ("pReturn_attr4"))));

  result->Assign (Assignor::New ("Buf",
    FConcat::New (
      VarExpr::New ("rResultTmp_attr5"),
      VarExpr::New ("Buf2"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("pReturn_attr2"),
      FSha1::New (
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("")),
            VarExpr::New ("rResultTmp_attr2")),
          VarExpr::New ("pReturn_attr3"))))));

  result = result->Project (
    RRESULTTMP,
    strlist ("pReturn_attr1",
      "rResultTmp_attr2",
      "rResultTmp_attr3",
      "rResultTmp_attr4",
      "Buf"),
    strlist ("rResultTmp_attr1",
      "rResultTmp_attr2",
      "rResultTmp_attr3",
      "rResultTmp_attr4",
      "rResultTmp_attr5"));

  Insert (result);
}

void
Acquaintance::Rv8Eca0Ins (Ptr<Tuple> rResultTmp)
{
  RAPIDNET_LOG_INFO ("Rv8Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RQLIST)->Join (
    rResultTmp,
    strlist ("rQList_attr2", "rQList_attr1"),
    strlist ("rResultTmp_attr2", "rResultTmp_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("rResultTmp_attr5")),
      FSize::New (
        VarExpr::New ("rQList_attr5")))));

  result = result->Project (
    ERRETURN,
    strlist ("rResultTmp_attr1",
      "rResultTmp_attr2",
      "rQList_attr3",
      "rQList_attr4"),
    strlist ("eRReturn_attr1",
      "eRReturn_attr2",
      "eRReturn_attr3",
      "eRReturn_attr4"));

  SendLocal (result);
}

void
Acquaintance::Rv8Eca1Ins (Ptr<Tuple> rQList)
{
  RAPIDNET_LOG_INFO ("Rv8Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RRESULTTMP)->Join (
    rQList,
    strlist ("rResultTmp_attr2", "rResultTmp_attr1"),
    strlist ("rQList_attr2", "rQList_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("rResultTmp_attr5")),
      FSize::New (
        VarExpr::New ("rQList_attr5")))));

  result = result->Project (
    ERRETURN,
    strlist ("rQList_attr1",
      "rQList_attr2",
      "rQList_attr3",
      "rQList_attr4"),
    strlist ("eRReturn_attr1",
      "eRReturn_attr2",
      "eRReturn_attr3",
      "eRReturn_attr4"));

  SendLocal (result);
}

void
Acquaintance::Rv9_eca (Ptr<Tuple> eRReturn)
{
  RAPIDNET_LOG_INFO ("Rv9_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RRESULTTMP)->Join (
    eRReturn,
    strlist ("rResultTmp_attr2", "rResultTmp_attr1"),
    strlist ("eRReturn_attr2", "eRReturn_attr1"));

  result->Assign (Assignor::New ("Prov",
    FPRule::New (
      VarExpr::New ("rResultTmp_attr5"),
      VarExpr::New ("eRReturn_attr1"),
      VarExpr::New ("eRReturn_attr3"),
      VarExpr::New ("eRReturn_attr4"))));

  result = result->Project (
    RRETURN,
    strlist ("rResultTmp_attr3",
      "eRReturn_attr2",
      "rResultTmp_attr4",
      "Prov",
      "rResultTmp_attr3"),
    strlist ("rReturn_attr1",
      "rReturn_attr2",
      "rReturn_attr3",
      "rReturn_attr4",
      RN_DEST));

  Send (result);
}

