materialize(pQList, -1, 0, keys(1, 2)
materialize(pResultTmp, -1, 0, keys(1, 2)
materialize(prov, -1, 0, keys(1, 2, 3)
materialize(rQList, -1, 0, keys(1, 2)
materialize(rResultTmp, -1, 0, keys(1, 2)
materialize(records, -1, 0, keys(1, 2, 3)
materialize(ruleExec, -1, 0, keys(1, 2)
materialize(tuple, -1, 0, keys(1, 2)
prov_q1_1 eprovQueryTemp(@RLOC, Loc, QID, UID, ME, RID, RWeight, R, List) :- periodic(@ME, E, 4, 2), PID1 := f_sha1((((periodic+ ME)+ E)+ 4)+ 2), List := f_append(PID1), tuple(@ME, Name, Loc, X, Y, S), PID2 := f_sha1((((((tuple+ ME)+ Name)+ Loc)+ X)+ Y)+ S), List2 := f_append(PID2), List := f_concat(List, List2), UID := f_sha1((((Name+ Loc)+ X)+ Y)+ S), Time := f_now(), QID := f_sha1((+ UID)+ Time), RLOC := ME, RWeight := 1, R := q1, RID := f_sha1((R+ RLOC)+ List).
prov_q1_2 ruleExec(@RLOC, RID, RWeight, R, List) :- eprovQueryTemp(@RLOC, Loc, QID, UID, ME, RID, RWeight, R, List).
prov_q1_3 eprovQuery(@Loc, QID, UID, ME, RID, RWeight, RLOC) :- eprovQueryTemp(@RLOC, Loc, QID, UID, ME, RID, RWeight, R, List).
prov_q1_4 provQuery(@Loc, QID, UID, ME) :- eprovQuery(@Loc, QID, UID, ME, RID, RWeight, RLOC).
prov_q1_5 prov(@Loc, VID, RID, RLOC, Score) :- eprovQuery(@Loc, QID, UID, ME, RID, RWeight, RLOC), VID := f_sha1((((provQuery+ Loc)+ QID)+ UID)+ ME), Score := -1.
prov_q2_1 erecordsTemp(@RLOC, ME, QID, RID, Prov, $1, RWeight, R, List) :- $1 := RID, pReturn(@ME, QID, RID, Prov), PID1 := f_sha1((((pReturn+ ME)+ QID)+ RID)+ Prov), List := f_append(PID1), RLOC := ME, RWeight := 1, R := q2, RID := f_sha1((R+ RLOC)+ List).
prov_q2_2 ruleExec(@RLOC, $1, RWeight, R, List) :- erecordsTemp(@RLOC, ME, QID, RID, Prov, $1, RWeight, R, List).
prov_q2_3 erecords(@ME, QID, RID, Prov, $1, RWeight, RLOC) :- erecordsTemp(@RLOC, ME, QID, RID, Prov, $1, RWeight, R, List).
prov_q2_4 records(@ME, QID, RID, Prov) :- erecords(@ME, QID, RID, Prov, $1, RWeight, RLOC).
prov_q2_5 prov(@ME, VID, $1, RLOC, Score) :- erecords(@ME, QID, RID, Prov, $1, RWeight, RLOC), VID := f_sha1((((records+ ME)+ QID)+ RID)+ Prov), Score := -1.
prov_edb_1 prov(@ME, VID, RID, RLoc, Score) :- RLoc := ME, tuple(@ME, Name, Loc, X, Y, S), VID := f_sha1((((((tuple+ ME)+ Name)+ Loc)+ X)+ Y)+ S), RID := VID, Score := S.
edb1 pReturn(@Ret, QID, VID, Prov) :- provQuery(@X, QID, VID, Ret), prov(@X, VID, RID, RLoc, Score), RID == VID, Prov := f_pEDB(VID, X).
idb1 pQList(@X, QID, LIST< RID >) :- provQuery(@X, QID, VID, Ret), prov(@X, VID, RID, RLoc, Score), RID != VID.
idb2 pResultTmp(@X, QID, Ret, VID, Buf) :- provQuery(@X, QID, VID, Ret), Buf := f_empty().
idb3 pIterate(@X, QID, N) :- provQuery(@X, QID, VID, Ret), N := 1.
idb4 pIterate(@X, QID, N) :- pIterate(@X, QID, N1), pQList(@X, QID, List), N1 < f_size(List), N := N1+ 1.
idb5 eRuleQuery(@X, NQID, RID) :- pIterate(@X, QID, N), pQList(@X, QID, List), N <= f_size(List), RID := f_item(List, N), NQID := f_sha1((+ QID)+ RID).
idb6 ruleQuery(@RLoc, QID, RID, X) :- eRuleQuery(@X, QID, RID), prov(@X, VID, RID, RLoc, Score).
idb7 pResultTmp(@X, QID, Ret, VID, Buf) :- rReturn(@X, NQID, RID, Prov), pResultTmp(@X, QID, Ret, VID, Buf1), NQID == f_sha1((+ QID)+ RID), Buf2 := f_append(Prov), Buf := f_concat(Buf1, Buf2).
idb8 ePReturn(@X, QID) :- pResultTmp(@X, QID, Ret, VID, Buf), pQList(@X, QID, List), f_size(Buf) == f_size(List), f_size(Buf) != 0.
idb9 pReturn(@Ret, QID, VID, Prov) :- ePReturn(@X, QID), pResultTmp(@X, QID, Ret, VID, Buf), Prov := f_pIDB(Buf, X).
rv1 rQList(@X, QID, List) :- ruleQuery(@X, QID, RID, Ret), ruleExec(@X, RID, RWeight, R, List).
rv2 rResultTmp(@X, QID, Ret, RID, Buf) :- ruleQuery(@X, QID, RID, Ret), Buf := f_empty().
rv3 rIterate(@X, QID, N) :- ruleQuery(@X, QID, RID, Ret), N := 1.
rv4 rIterate(@X, QID, N) :- rIterate(@X, QID, N1), rQList(@X, QID, List), N1 < f_size(List), N := N1+ 1.
rv5 eProvQuery(@X, NQID, VID) :- rIterate(@X, QID, N), rQList(@X, QID, List), VID := f_item(List, N), NQID := f_sha1((+ QID)+ VID).
rv6 provQuery(@X, QID, VID, $1) :- $1 := X, eProvQuery(@X, QID, VID).
rv7 rResultTmp(@X, QID, Ret, RID, Buf) :- pReturn(@X, NQID, VID, Prov), rResultTmp(@X, QID, Ret, RID, Buf1), NQID == f_sha1((+ QID)+ VID), Buf2 := f_append(Prov), Buf := f_concat(Buf1, Buf2).
rv8 eRReturn(@X, QID) :- rResultTmp(@X, QID, Ret, RID, Buf), rQList(@X, QID, List), f_size(Buf) == f_size(List).
rv9 rReturn(@Ret, QID, RID, Prov) :- eRReturn(@X, QID), rResultTmp(@X, QID, Ret, RID, Buf), ruleExec(@X, RID, RWeight, R, List), Prov := f_pRULE(Buf, X, R, RWeight).
