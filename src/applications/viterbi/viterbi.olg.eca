ECA Rule prov_r1_1Eca0Ins ACTION_REMOTE_SEND<ematrixTempTemp(@RLOC, X, ST, OB, N, PM, RID, RWeight, R, List)> :- EVENT_INSERT<transition(@X, ST, ST0, PT)>, emission(@X, OB, ST, PE), observation(@X, OB, N), PID1 := f_sha1(((((((transition+ X)+ ,)+ ST)+ ,)+ ST0)+ ,)+ PT), List := f_append(PID1), PID2 := f_sha1(((((((emission+ X)+ ,)+ OB)+ ,)+ ST)+ ,)+ PE), List2 := f_append(PID2), List := f_concat(List, List2), PID3 := f_sha1(((((observation+ X)+ ,)+ OB)+ ,)+ N), List3 := f_append(PID3), List := f_concat(List, List3), ST0 == START, N == 1, PM := PT* PE, RLOC := X, RWeight := 1, R := r1, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r1_1Eca0Del ACTION_REMOTE_SEND<ematrixTempTempDelete(@RLOC, X, ST, OB, N, PM, RID, RWeight, R, List)> :- EVENT_DELETE<transition(@X, ST, ST0, PT)>, emission(@X, OB, ST, PE), observation(@X, OB, N), PID1 := f_sha1(((((((transition+ X)+ ,)+ ST)+ ,)+ ST0)+ ,)+ PT), List := f_append(PID1), PID2 := f_sha1(((((((emission+ X)+ ,)+ OB)+ ,)+ ST)+ ,)+ PE), List2 := f_append(PID2), List := f_concat(List, List2), PID3 := f_sha1(((((observation+ X)+ ,)+ OB)+ ,)+ N), List3 := f_append(PID3), List := f_concat(List, List3), ST0 == START, N == 1, PM := PT* PE, RLOC := X, RWeight := 1, R := r1, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r1_1Eca3Ins ACTION_REMOTE_SEND<ematrixTempTemp(@RLOC, X, ST, OB, N, PM, RID, RWeight, R, List)> :- EVENT_INSERT<emission(@X, OB, ST, PE)>, transition(@X, ST, ST0, PT), observation(@X, OB, N), PID1 := f_sha1(((((((transition+ X)+ ,)+ ST)+ ,)+ ST0)+ ,)+ PT), List := f_append(PID1), PID2 := f_sha1(((((((emission+ X)+ ,)+ OB)+ ,)+ ST)+ ,)+ PE), List2 := f_append(PID2), List := f_concat(List, List2), PID3 := f_sha1(((((observation+ X)+ ,)+ OB)+ ,)+ N), List3 := f_append(PID3), List := f_concat(List, List3), ST0 == START, N == 1, PM := PT* PE, RLOC := X, RWeight := 1, R := r1, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r1_1Eca3Del ACTION_REMOTE_SEND<ematrixTempTempDelete(@RLOC, X, ST, OB, N, PM, RID, RWeight, R, List)> :- EVENT_DELETE<emission(@X, OB, ST, PE)>, transition(@X, ST, ST0, PT), observation(@X, OB, N), PID1 := f_sha1(((((((transition+ X)+ ,)+ ST)+ ,)+ ST0)+ ,)+ PT), List := f_append(PID1), PID2 := f_sha1(((((((emission+ X)+ ,)+ OB)+ ,)+ ST)+ ,)+ PE), List2 := f_append(PID2), List := f_concat(List, List2), PID3 := f_sha1(((((observation+ X)+ ,)+ OB)+ ,)+ N), List3 := f_append(PID3), List := f_concat(List, List3), ST0 == START, N == 1, PM := PT* PE, RLOC := X, RWeight := 1, R := r1, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r1_1Eca7Ins ACTION_REMOTE_SEND<ematrixTempTemp(@RLOC, X, ST, OB, N, PM, RID, RWeight, R, List)> :- EVENT_INSERT<observation(@X, OB, N)>, transition(@X, ST, ST0, PT), emission(@X, OB, ST, PE), PID1 := f_sha1(((((((transition+ X)+ ,)+ ST)+ ,)+ ST0)+ ,)+ PT), List := f_append(PID1), PID2 := f_sha1(((((((emission+ X)+ ,)+ OB)+ ,)+ ST)+ ,)+ PE), List2 := f_append(PID2), List := f_concat(List, List2), PID3 := f_sha1(((((observation+ X)+ ,)+ OB)+ ,)+ N), List3 := f_append(PID3), List := f_concat(List, List3), ST0 == START, N == 1, PM := PT* PE, RLOC := X, RWeight := 1, R := r1, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r1_1Eca7Del ACTION_REMOTE_SEND<ematrixTempTempDelete(@RLOC, X, ST, OB, N, PM, RID, RWeight, R, List)> :- EVENT_DELETE<observation(@X, OB, N)>, transition(@X, ST, ST0, PT), emission(@X, OB, ST, PE), PID1 := f_sha1(((((((transition+ X)+ ,)+ ST)+ ,)+ ST0)+ ,)+ PT), List := f_append(PID1), PID2 := f_sha1(((((((emission+ X)+ ,)+ OB)+ ,)+ ST)+ ,)+ PE), List2 := f_append(PID2), List := f_concat(List, List2), PID3 := f_sha1(((((observation+ X)+ ,)+ OB)+ ,)+ N), List3 := f_append(PID3), List := f_concat(List, List3), ST0 == START, N == 1, PM := PT* PE, RLOC := X, RWeight := 1, R := r1, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r1_2_ecaAdd ACTION_ADD<ruleExec(@RLOC, RID, RWeight, R, List)> :- EVENT_RECV<ematrixTempTemp(@RLOC, X, ST, OB, N, PM, RID, RWeight, R, List)>.
ECA Rule prov_r1_2_ecaDel ACTION_DELETE<ruleExec(@RLOC, RID, RWeight, R, List)> :- EVENT_RECV<ematrixTempTempDelete(@RLOC, X, ST, OB, N, PM, RID, RWeight, R, List)>.
ECA Rule prov_r1_3_ecaAdd ACTION_REMOTE_SEND<ematrixTemp(@X, ST, OB, N, PM, RID, RWeight, RLOC)> :- EVENT_RECV<ematrixTempTemp(@RLOC, X, ST, OB, N, PM, RID, RWeight, R, List)>.
ECA Rule prov_r1_3_ecaDel ACTION_REMOTE_SEND<ematrixTempDelete(@X, ST, OB, N, PM, RID, RWeight, RLOC)> :- EVENT_RECV<ematrixTempTempDelete(@RLOC, X, ST, OB, N, PM, RID, RWeight, R, List)>.
ECA Rule prov_r1_4_ecaAdd ACTION_ADD<matrixTemp(@X, ST, OB, N, PM)> :- EVENT_RECV<ematrixTemp(@X, ST, OB, N, PM, RID, RWeight, RLOC)>.
ECA Rule prov_r1_4_ecaDel ACTION_DELETE<matrixTemp(@X, ST, OB, N, PM)> :- EVENT_RECV<ematrixTempDelete(@X, ST, OB, N, PM, RID, RWeight, RLOC)>.
ECA Rule prov_r1_5_ecaAdd ACTION_ADD<prov(@X, VID, RID, RLOC, Score)> :- EVENT_RECV<ematrixTemp(@X, ST, OB, N, PM, RID, RWeight, RLOC)>, VID := f_sha1(((((((((matrixTemp+ X)+ ,)+ ST)+ ,)+ OB)+ ,)+ N)+ ,)+ PM), Score := -1.
ECA Rule prov_r1_5_ecaDel ACTION_DELETE<prov(@X, VID, RID, RLOC, Score)> :- EVENT_RECV<ematrixTempDelete(@X, ST, OB, N, PM, RID, RWeight, RLOC)>, VID := f_sha1(((((((((matrixTemp+ X)+ ,)+ ST)+ ,)+ OB)+ ,)+ N)+ ,)+ PM), Score := -1.
ECA Rule prov_r2_1Eca0Ins ACTION_REMOTE_SEND<ematrixTempTemp(@RLOC, X, ST1, OB1, N1, PM1, RID, RWeight, R, List)> :- EVENT_INSERT<matrixTemp(@X, ST0, OB0, N, PM)>, transition(@X, ST1, ST0, PT), emission(@X, OB1, ST1, PE), observation(@X, OB1, N1), PID1 := f_sha1(((((((((matrixTemp+ X)+ ,)+ ST0)+ ,)+ OB0)+ ,)+ N)+ ,)+ PM), List := f_append(PID1), PID2 := f_sha1(((((((transition+ X)+ ,)+ ST1)+ ,)+ ST0)+ ,)+ PT), List2 := f_append(PID2), List := f_concat(List, List2), PID3 := f_sha1(((((((emission+ X)+ ,)+ OB1)+ ,)+ ST1)+ ,)+ PE), List3 := f_append(PID3), List := f_concat(List, List3), PID4 := f_sha1(((((observation+ X)+ ,)+ OB1)+ ,)+ N1), List4 := f_append(PID4), List := f_concat(List, List4), ST0 != START, ST1 != END, N1 == N+ 1, PM1 := (PM* PT)* PE, RLOC := X, RWeight := 1, R := r2, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r2_1Eca0Del ACTION_REMOTE_SEND<ematrixTempTempDelete(@RLOC, X, ST1, OB1, N1, PM1, RID, RWeight, R, List)> :- EVENT_DELETE<matrixTemp(@X, ST0, OB0, N, PM)>, transition(@X, ST1, ST0, PT), emission(@X, OB1, ST1, PE), observation(@X, OB1, N1), PID1 := f_sha1(((((((((matrixTemp+ X)+ ,)+ ST0)+ ,)+ OB0)+ ,)+ N)+ ,)+ PM), List := f_append(PID1), PID2 := f_sha1(((((((transition+ X)+ ,)+ ST1)+ ,)+ ST0)+ ,)+ PT), List2 := f_append(PID2), List := f_concat(List, List2), PID3 := f_sha1(((((((emission+ X)+ ,)+ OB1)+ ,)+ ST1)+ ,)+ PE), List3 := f_append(PID3), List := f_concat(List, List3), PID4 := f_sha1(((((observation+ X)+ ,)+ OB1)+ ,)+ N1), List4 := f_append(PID4), List := f_concat(List, List4), ST0 != START, ST1 != END, N1 == N+ 1, PM1 := (PM* PT)* PE, RLOC := X, RWeight := 1, R := r2, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r2_1Eca3Ins ACTION_REMOTE_SEND<ematrixTempTemp(@RLOC, X, ST1, OB1, N1, PM1, RID, RWeight, R, List)> :- EVENT_INSERT<transition(@X, ST1, ST0, PT)>, matrixTemp(@X, ST0, OB0, N, PM), emission(@X, OB1, ST1, PE), observation(@X, OB1, N1), PID1 := f_sha1(((((((((matrixTemp+ X)+ ,)+ ST0)+ ,)+ OB0)+ ,)+ N)+ ,)+ PM), List := f_append(PID1), PID2 := f_sha1(((((((transition+ X)+ ,)+ ST1)+ ,)+ ST0)+ ,)+ PT), List2 := f_append(PID2), List := f_concat(List, List2), PID3 := f_sha1(((((((emission+ X)+ ,)+ OB1)+ ,)+ ST1)+ ,)+ PE), List3 := f_append(PID3), List := f_concat(List, List3), PID4 := f_sha1(((((observation+ X)+ ,)+ OB1)+ ,)+ N1), List4 := f_append(PID4), List := f_concat(List, List4), ST0 != START, ST1 != END, N1 == N+ 1, PM1 := (PM* PT)* PE, RLOC := X, RWeight := 1, R := r2, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r2_1Eca3Del ACTION_REMOTE_SEND<ematrixTempTempDelete(@RLOC, X, ST1, OB1, N1, PM1, RID, RWeight, R, List)> :- EVENT_DELETE<transition(@X, ST1, ST0, PT)>, matrixTemp(@X, ST0, OB0, N, PM), emission(@X, OB1, ST1, PE), observation(@X, OB1, N1), PID1 := f_sha1(((((((((matrixTemp+ X)+ ,)+ ST0)+ ,)+ OB0)+ ,)+ N)+ ,)+ PM), List := f_append(PID1), PID2 := f_sha1(((((((transition+ X)+ ,)+ ST1)+ ,)+ ST0)+ ,)+ PT), List2 := f_append(PID2), List := f_concat(List, List2), PID3 := f_sha1(((((((emission+ X)+ ,)+ OB1)+ ,)+ ST1)+ ,)+ PE), List3 := f_append(PID3), List := f_concat(List, List3), PID4 := f_sha1(((((observation+ X)+ ,)+ OB1)+ ,)+ N1), List4 := f_append(PID4), List := f_concat(List, List4), ST0 != START, ST1 != END, N1 == N+ 1, PM1 := (PM* PT)* PE, RLOC := X, RWeight := 1, R := r2, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r2_1Eca7Ins ACTION_REMOTE_SEND<ematrixTempTemp(@RLOC, X, ST1, OB1, N1, PM1, RID, RWeight, R, List)> :- EVENT_INSERT<emission(@X, OB1, ST1, PE)>, matrixTemp(@X, ST0, OB0, N, PM), transition(@X, ST1, ST0, PT), observation(@X, OB1, N1), PID1 := f_sha1(((((((((matrixTemp+ X)+ ,)+ ST0)+ ,)+ OB0)+ ,)+ N)+ ,)+ PM), List := f_append(PID1), PID2 := f_sha1(((((((transition+ X)+ ,)+ ST1)+ ,)+ ST0)+ ,)+ PT), List2 := f_append(PID2), List := f_concat(List, List2), PID3 := f_sha1(((((((emission+ X)+ ,)+ OB1)+ ,)+ ST1)+ ,)+ PE), List3 := f_append(PID3), List := f_concat(List, List3), PID4 := f_sha1(((((observation+ X)+ ,)+ OB1)+ ,)+ N1), List4 := f_append(PID4), List := f_concat(List, List4), ST0 != START, ST1 != END, N1 == N+ 1, PM1 := (PM* PT)* PE, RLOC := X, RWeight := 1, R := r2, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r2_1Eca7Del ACTION_REMOTE_SEND<ematrixTempTempDelete(@RLOC, X, ST1, OB1, N1, PM1, RID, RWeight, R, List)> :- EVENT_DELETE<emission(@X, OB1, ST1, PE)>, matrixTemp(@X, ST0, OB0, N, PM), transition(@X, ST1, ST0, PT), observation(@X, OB1, N1), PID1 := f_sha1(((((((((matrixTemp+ X)+ ,)+ ST0)+ ,)+ OB0)+ ,)+ N)+ ,)+ PM), List := f_append(PID1), PID2 := f_sha1(((((((transition+ X)+ ,)+ ST1)+ ,)+ ST0)+ ,)+ PT), List2 := f_append(PID2), List := f_concat(List, List2), PID3 := f_sha1(((((((emission+ X)+ ,)+ OB1)+ ,)+ ST1)+ ,)+ PE), List3 := f_append(PID3), List := f_concat(List, List3), PID4 := f_sha1(((((observation+ X)+ ,)+ OB1)+ ,)+ N1), List4 := f_append(PID4), List := f_concat(List, List4), ST0 != START, ST1 != END, N1 == N+ 1, PM1 := (PM* PT)* PE, RLOC := X, RWeight := 1, R := r2, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r2_1Eca11Ins ACTION_REMOTE_SEND<ematrixTempTemp(@RLOC, X, ST1, OB1, N1, PM1, RID, RWeight, R, List)> :- EVENT_INSERT<observation(@X, OB1, N1)>, matrixTemp(@X, ST0, OB0, N, PM), transition(@X, ST1, ST0, PT), emission(@X, OB1, ST1, PE), PID1 := f_sha1(((((((((matrixTemp+ X)+ ,)+ ST0)+ ,)+ OB0)+ ,)+ N)+ ,)+ PM), List := f_append(PID1), PID2 := f_sha1(((((((transition+ X)+ ,)+ ST1)+ ,)+ ST0)+ ,)+ PT), List2 := f_append(PID2), List := f_concat(List, List2), PID3 := f_sha1(((((((emission+ X)+ ,)+ OB1)+ ,)+ ST1)+ ,)+ PE), List3 := f_append(PID3), List := f_concat(List, List3), PID4 := f_sha1(((((observation+ X)+ ,)+ OB1)+ ,)+ N1), List4 := f_append(PID4), List := f_concat(List, List4), ST0 != START, ST1 != END, N1 == N+ 1, PM1 := (PM* PT)* PE, RLOC := X, RWeight := 1, R := r2, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r2_1Eca11Del ACTION_REMOTE_SEND<ematrixTempTempDelete(@RLOC, X, ST1, OB1, N1, PM1, RID, RWeight, R, List)> :- EVENT_DELETE<observation(@X, OB1, N1)>, matrixTemp(@X, ST0, OB0, N, PM), transition(@X, ST1, ST0, PT), emission(@X, OB1, ST1, PE), PID1 := f_sha1(((((((((matrixTemp+ X)+ ,)+ ST0)+ ,)+ OB0)+ ,)+ N)+ ,)+ PM), List := f_append(PID1), PID2 := f_sha1(((((((transition+ X)+ ,)+ ST1)+ ,)+ ST0)+ ,)+ PT), List2 := f_append(PID2), List := f_concat(List, List2), PID3 := f_sha1(((((((emission+ X)+ ,)+ OB1)+ ,)+ ST1)+ ,)+ PE), List3 := f_append(PID3), List := f_concat(List, List3), PID4 := f_sha1(((((observation+ X)+ ,)+ OB1)+ ,)+ N1), List4 := f_append(PID4), List := f_concat(List, List4), ST0 != START, ST1 != END, N1 == N+ 1, PM1 := (PM* PT)* PE, RLOC := X, RWeight := 1, R := r2, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r3_1Eca0Ins ACTION_REMOTE_SEND<ematrixTempTemp(@RLOC, X, ST1, OB1, N1, PM1, RID, RWeight, R, List)> :- EVENT_INSERT<matrixTemp(@X, ST0, OB0, N, PM)>, transition(@X, ST1, ST0, PT), observation(@X, OB1, N1), PID1 := f_sha1(((((((((matrixTemp+ X)+ ,)+ ST0)+ ,)+ OB0)+ ,)+ N)+ ,)+ PM), List := f_append(PID1), PID2 := f_sha1(((((((transition+ X)+ ,)+ ST1)+ ,)+ ST0)+ ,)+ PT), List2 := f_append(PID2), List := f_concat(List, List2), PID3 := f_sha1(((((observation+ X)+ ,)+ OB1)+ ,)+ N1), List3 := f_append(PID3), List := f_concat(List, List3), ST1 == END, OB1 == END, N1 == N+ 1, PM1 := PM* PT, RLOC := X, RWeight := 1, R := r3, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r3_1Eca0Del ACTION_REMOTE_SEND<ematrixTempTempDelete(@RLOC, X, ST1, OB1, N1, PM1, RID, RWeight, R, List)> :- EVENT_DELETE<matrixTemp(@X, ST0, OB0, N, PM)>, transition(@X, ST1, ST0, PT), observation(@X, OB1, N1), PID1 := f_sha1(((((((((matrixTemp+ X)+ ,)+ ST0)+ ,)+ OB0)+ ,)+ N)+ ,)+ PM), List := f_append(PID1), PID2 := f_sha1(((((((transition+ X)+ ,)+ ST1)+ ,)+ ST0)+ ,)+ PT), List2 := f_append(PID2), List := f_concat(List, List2), PID3 := f_sha1(((((observation+ X)+ ,)+ OB1)+ ,)+ N1), List3 := f_append(PID3), List := f_concat(List, List3), ST1 == END, OB1 == END, N1 == N+ 1, PM1 := PM* PT, RLOC := X, RWeight := 1, R := r3, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r3_1Eca3Ins ACTION_REMOTE_SEND<ematrixTempTemp(@RLOC, X, ST1, OB1, N1, PM1, RID, RWeight, R, List)> :- EVENT_INSERT<transition(@X, ST1, ST0, PT)>, matrixTemp(@X, ST0, OB0, N, PM), observation(@X, OB1, N1), PID1 := f_sha1(((((((((matrixTemp+ X)+ ,)+ ST0)+ ,)+ OB0)+ ,)+ N)+ ,)+ PM), List := f_append(PID1), PID2 := f_sha1(((((((transition+ X)+ ,)+ ST1)+ ,)+ ST0)+ ,)+ PT), List2 := f_append(PID2), List := f_concat(List, List2), PID3 := f_sha1(((((observation+ X)+ ,)+ OB1)+ ,)+ N1), List3 := f_append(PID3), List := f_concat(List, List3), ST1 == END, OB1 == END, N1 == N+ 1, PM1 := PM* PT, RLOC := X, RWeight := 1, R := r3, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r3_1Eca3Del ACTION_REMOTE_SEND<ematrixTempTempDelete(@RLOC, X, ST1, OB1, N1, PM1, RID, RWeight, R, List)> :- EVENT_DELETE<transition(@X, ST1, ST0, PT)>, matrixTemp(@X, ST0, OB0, N, PM), observation(@X, OB1, N1), PID1 := f_sha1(((((((((matrixTemp+ X)+ ,)+ ST0)+ ,)+ OB0)+ ,)+ N)+ ,)+ PM), List := f_append(PID1), PID2 := f_sha1(((((((transition+ X)+ ,)+ ST1)+ ,)+ ST0)+ ,)+ PT), List2 := f_append(PID2), List := f_concat(List, List2), PID3 := f_sha1(((((observation+ X)+ ,)+ OB1)+ ,)+ N1), List3 := f_append(PID3), List := f_concat(List, List3), ST1 == END, OB1 == END, N1 == N+ 1, PM1 := PM* PT, RLOC := X, RWeight := 1, R := r3, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r3_1Eca7Ins ACTION_REMOTE_SEND<ematrixTempTemp(@RLOC, X, ST1, OB1, N1, PM1, RID, RWeight, R, List)> :- EVENT_INSERT<observation(@X, OB1, N1)>, matrixTemp(@X, ST0, OB0, N, PM), transition(@X, ST1, ST0, PT), PID1 := f_sha1(((((((((matrixTemp+ X)+ ,)+ ST0)+ ,)+ OB0)+ ,)+ N)+ ,)+ PM), List := f_append(PID1), PID2 := f_sha1(((((((transition+ X)+ ,)+ ST1)+ ,)+ ST0)+ ,)+ PT), List2 := f_append(PID2), List := f_concat(List, List2), PID3 := f_sha1(((((observation+ X)+ ,)+ OB1)+ ,)+ N1), List3 := f_append(PID3), List := f_concat(List, List3), ST1 == END, OB1 == END, N1 == N+ 1, PM1 := PM* PT, RLOC := X, RWeight := 1, R := r3, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r3_1Eca7Del ACTION_REMOTE_SEND<ematrixTempTempDelete(@RLOC, X, ST1, OB1, N1, PM1, RID, RWeight, R, List)> :- EVENT_DELETE<observation(@X, OB1, N1)>, matrixTemp(@X, ST0, OB0, N, PM), transition(@X, ST1, ST0, PT), PID1 := f_sha1(((((((((matrixTemp+ X)+ ,)+ ST0)+ ,)+ OB0)+ ,)+ N)+ ,)+ PM), List := f_append(PID1), PID2 := f_sha1(((((((transition+ X)+ ,)+ ST1)+ ,)+ ST0)+ ,)+ PT), List2 := f_append(PID2), List := f_concat(List, List2), PID3 := f_sha1(((((observation+ X)+ ,)+ OB1)+ ,)+ N1), List3 := f_append(PID3), List := f_concat(List, List3), ST1 == END, OB1 == END, N1 == N+ 1, PM1 := PM* PT, RLOC := X, RWeight := 1, R := r3, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r4_1Eca0Ins ACTION_REMOTE_SEND<emaxProbTemp(@RLOC, X, ST, OB, N, PM, RID, RWeight, R, List)> :- EVENT_INSERT<matrixTemp(@X, ST, OB, N, PM)>, PID1 := f_sha1(((((((((matrixTemp+ X)+ ,)+ ST)+ ,)+ OB)+ ,)+ N)+ ,)+ PM), List := f_append(PID1), ST == END, OB == END, RLOC := X, RWeight := 1, R := r4, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r4_1Eca0Del ACTION_REMOTE_SEND<emaxProbTempDelete(@RLOC, X, ST, OB, N, PM, RID, RWeight, R, List)> :- EVENT_DELETE<matrixTemp(@X, ST, OB, N, PM)>, PID1 := f_sha1(((((((((matrixTemp+ X)+ ,)+ ST)+ ,)+ OB)+ ,)+ N)+ ,)+ PM), List := f_append(PID1), ST == END, OB == END, RLOC := X, RWeight := 1, R := r4, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r4_2_ecaAdd ACTION_ADD<ruleExec(@RLOC, RID, RWeight, R, List)> :- EVENT_RECV<emaxProbTemp(@RLOC, X, ST, OB, N, PM, RID, RWeight, R, List)>.
ECA Rule prov_r4_2_ecaDel ACTION_DELETE<ruleExec(@RLOC, RID, RWeight, R, List)> :- EVENT_RECV<emaxProbTempDelete(@RLOC, X, ST, OB, N, PM, RID, RWeight, R, List)>.
ECA Rule prov_r4_3_ecaAdd ACTION_REMOTE_SEND<emaxProb(@X, ST, OB, N, PM, RID, RWeight, RLOC)> :- EVENT_RECV<emaxProbTemp(@RLOC, X, ST, OB, N, PM, RID, RWeight, R, List)>.
ECA Rule prov_r4_3_ecaDel ACTION_REMOTE_SEND<emaxProbDelete(@X, ST, OB, N, PM, RID, RWeight, RLOC)> :- EVENT_RECV<emaxProbTempDelete(@RLOC, X, ST, OB, N, PM, RID, RWeight, R, List)>.
ECA Rule prov_r4_4_ecaAdd ACTION_ADD<maxProb(@X, ST, OB, N, PM)> :- EVENT_RECV<emaxProb(@X, ST, OB, N, PM, RID, RWeight, RLOC)>.
ECA Rule prov_r4_4_ecaDel ACTION_DELETE<maxProb(@X, ST, OB, N, PM)> :- EVENT_RECV<emaxProbDelete(@X, ST, OB, N, PM, RID, RWeight, RLOC)>.
ECA Rule prov_r4_5_ecaAdd ACTION_ADD<prov(@X, VID, RID, RLOC, Score)> :- EVENT_RECV<emaxProb(@X, ST, OB, N, PM, RID, RWeight, RLOC)>, VID := f_sha1(((((((((maxProb+ X)+ ,)+ ST)+ ,)+ OB)+ ,)+ N)+ ,)+ PM), Score := -1.
ECA Rule prov_r4_5_ecaDel ACTION_DELETE<prov(@X, VID, RID, RLOC, Score)> :- EVENT_RECV<emaxProbDelete(@X, ST, OB, N, PM, RID, RWeight, RLOC)>, VID := f_sha1(((((((((maxProb+ X)+ ,)+ ST)+ ,)+ OB)+ ,)+ N)+ ,)+ PM), Score := -1.
ECA Rule prov_sr1_1Eca0Ins ACTION_REMOTE_SEND<eshaResultTemp(@RLOC, X, VID, Content, RID, RWeight, R, List)> :- EVENT_INSERT<emission(@X, OB, ST, PE)>, PID1 := f_sha1(((((((emission+ X)+ ,)+ OB)+ ,)+ ST)+ ,)+ PE), List := f_append(PID1), VID := f_sha1(((((((emission+ X)+ ,)+ OB)+ ,)+ ST)+ ,)+ PE), Name := emission, Content := ((((((Name+ ()+ OB)+ ,)+ ST)+ ,)+ PE)+ ), RLOC := X, RWeight := 1, R := sr1, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_sr1_1Eca0Del ACTION_REMOTE_SEND<eshaResultTempDelete(@RLOC, X, VID, Content, RID, RWeight, R, List)> :- EVENT_DELETE<emission(@X, OB, ST, PE)>, PID1 := f_sha1(((((((emission+ X)+ ,)+ OB)+ ,)+ ST)+ ,)+ PE), List := f_append(PID1), VID := f_sha1(((((((emission+ X)+ ,)+ OB)+ ,)+ ST)+ ,)+ PE), Name := emission, Content := ((((((Name+ ()+ OB)+ ,)+ ST)+ ,)+ PE)+ ), RLOC := X, RWeight := 1, R := sr1, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_sr1_2_ecaAdd ACTION_ADD<ruleExec(@RLOC, RID, RWeight, R, List)> :- EVENT_RECV<eshaResultTemp(@RLOC, X, VID, Content, RID, RWeight, R, List)>.
ECA Rule prov_sr1_2_ecaDel ACTION_DELETE<ruleExec(@RLOC, RID, RWeight, R, List)> :- EVENT_RECV<eshaResultTempDelete(@RLOC, X, VID, Content, RID, RWeight, R, List)>.
ECA Rule prov_sr1_3_ecaAdd ACTION_REMOTE_SEND<eshaResult(@X, VID, Content, RID, RWeight, RLOC)> :- EVENT_RECV<eshaResultTemp(@RLOC, X, VID, Content, RID, RWeight, R, List)>.
ECA Rule prov_sr1_3_ecaDel ACTION_REMOTE_SEND<eshaResultDelete(@X, VID, Content, RID, RWeight, RLOC)> :- EVENT_RECV<eshaResultTempDelete(@RLOC, X, VID, Content, RID, RWeight, R, List)>.
ECA Rule prov_sr1_4_ecaAdd ACTION_ADD<shaResult(@X, VID, Content)> :- EVENT_RECV<eshaResult(@X, VID, Content, RID, RWeight, RLOC)>.
ECA Rule prov_sr1_4_ecaDel ACTION_DELETE<shaResult(@X, VID, Content)> :- EVENT_RECV<eshaResultDelete(@X, VID, Content, RID, RWeight, RLOC)>.
ECA Rule prov_sr1_5_ecaAdd ACTION_ADD<prov(@X, VID, RID, RLOC, Score)> :- EVENT_RECV<eshaResult(@X, VID, Content, RID, RWeight, RLOC)>, VID := f_sha1(((((shaResult+ X)+ ,)+ VID)+ ,)+ Content), Score := -1.
ECA Rule prov_sr1_5_ecaDel ACTION_DELETE<prov(@X, VID, RID, RLOC, Score)> :- EVENT_RECV<eshaResultDelete(@X, VID, Content, RID, RWeight, RLOC)>, VID := f_sha1(((((shaResult+ X)+ ,)+ VID)+ ,)+ Content), Score := -1.
ECA Rule prov_sr2_1Eca0Ins ACTION_REMOTE_SEND<eshaResultTemp(@RLOC, X, VID, Content, RID, RWeight, R, List)> :- EVENT_INSERT<transition(@X, ST, ST0, PT)>, PID1 := f_sha1(((((((transition+ X)+ ,)+ ST)+ ,)+ ST0)+ ,)+ PT), List := f_append(PID1), VID := f_sha1(((((((transition+ X)+ ,)+ ST)+ ,)+ ST0)+ ,)+ PT), Name := transition, Content := ((((((Name+ ()+ ST)+ ,)+ ST0)+ ,)+ PT)+ ), RLOC := X, RWeight := 1, R := sr2, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_sr2_1Eca0Del ACTION_REMOTE_SEND<eshaResultTempDelete(@RLOC, X, VID, Content, RID, RWeight, R, List)> :- EVENT_DELETE<transition(@X, ST, ST0, PT)>, PID1 := f_sha1(((((((transition+ X)+ ,)+ ST)+ ,)+ ST0)+ ,)+ PT), List := f_append(PID1), VID := f_sha1(((((((transition+ X)+ ,)+ ST)+ ,)+ ST0)+ ,)+ PT), Name := transition, Content := ((((((Name+ ()+ ST)+ ,)+ ST0)+ ,)+ PT)+ ), RLOC := X, RWeight := 1, R := sr2, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_sr3_1Eca0Ins ACTION_REMOTE_SEND<eshaResultTemp(@RLOC, X, VID, Content, RID, RWeight, R, List)> :- EVENT_INSERT<observation(@X, OB, N)>, PID1 := f_sha1(((((observation+ X)+ ,)+ OB)+ ,)+ N), List := f_append(PID1), VID := f_sha1(((((observation+ X)+ ,)+ OB)+ ,)+ N), Name := observation, Content := ((((Name+ ()+ OB)+ ,)+ N)+ ), RLOC := X, RWeight := 1, R := sr3, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_sr3_1Eca0Del ACTION_REMOTE_SEND<eshaResultTempDelete(@RLOC, X, VID, Content, RID, RWeight, R, List)> :- EVENT_DELETE<observation(@X, OB, N)>, PID1 := f_sha1(((((observation+ X)+ ,)+ OB)+ ,)+ N), List := f_append(PID1), VID := f_sha1(((((observation+ X)+ ,)+ OB)+ ,)+ N), Name := observation, Content := ((((Name+ ()+ OB)+ ,)+ N)+ ), RLOC := X, RWeight := 1, R := sr3, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_sr4_1Eca0Ins ACTION_REMOTE_SEND<eshaResultTemp(@RLOC, X, VID, Content, RID, RWeight, R, List)> :- EVENT_INSERT<matrixTemp(@X, ST, OB, N, PM)>, PID1 := f_sha1(((((((((matrixTemp+ X)+ ,)+ ST)+ ,)+ OB)+ ,)+ N)+ ,)+ PM), List := f_append(PID1), VID := f_sha1(((((((((matrixTemp+ X)+ ,)+ ST)+ ,)+ OB)+ ,)+ N)+ ,)+ PM), Name := matrixTemp, Content := ((((((((Name+ ()+ ST)+ ,)+ OB)+ ,)+ N)+ ,)+ PM)+ ), RLOC := X, RWeight := 1, R := sr4, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_sr4_1Eca0Del ACTION_REMOTE_SEND<eshaResultTempDelete(@RLOC, X, VID, Content, RID, RWeight, R, List)> :- EVENT_DELETE<matrixTemp(@X, ST, OB, N, PM)>, PID1 := f_sha1(((((((((matrixTemp+ X)+ ,)+ ST)+ ,)+ OB)+ ,)+ N)+ ,)+ PM), List := f_append(PID1), VID := f_sha1(((((((((matrixTemp+ X)+ ,)+ ST)+ ,)+ OB)+ ,)+ N)+ ,)+ PM), Name := matrixTemp, Content := ((((((((Name+ ()+ ST)+ ,)+ OB)+ ,)+ N)+ ,)+ PM)+ ), RLOC := X, RWeight := 1, R := sr4, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_sr5_1Eca0Ins ACTION_REMOTE_SEND<eshaResultTemp(@RLOC, X, VID, Content, RID, RWeight, R, List)> :- EVENT_INSERT<maxProb(@X, ST, OB, N, PM)>, PID1 := f_sha1(((((((((maxProb+ X)+ ,)+ ST)+ ,)+ OB)+ ,)+ N)+ ,)+ PM), List := f_append(PID1), VID := f_sha1(((((((((maxProb+ X)+ ,)+ ST)+ ,)+ OB)+ ,)+ N)+ ,)+ PM), Name := maxProb, Content := ((((((((Name+ ()+ ST)+ ,)+ OB)+ ,)+ N)+ ,)+ PM)+ ), RLOC := X, RWeight := 1, R := sr5, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_sr5_1Eca0Del ACTION_REMOTE_SEND<eshaResultTempDelete(@RLOC, X, VID, Content, RID, RWeight, R, List)> :- EVENT_DELETE<maxProb(@X, ST, OB, N, PM)>, PID1 := f_sha1(((((((((maxProb+ X)+ ,)+ ST)+ ,)+ OB)+ ,)+ N)+ ,)+ PM), List := f_append(PID1), VID := f_sha1(((((((((maxProb+ X)+ ,)+ ST)+ ,)+ OB)+ ,)+ N)+ ,)+ PM), Name := maxProb, Content := ((((((((Name+ ()+ ST)+ ,)+ OB)+ ,)+ N)+ ,)+ PM)+ ), RLOC := X, RWeight := 1, R := sr5, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_edb_1Eca1Ins ACTION_ADD<prov(@X, VID, RID, RLoc, Score)> :- EVENT_INSERT<emission(@X, OB, ST, PE)>, RLoc := X, VID := f_sha1((((emission+ X)+ OB)+ ST)+ PE), RID := VID, Score := PE.
ECA Rule prov_edb_1Eca1Del ACTION_DELETE<prov(@X, VID, RID, RLoc, Score)> :- EVENT_DELETE<emission(@X, OB, ST, PE)>, RLoc := X, VID := f_sha1((((emission+ X)+ OB)+ ST)+ PE), RID := VID, Score := PE.
ECA Rule prov_edb_2Eca1Ins ACTION_ADD<prov(@X, VID, RID, RLoc, Score)> :- EVENT_INSERT<observation(@X, OB, N)>, RLoc := X, VID := f_sha1(((observation+ X)+ OB)+ N), RID := VID, Score := N.
ECA Rule prov_edb_2Eca1Del ACTION_DELETE<prov(@X, VID, RID, RLoc, Score)> :- EVENT_DELETE<observation(@X, OB, N)>, RLoc := X, VID := f_sha1(((observation+ X)+ OB)+ N), RID := VID, Score := N.
ECA Rule prov_edb_3Eca1Ins ACTION_ADD<prov(@X, VID, RID, RLoc, Score)> :- EVENT_INSERT<transition(@X, ST, ST0, PT)>, RLoc := X, VID := f_sha1((((transition+ X)+ ST)+ ST0)+ PT), RID := VID, Score := PT.
ECA Rule prov_edb_3Eca1Del ACTION_DELETE<prov(@X, VID, RID, RLoc, Score)> :- EVENT_DELETE<transition(@X, ST, ST0, PT)>, RLoc := X, VID := f_sha1((((transition+ X)+ ST)+ ST0)+ PT), RID := VID, Score := PT.
ECA Rule prep1_eca ACTION_REMOTE_SEND<pReturn(@Ret, QID, VID, Prov)> :- EVENT_RECV<provQuery(@X, QID, VID, P, Ret)>, shaResult(@X, VID, Content), f_size(P) >= 15, Prov := Content.
ECA Rule prep2_eca ACTION_REMOTE_SEND<pReturn(@Ret, QID, VID, Prov)> :- EVENT_RECV<provQuery(@X, QID, VID, P, Ret)>, f_member(P, VID) > 0, Prov := c.
ECA Rule prep3_eca ACTION_LOCAL_SEND<pTempQuery(@X, QID, VID, P, Ret)> :- EVENT_RECV<provQuery(@X, QID, VID, P, Ret)>, f_size(P) < 15, f_member(P, VID) == 0.
ECA Rule prep4_eca ACTION_LOCAL_SEND<tempList(@X, QID, VID, P, Ret, LIST< RID >)> :- EVENT_RECV<pTempQuery(@X, QID, VID, P, Ret)>, prov(@X, VID, RID, RLoc, Score), RID != VID.
ECA Rule edb1_eca ACTION_REMOTE_SEND<pReturn(@Ret, QID, VID, Prov)> :- EVENT_RECV<tempList(@X, QID, VID, P, Ret, List)>, shaResult(@X, VID, Content), f_size(List) == 0, Prov := Content.
ECA Rule idb1_eca ACTION_ADD<pQList(@X, QID, VID, P, List)> :- EVENT_RECV<tempList(@X, QID, VID, P, Ret, List)>, f_size(List) != 0.
ECA Rule idb2_eca ACTION_ADD<pResultTmp(@X, QID, Ret, VID, Buf)> :- EVENT_RECV<tempList(@X, QID, VID, P, Ret, List)>, f_size(List) != 0, Buf := f_empty().
ECA Rule idb3_eca ACTION_LOCAL_SEND<pIterate(@X, QID, N, Ret)> :- EVENT_RECV<tempList(@X, QID, VID, P, Ret, List)>, f_size(List) != 0, N := 1.
ECA Rule idb4_eca ACTION_LOCAL_SEND<pIterate(@X, QID, N, Ret)> :- EVENT_RECV<pIterate(@X, QID, N1, Ret)>, pQList(@X, QID, VID, P, List), N1 < f_size(List), N := N1+ 1.
ECA Rule idb5_eca ACTION_LOCAL_SEND<eRuleQuery(@X, NQID, QID, VID, RID, P, Ret)> :- EVENT_RECV<pIterate(@X, QID, N, Ret)>, pQList(@X, QID, VID, P, List), N <= f_size(List), RID := f_item(List, N), NQID := f_sha1((+ QID)+ RID).
ECA Rule idb6_eca ACTION_LOCAL_SEND<ruleQuery(@X, QID, RID, P, $1)> :- EVENT_RECV<eRuleQuery(@X, QID, OQID, VID, RID, P1, Ret)>, $1 := X, P2 := f_append(VID), P := f_concat(P1, P2).
ECA Rule idb7_eca ACTION_ADD<pResultTmp(@X, QID, Ret, VID, Buf)> :- EVENT_RECV<rReturn(@X, NQID, RID, Prov)>, pResultTmp(@X, QID, Ret, VID, Buf1), NQID == f_sha1((+ QID)+ RID), Buf2 := f_append(Prov), Buf := f_concat(Buf1, Buf2).
ECA Rule idb8Eca0Ins ACTION_LOCAL_SEND<ePReturn(@X, QID)> :- EVENT_INSERT<pResultTmp(@X, QID, Ret, VID, Buf)>, pQList(@X, QID, VID, P, List), f_size(Buf) == f_size(List), f_size(Buf) != 0.
ECA Rule idb8Eca1Ins ACTION_LOCAL_SEND<ePReturn(@X, QID)> :- EVENT_INSERT<pQList(@X, QID, VID, P, List)>, pResultTmp(@X, QID, Ret, VID, Buf), f_size(Buf) == f_size(List), f_size(Buf) != 0.
ECA Rule idb9_eca ACTION_REMOTE_SEND<pReturn(@Ret, QID, VID, Prov)> :- EVENT_RECV<ePReturn(@X, QID)>, pResultTmp(@X, QID, Ret, VID, Buf), Prov := f_pIDB(Buf, X).
ECA Rule rv1_eca ACTION_ADD<rQList(@X, QID, R, RWeight, List, P)> :- EVENT_RECV<ruleQuery(@X, QID, RID, P, Ret)>, ruleExec(@X, RID, RWeight, R, List).
ECA Rule rv2_eca ACTION_ADD<rResultTmp(@X, QID, Ret, RID, Buf)> :- EVENT_RECV<ruleQuery(@X, QID, RID, P, Ret)>, Buf := f_empty().
ECA Rule rv3_eca ACTION_LOCAL_SEND<rIterate(@X, QID, N)> :- EVENT_RECV<ruleQuery(@X, QID, RID, P, Ret)>, N := 1.
ECA Rule rv4_eca ACTION_LOCAL_SEND<rIterate(@X, QID, N)> :- EVENT_RECV<rIterate(@X, QID, N1)>, rQList(@X, QID, R, RWeight, List, P), N1 < f_size(List), N := N1+ 1.
ECA Rule rv5_eca ACTION_LOCAL_SEND<eProvQuery(@X, NQID, VID, P)> :- EVENT_RECV<rIterate(@X, QID, N)>, rQList(@X, QID, R, RWeight, List, P), VID := f_item(List, N), NQID := f_sha1((+ QID)+ VID).
ECA Rule rv6_eca ACTION_LOCAL_SEND<provQuery(@X, QID, VID, P, $1)> :- EVENT_RECV<eProvQuery(@X, QID, VID, P)>, $1 := X.
ECA Rule rv7_eca ACTION_ADD<rResultTmp(@X, QID, Ret, RID, Buf)> :- EVENT_RECV<pReturn(@X, NQID, VID, Prov)>, rResultTmp(@X, QID, Ret, RID, Buf1), NQID == f_sha1((+ QID)+ VID), Buf2 := f_append(Prov), Buf := f_concat(Buf1, Buf2).
ECA Rule rv8Eca0Ins ACTION_LOCAL_SEND<eRReturn(@X, QID, R, RWeight)> :- EVENT_INSERT<rResultTmp(@X, QID, Ret, RID, Buf)>, rQList(@X, QID, R, RWeight, List, P), f_size(Buf) == f_size(List).
ECA Rule rv8Eca1Ins ACTION_LOCAL_SEND<eRReturn(@X, QID, R, RWeight)> :- EVENT_INSERT<rQList(@X, QID, R, RWeight, List, P)>, rResultTmp(@X, QID, Ret, RID, Buf), f_size(Buf) == f_size(List).
ECA Rule rv9_eca ACTION_REMOTE_SEND<rReturn(@Ret, QID, RID, Prov)> :- EVENT_RECV<eRReturn(@X, QID, R, RWeight)>, rResultTmp(@X, QID, Ret, RID, Buf), Prov := f_pRULE(Buf, X, R, RWeight).
