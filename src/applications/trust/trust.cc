/* A RapidNet application. Generated by RapidNet compiler. */

#include "trust.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::trust;

const string Trust::EPRETURN = "ePReturn";
const string Trust::EPROVQUERY = "eProvQuery";
const string Trust::ERRETURN = "eRReturn";
const string Trust::ERULEQUERY = "eRuleQuery";
const string Trust::EMUTUALTRUSTPATH = "emutualTrustPath";
const string Trust::EMUTUALTRUSTPATHDELETE = "emutualTrustPathDelete";
const string Trust::EMUTUALTRUSTPATHTEMP = "emutualTrustPathTemp";
const string Trust::EMUTUALTRUSTPATHTEMPDELETE = "emutualTrustPathTempDelete";
const string Trust::ETRUSTEVENT = "etrustEvent";
const string Trust::ETRUSTEVENTDELETE = "etrustEventDelete";
const string Trust::ETRUSTEVENTTEMP = "etrustEventTemp";
const string Trust::ETRUSTEVENTTEMPDELETE = "etrustEventTempDelete";
const string Trust::ETRUSTPATH = "etrustPath";
const string Trust::ETRUSTPATHDELETE = "etrustPathDelete";
const string Trust::ETRUSTPATHTEMP = "etrustPathTemp";
const string Trust::ETRUSTPATHTEMPDELETE = "etrustPathTempDelete";
const string Trust::MUTUALTRUSTPATH = "mutualTrustPath";
const string Trust::PITERATE = "pIterate";
const string Trust::PQLIST = "pQList";
const string Trust::PRESULTTMP = "pResultTmp";
const string Trust::PRETURN = "pReturn";
const string Trust::PTEMPQUERY = "pTempQuery";
const string Trust::PROV = "prov";
const string Trust::PROVQUERY = "provQuery";
const string Trust::RITERATE = "rIterate";
const string Trust::RQLIST = "rQList";
const string Trust::RRESULTTMP = "rResultTmp";
const string Trust::RRETURN = "rReturn";
const string Trust::RULEEXEC = "ruleExec";
const string Trust::RULEQUERY = "ruleQuery";
const string Trust::TEMPLIST = "tempList";
const string Trust::TRUST = "trust";
const string Trust::TRUSTEVENT = "trustEvent";
const string Trust::TRUSTPATH = "trustPath";

NS_LOG_COMPONENT_DEFINE ("Trust");
NS_OBJECT_ENSURE_REGISTERED (Trust);

TypeId
Trust::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::trust::Trust")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<Trust> ()
    ;
  return tid;
}

Trust::Trust()
{
  NS_LOG_FUNCTION_NOARGS ();
}

Trust::~Trust()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
Trust::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
Trust::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("Trust Application Started");
}

void
Trust::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("Trust Application Stopped");
}

void
Trust::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (MUTUALTRUSTPATH, attrdeflist (
    attrdef ("mutualTrustPath_attr1", IPV4),
    attrdef ("mutualTrustPath_attr2", INT32),
    attrdef ("mutualTrustPath_attr3", INT32)));

  AddRelationWithKeys (PQLIST, attrdeflist (
    attrdef ("pQList_attr1", IPV4),
    attrdef ("pQList_attr2", ID)));

  AddRelationWithKeys (PRESULTTMP, attrdeflist (
    attrdef ("pResultTmp_attr1", IPV4),
    attrdef ("pResultTmp_attr2", ID)));

  AddRelationWithKeys (PROV, attrdeflist (
    attrdef ("prov_attr1", IPV4),
    attrdef ("prov_attr2", ID),
    attrdef ("prov_attr3", ID)));

  AddRelationWithKeys (RQLIST, attrdeflist (
    attrdef ("rQList_attr1", IPV4),
    attrdef ("rQList_attr2", ID)));

  AddRelationWithKeys (RRESULTTMP, attrdeflist (
    attrdef ("rResultTmp_attr1", IPV4),
    attrdef ("rResultTmp_attr2", ID)));

  AddRelationWithKeys (RULEEXEC, attrdeflist (
    attrdef ("ruleExec_attr1", IPV4),
    attrdef ("ruleExec_attr2", ID)));

  AddRelationWithKeys (TRUST, attrdeflist (
    attrdef ("trust_attr1", IPV4),
    attrdef ("trust_attr2", INT32),
    attrdef ("trust_attr3", INT32)));

  AddRelationWithKeys (TRUSTEVENT, attrdeflist (
    attrdef ("trustEvent_attr1", IPV4),
    attrdef ("trustEvent_attr2", INT32),
    attrdef ("trustEvent_attr3", INT32)));

  AddRelationWithKeys (TRUSTPATH, attrdeflist (
    attrdef ("trustPath_attr1", IPV4),
    attrdef ("trustPath_attr2", INT32),
    attrdef ("trustPath_attr3", INT32)));

}

void
Trust::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsInsertEvent (tuple, TRUSTPATH))
    {
      Prov_ra_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, TRUSTPATH))
    {
      Prov_ra_1Eca0Del (tuple);
    }
  if (IsRecvEvent (tuple, ETRUSTEVENTTEMP))
    {
      Prov_ra_2_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ETRUSTEVENTTEMPDELETE))
    {
      Prov_ra_2_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ETRUSTEVENTTEMP))
    {
      Prov_ra_3_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ETRUSTEVENTTEMPDELETE))
    {
      Prov_ra_3_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ETRUSTEVENT))
    {
      Prov_ra_4_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ETRUSTEVENTDELETE))
    {
      Prov_ra_4_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ETRUSTEVENT))
    {
      Prov_ra_5_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ETRUSTEVENTDELETE))
    {
      Prov_ra_5_ecaDel (tuple);
    }
  if (IsInsertEvent (tuple, TRUST))
    {
      Prov_r1_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, TRUST))
    {
      Prov_r1_1Eca0Del (tuple);
    }
  if (IsRecvEvent (tuple, ETRUSTPATHTEMP))
    {
      Prov_r1_2_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ETRUSTPATHTEMPDELETE))
    {
      Prov_r1_2_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ETRUSTPATHTEMP))
    {
      Prov_r1_3_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ETRUSTPATHTEMPDELETE))
    {
      Prov_r1_3_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ETRUSTPATH))
    {
      Prov_r1_4_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ETRUSTPATHDELETE))
    {
      Prov_r1_4_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ETRUSTPATH))
    {
      Prov_r1_5_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ETRUSTPATHDELETE))
    {
      Prov_r1_5_ecaDel (tuple);
    }
  if (IsInsertEvent (tuple, TRUST))
    {
      Prov_r2_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, TRUST))
    {
      Prov_r2_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, TRUSTPATH))
    {
      Prov_r2_1Eca3Ins (tuple);
    }
  if (IsDeleteEvent (tuple, TRUSTPATH))
    {
      Prov_r2_1Eca3Del (tuple);
    }
  if (IsInsertEvent (tuple, TRUSTEVENT))
    {
      Prov_r3_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, TRUSTEVENT))
    {
      Prov_r3_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, TRUSTPATH))
    {
      Prov_r3_1Eca3Ins (tuple);
    }
  if (IsDeleteEvent (tuple, TRUSTPATH))
    {
      Prov_r3_1Eca3Del (tuple);
    }
  if (IsRecvEvent (tuple, EMUTUALTRUSTPATHTEMP))
    {
      Prov_r3_2_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EMUTUALTRUSTPATHTEMPDELETE))
    {
      Prov_r3_2_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EMUTUALTRUSTPATHTEMP))
    {
      Prov_r3_3_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EMUTUALTRUSTPATHTEMPDELETE))
    {
      Prov_r3_3_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EMUTUALTRUSTPATH))
    {
      Prov_r3_4_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EMUTUALTRUSTPATHDELETE))
    {
      Prov_r3_4_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EMUTUALTRUSTPATH))
    {
      Prov_r3_5_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EMUTUALTRUSTPATHDELETE))
    {
      Prov_r3_5_ecaDel (tuple);
    }
  if (IsInsertEvent (tuple, TRUST))
    {
      Prov_edb_1Eca1Ins (tuple);
    }
  if (IsDeleteEvent (tuple, TRUST))
    {
      Prov_edb_1Eca1Del (tuple);
    }
  if (IsRecvEvent (tuple, PROVQUERY))
    {
      Prep1_eca (tuple);
    }
  if (IsRecvEvent (tuple, PROVQUERY))
    {
      Prep2_eca (tuple);
    }
  if (IsRecvEvent (tuple, PROVQUERY))
    {
      Prep3_eca (tuple);
    }
  if (IsRecvEvent (tuple, PTEMPQUERY))
    {
      Prep4_eca (tuple);
    }
  if (IsRecvEvent (tuple, TEMPLIST))
    {
      Edb1_eca (tuple);
    }
  if (IsRecvEvent (tuple, TEMPLIST))
    {
      Idb1_eca (tuple);
    }
  if (IsRecvEvent (tuple, TEMPLIST))
    {
      Idb2_eca (tuple);
    }
  if (IsRecvEvent (tuple, TEMPLIST))
    {
      Idb3_eca (tuple);
    }
  if (IsRecvEvent (tuple, PITERATE))
    {
      Idb4_eca (tuple);
    }
  if (IsRecvEvent (tuple, PITERATE))
    {
      Idb5_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERULEQUERY))
    {
      Idb6_eca (tuple);
    }
  if (IsRecvEvent (tuple, RRETURN))
    {
      Idb7_eca (tuple);
    }
  if (IsInsertEvent (tuple, PRESULTTMP))
    {
      Idb8Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, PQLIST))
    {
      Idb8Eca1Ins (tuple);
    }
  if (IsRecvEvent (tuple, EPRETURN))
    {
      Idb9_eca (tuple);
    }
  if (IsRecvEvent (tuple, RULEQUERY))
    {
      Rv1_eca (tuple);
    }
  if (IsRecvEvent (tuple, RULEQUERY))
    {
      Rv2_eca (tuple);
    }
  if (IsRecvEvent (tuple, RULEQUERY))
    {
      Rv3_eca (tuple);
    }
  if (IsRecvEvent (tuple, RITERATE))
    {
      Rv4_eca (tuple);
    }
  if (IsRecvEvent (tuple, RITERATE))
    {
      Rv5_eca (tuple);
    }
  if (IsRecvEvent (tuple, EPROVQUERY))
    {
      Rv6_eca (tuple);
    }
  if (IsRecvEvent (tuple, PRETURN))
    {
      Rv7_eca (tuple);
    }
  if (IsInsertEvent (tuple, RRESULTTMP))
    {
      Rv8Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, RQLIST))
    {
      Rv8Eca1Ins (tuple);
    }
  if (IsRecvEvent (tuple, ERRETURN))
    {
      Rv9_eca (tuple);
    }
}

void
Trust::Prov_ra_1Eca0Ins (Ptr<Tuple> trustPath)
{
  RAPIDNET_LOG_INFO ("Prov_ra_1Eca0Ins triggered");

  Ptr<Tuple> result = trustPath;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("trustPath")),
                VarExpr::New ("trustPath_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("trustPath_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("trustPath_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("trustPath_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("ra"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ETRUSTEVENTTEMP,
    strlist ("RLOC",
      "Local",
      "trustPath_attr2",
      "trustPath_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("etrustEventTemp_attr1",
      "etrustEventTemp_attr2",
      "etrustEventTemp_attr3",
      "etrustEventTemp_attr4",
      "etrustEventTemp_attr5",
      "etrustEventTemp_attr6",
      "etrustEventTemp_attr7",
      "etrustEventTemp_attr8",
      RN_DEST));

  Send (result);
}

void
Trust::Prov_ra_1Eca0Del (Ptr<Tuple> trustPath)
{
  RAPIDNET_LOG_INFO ("Prov_ra_1Eca0Del triggered");

  Ptr<Tuple> result = trustPath;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("trustPath")),
                VarExpr::New ("trustPath_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("trustPath_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("trustPath_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("trustPath_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("ra"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ETRUSTEVENTTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "trustPath_attr2",
      "trustPath_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("etrustEventTempDelete_attr1",
      "etrustEventTempDelete_attr2",
      "etrustEventTempDelete_attr3",
      "etrustEventTempDelete_attr4",
      "etrustEventTempDelete_attr5",
      "etrustEventTempDelete_attr6",
      "etrustEventTempDelete_attr7",
      "etrustEventTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
Trust::Prov_ra_2_ecaAdd (Ptr<Tuple> etrustEventTemp)
{
  RAPIDNET_LOG_INFO ("Prov_ra_2_ecaAdd triggered");

  Ptr<Tuple> result = etrustEventTemp;

  result = result->Project (
    RULEEXEC,
    strlist ("etrustEventTemp_attr1",
      "etrustEventTemp_attr5",
      "etrustEventTemp_attr6",
      "etrustEventTemp_attr7",
      "etrustEventTemp_attr8"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Insert (result);
}

void
Trust::Prov_ra_2_ecaDel (Ptr<Tuple> etrustEventTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_ra_2_ecaDel triggered");

  Ptr<Tuple> result = etrustEventTempDelete;

  result = result->Project (
    RULEEXEC,
    strlist ("etrustEventTempDelete_attr1",
      "etrustEventTempDelete_attr5",
      "etrustEventTempDelete_attr6",
      "etrustEventTempDelete_attr7",
      "etrustEventTempDelete_attr8"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Delete (result);
}

void
Trust::Prov_ra_3_ecaAdd (Ptr<Tuple> etrustEventTemp)
{
  RAPIDNET_LOG_INFO ("Prov_ra_3_ecaAdd triggered");

  Ptr<Tuple> result = etrustEventTemp;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ETRUSTEVENT,
    strlist ("Local",
      "etrustEventTemp_attr3",
      "etrustEventTemp_attr4",
      "etrustEventTemp_attr5",
      "etrustEventTemp_attr6",
      "etrustEventTemp_attr1",
      "Local"),
    strlist ("etrustEvent_attr1",
      "etrustEvent_attr2",
      "etrustEvent_attr3",
      "etrustEvent_attr4",
      "etrustEvent_attr5",
      "etrustEvent_attr6",
      RN_DEST));

  Send (result);
}

void
Trust::Prov_ra_3_ecaDel (Ptr<Tuple> etrustEventTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_ra_3_ecaDel triggered");

  Ptr<Tuple> result = etrustEventTempDelete;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ETRUSTEVENTDELETE,
    strlist ("Local",
      "etrustEventTempDelete_attr3",
      "etrustEventTempDelete_attr4",
      "etrustEventTempDelete_attr5",
      "etrustEventTempDelete_attr6",
      "etrustEventTempDelete_attr1",
      "Local"),
    strlist ("etrustEventDelete_attr1",
      "etrustEventDelete_attr2",
      "etrustEventDelete_attr3",
      "etrustEventDelete_attr4",
      "etrustEventDelete_attr5",
      "etrustEventDelete_attr6",
      RN_DEST));

  Send (result);
}

void
Trust::Prov_ra_4_ecaAdd (Ptr<Tuple> etrustEvent)
{
  RAPIDNET_LOG_INFO ("Prov_ra_4_ecaAdd triggered");

  Ptr<Tuple> result = etrustEvent;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    TRUSTEVENT,
    strlist ("Local",
      "etrustEvent_attr2",
      "etrustEvent_attr3"),
    strlist ("trustEvent_attr1",
      "trustEvent_attr2",
      "trustEvent_attr3"));

  Insert (result);
}

void
Trust::Prov_ra_4_ecaDel (Ptr<Tuple> etrustEventDelete)
{
  RAPIDNET_LOG_INFO ("Prov_ra_4_ecaDel triggered");

  Ptr<Tuple> result = etrustEventDelete;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    TRUSTEVENT,
    strlist ("Local",
      "etrustEventDelete_attr2",
      "etrustEventDelete_attr3"),
    strlist ("trustEvent_attr1",
      "trustEvent_attr2",
      "trustEvent_attr3"));

  Delete (result);
}

void
Trust::Prov_ra_5_ecaAdd (Ptr<Tuple> etrustEvent)
{
  RAPIDNET_LOG_INFO ("Prov_ra_5_ecaAdd triggered");

  Ptr<Tuple> result = etrustEvent;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("trustEvent")),
                VarExpr::New ("etrustEvent_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("etrustEvent_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("etrustEvent_attr3")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "etrustEvent_attr4",
      "etrustEvent_attr6",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Insert (result);
}

void
Trust::Prov_ra_5_ecaDel (Ptr<Tuple> etrustEventDelete)
{
  RAPIDNET_LOG_INFO ("Prov_ra_5_ecaDel triggered");

  Ptr<Tuple> result = etrustEventDelete;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("trustEvent")),
                VarExpr::New ("etrustEventDelete_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("etrustEventDelete_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("etrustEventDelete_attr3")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "etrustEventDelete_attr4",
      "etrustEventDelete_attr6",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Delete (result);
}

void
Trust::Prov_r1_1Eca0Ins (Ptr<Tuple> trust)
{
  RAPIDNET_LOG_INFO ("Prov_r1_1Eca0Ins triggered");

  Ptr<Tuple> result = trust;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("trust")),
                VarExpr::New ("trust_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("trust_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("trust_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("trust_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ETRUSTPATHTEMP,
    strlist ("RLOC",
      "Local",
      "trust_attr2",
      "trust_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("etrustPathTemp_attr1",
      "etrustPathTemp_attr2",
      "etrustPathTemp_attr3",
      "etrustPathTemp_attr4",
      "etrustPathTemp_attr5",
      "etrustPathTemp_attr6",
      "etrustPathTemp_attr7",
      "etrustPathTemp_attr8",
      RN_DEST));

  Send (result);
}

void
Trust::Prov_r1_1Eca0Del (Ptr<Tuple> trust)
{
  RAPIDNET_LOG_INFO ("Prov_r1_1Eca0Del triggered");

  Ptr<Tuple> result = trust;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("trust")),
                VarExpr::New ("trust_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("trust_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("trust_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("trust_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ETRUSTPATHTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "trust_attr2",
      "trust_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("etrustPathTempDelete_attr1",
      "etrustPathTempDelete_attr2",
      "etrustPathTempDelete_attr3",
      "etrustPathTempDelete_attr4",
      "etrustPathTempDelete_attr5",
      "etrustPathTempDelete_attr6",
      "etrustPathTempDelete_attr7",
      "etrustPathTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
Trust::Prov_r1_2_ecaAdd (Ptr<Tuple> etrustPathTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r1_2_ecaAdd triggered");

  Ptr<Tuple> result = etrustPathTemp;

  result = result->Project (
    RULEEXEC,
    strlist ("etrustPathTemp_attr1",
      "etrustPathTemp_attr5",
      "etrustPathTemp_attr6",
      "etrustPathTemp_attr7",
      "etrustPathTemp_attr8"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Insert (result);
}

void
Trust::Prov_r1_2_ecaDel (Ptr<Tuple> etrustPathTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r1_2_ecaDel triggered");

  Ptr<Tuple> result = etrustPathTempDelete;

  result = result->Project (
    RULEEXEC,
    strlist ("etrustPathTempDelete_attr1",
      "etrustPathTempDelete_attr5",
      "etrustPathTempDelete_attr6",
      "etrustPathTempDelete_attr7",
      "etrustPathTempDelete_attr8"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Delete (result);
}

void
Trust::Prov_r1_3_ecaAdd (Ptr<Tuple> etrustPathTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r1_3_ecaAdd triggered");

  Ptr<Tuple> result = etrustPathTemp;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ETRUSTPATH,
    strlist ("Local",
      "etrustPathTemp_attr3",
      "etrustPathTemp_attr4",
      "etrustPathTemp_attr5",
      "etrustPathTemp_attr6",
      "etrustPathTemp_attr1",
      "Local"),
    strlist ("etrustPath_attr1",
      "etrustPath_attr2",
      "etrustPath_attr3",
      "etrustPath_attr4",
      "etrustPath_attr5",
      "etrustPath_attr6",
      RN_DEST));

  Send (result);
}

void
Trust::Prov_r1_3_ecaDel (Ptr<Tuple> etrustPathTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r1_3_ecaDel triggered");

  Ptr<Tuple> result = etrustPathTempDelete;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    ETRUSTPATHDELETE,
    strlist ("Local",
      "etrustPathTempDelete_attr3",
      "etrustPathTempDelete_attr4",
      "etrustPathTempDelete_attr5",
      "etrustPathTempDelete_attr6",
      "etrustPathTempDelete_attr1",
      "Local"),
    strlist ("etrustPathDelete_attr1",
      "etrustPathDelete_attr2",
      "etrustPathDelete_attr3",
      "etrustPathDelete_attr4",
      "etrustPathDelete_attr5",
      "etrustPathDelete_attr6",
      RN_DEST));

  Send (result);
}

void
Trust::Prov_r1_4_ecaAdd (Ptr<Tuple> etrustPath)
{
  RAPIDNET_LOG_INFO ("Prov_r1_4_ecaAdd triggered");

  Ptr<Tuple> result = etrustPath;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    TRUSTPATH,
    strlist ("Local",
      "etrustPath_attr2",
      "etrustPath_attr3"),
    strlist ("trustPath_attr1",
      "trustPath_attr2",
      "trustPath_attr3"));

  Insert (result);
}

void
Trust::Prov_r1_4_ecaDel (Ptr<Tuple> etrustPathDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r1_4_ecaDel triggered");

  Ptr<Tuple> result = etrustPathDelete;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    TRUSTPATH,
    strlist ("Local",
      "etrustPathDelete_attr2",
      "etrustPathDelete_attr3"),
    strlist ("trustPath_attr1",
      "trustPath_attr2",
      "trustPath_attr3"));

  Delete (result);
}

void
Trust::Prov_r1_5_ecaAdd (Ptr<Tuple> etrustPath)
{
  RAPIDNET_LOG_INFO ("Prov_r1_5_ecaAdd triggered");

  Ptr<Tuple> result = etrustPath;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("trustPath")),
                VarExpr::New ("etrustPath_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("etrustPath_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("etrustPath_attr3")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "etrustPath_attr4",
      "etrustPath_attr6",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Insert (result);
}

void
Trust::Prov_r1_5_ecaDel (Ptr<Tuple> etrustPathDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r1_5_ecaDel triggered");

  Ptr<Tuple> result = etrustPathDelete;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("trustPath")),
                VarExpr::New ("etrustPathDelete_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("etrustPathDelete_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("etrustPathDelete_attr3")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "etrustPathDelete_attr4",
      "etrustPathDelete_attr6",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Delete (result);
}

void
Trust::Prov_r2_1Eca0Ins (Ptr<Tuple> trust)
{
  RAPIDNET_LOG_INFO ("Prov_r2_1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (TRUSTPATH)->Join (
    trust,
    strlist ("trustPath_attr1", "trustPath_attr2"),
    strlist ("trust_attr1", "trust_attr3"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("trust")),
                VarExpr::New ("trust_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("trust_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("trust_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("trustPath")),
                VarExpr::New ("trust_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("trust_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("trustPath_attr3")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("trust_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("trust_attr2"),
      VarExpr::New ("trustPath_attr3"))));

  result = result->Project (
    ETRUSTPATHTEMP,
    strlist ("RLOC",
      "Local",
      "trust_attr2",
      "trustPath_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("etrustPathTemp_attr1",
      "etrustPathTemp_attr2",
      "etrustPathTemp_attr3",
      "etrustPathTemp_attr4",
      "etrustPathTemp_attr5",
      "etrustPathTemp_attr6",
      "etrustPathTemp_attr7",
      "etrustPathTemp_attr8",
      RN_DEST));

  Send (result);
}

void
Trust::Prov_r2_1Eca0Del (Ptr<Tuple> trust)
{
  RAPIDNET_LOG_INFO ("Prov_r2_1Eca0Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (TRUSTPATH)->Join (
    trust,
    strlist ("trustPath_attr1", "trustPath_attr2"),
    strlist ("trust_attr1", "trust_attr3"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("trust")),
                VarExpr::New ("trust_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("trust_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("trust_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("trustPath")),
                VarExpr::New ("trust_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("trust_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("trustPath_attr3")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("trust_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("trust_attr2"),
      VarExpr::New ("trustPath_attr3"))));

  result = result->Project (
    ETRUSTPATHTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "trust_attr2",
      "trustPath_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("etrustPathTempDelete_attr1",
      "etrustPathTempDelete_attr2",
      "etrustPathTempDelete_attr3",
      "etrustPathTempDelete_attr4",
      "etrustPathTempDelete_attr5",
      "etrustPathTempDelete_attr6",
      "etrustPathTempDelete_attr7",
      "etrustPathTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
Trust::Prov_r2_1Eca3Ins (Ptr<Tuple> trustPath)
{
  RAPIDNET_LOG_INFO ("Prov_r2_1Eca3Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (TRUST)->Join (
    trustPath,
    strlist ("trust_attr1", "trust_attr3"),
    strlist ("trustPath_attr1", "trustPath_attr2"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("trust")),
                VarExpr::New ("trustPath_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("trust_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("trustPath_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("trustPath")),
                VarExpr::New ("trustPath_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("trustPath_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("trustPath_attr3")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("trustPath_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("trust_attr2"),
      VarExpr::New ("trustPath_attr3"))));

  result = result->Project (
    ETRUSTPATHTEMP,
    strlist ("RLOC",
      "Local",
      "trust_attr2",
      "trustPath_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("etrustPathTemp_attr1",
      "etrustPathTemp_attr2",
      "etrustPathTemp_attr3",
      "etrustPathTemp_attr4",
      "etrustPathTemp_attr5",
      "etrustPathTemp_attr6",
      "etrustPathTemp_attr7",
      "etrustPathTemp_attr8",
      RN_DEST));

  Send (result);
}

void
Trust::Prov_r2_1Eca3Del (Ptr<Tuple> trustPath)
{
  RAPIDNET_LOG_INFO ("Prov_r2_1Eca3Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (TRUST)->Join (
    trustPath,
    strlist ("trust_attr1", "trust_attr3"),
    strlist ("trustPath_attr1", "trustPath_attr2"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("trust")),
                VarExpr::New ("trustPath_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("trust_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("trustPath_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("trustPath")),
                VarExpr::New ("trustPath_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("trustPath_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("trustPath_attr3")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("trustPath_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (1))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("trust_attr2"),
      VarExpr::New ("trustPath_attr3"))));

  result = result->Project (
    ETRUSTPATHTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "trust_attr2",
      "trustPath_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("etrustPathTempDelete_attr1",
      "etrustPathTempDelete_attr2",
      "etrustPathTempDelete_attr3",
      "etrustPathTempDelete_attr4",
      "etrustPathTempDelete_attr5",
      "etrustPathTempDelete_attr6",
      "etrustPathTempDelete_attr7",
      "etrustPathTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
Trust::Prov_r3_1Eca0Ins (Ptr<Tuple> trustEvent)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (TRUSTPATH)->Join (
    trustEvent,
    strlist ("trustPath_attr1", "trustPath_attr3", "trustPath_attr2"),
    strlist ("trustEvent_attr1", "trustEvent_attr2", "trustEvent_attr3"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("trustEvent")),
                VarExpr::New ("trustEvent_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("trustEvent_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("trustEvent_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("trustPath")),
                VarExpr::New ("trustEvent_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("trustEvent_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("trustEvent_attr2")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("trustEvent_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (0.8))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    EMUTUALTRUSTPATHTEMP,
    strlist ("RLOC",
      "Local",
      "trustEvent_attr2",
      "trustEvent_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("emutualTrustPathTemp_attr1",
      "emutualTrustPathTemp_attr2",
      "emutualTrustPathTemp_attr3",
      "emutualTrustPathTemp_attr4",
      "emutualTrustPathTemp_attr5",
      "emutualTrustPathTemp_attr6",
      "emutualTrustPathTemp_attr7",
      "emutualTrustPathTemp_attr8",
      RN_DEST));

  Send (result);
}

void
Trust::Prov_r3_1Eca0Del (Ptr<Tuple> trustEvent)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1Eca0Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (TRUSTPATH)->Join (
    trustEvent,
    strlist ("trustPath_attr1", "trustPath_attr3", "trustPath_attr2"),
    strlist ("trustEvent_attr1", "trustEvent_attr2", "trustEvent_attr3"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("trustEvent")),
                VarExpr::New ("trustEvent_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("trustEvent_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("trustEvent_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("trustPath")),
                VarExpr::New ("trustEvent_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("trustEvent_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("trustEvent_attr2")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("trustEvent_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (0.8))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    EMUTUALTRUSTPATHTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "trustEvent_attr2",
      "trustEvent_attr3",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("emutualTrustPathTempDelete_attr1",
      "emutualTrustPathTempDelete_attr2",
      "emutualTrustPathTempDelete_attr3",
      "emutualTrustPathTempDelete_attr4",
      "emutualTrustPathTempDelete_attr5",
      "emutualTrustPathTempDelete_attr6",
      "emutualTrustPathTempDelete_attr7",
      "emutualTrustPathTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
Trust::Prov_r3_1Eca3Ins (Ptr<Tuple> trustPath)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1Eca3Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (TRUSTEVENT)->Join (
    trustPath,
    strlist ("trustEvent_attr1", "trustEvent_attr2", "trustEvent_attr3"),
    strlist ("trustPath_attr1", "trustPath_attr3", "trustPath_attr2"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("trustEvent")),
                VarExpr::New ("trustPath_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("trustPath_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("trustPath_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("trustPath")),
                VarExpr::New ("trustPath_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("trustPath_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("trustPath_attr3")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("trustPath_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (0.8))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    EMUTUALTRUSTPATHTEMP,
    strlist ("RLOC",
      "Local",
      "trustPath_attr3",
      "trustPath_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("emutualTrustPathTemp_attr1",
      "emutualTrustPathTemp_attr2",
      "emutualTrustPathTemp_attr3",
      "emutualTrustPathTemp_attr4",
      "emutualTrustPathTemp_attr5",
      "emutualTrustPathTemp_attr6",
      "emutualTrustPathTemp_attr7",
      "emutualTrustPathTemp_attr8",
      RN_DEST));

  Send (result);
}

void
Trust::Prov_r3_1Eca3Del (Ptr<Tuple> trustPath)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1Eca3Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (TRUSTEVENT)->Join (
    trustPath,
    strlist ("trustEvent_attr1", "trustEvent_attr2", "trustEvent_attr3"),
    strlist ("trustPath_attr1", "trustPath_attr3", "trustPath_attr2"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("trustEvent")),
                VarExpr::New ("trustPath_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("trustPath_attr3")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("trustPath_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("trustPath")),
                VarExpr::New ("trustPath_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("trustPath_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("trustPath_attr3")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("trustPath_attr1")));

  result->Assign (Assignor::New ("RWeight",
    ValueExpr::New (RealValue::New (0.8))));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    EMUTUALTRUSTPATHTEMPDELETE,
    strlist ("RLOC",
      "Local",
      "trustPath_attr3",
      "trustPath_attr2",
      "RID",
      "RWeight",
      "R",
      "List",
      "RLOC"),
    strlist ("emutualTrustPathTempDelete_attr1",
      "emutualTrustPathTempDelete_attr2",
      "emutualTrustPathTempDelete_attr3",
      "emutualTrustPathTempDelete_attr4",
      "emutualTrustPathTempDelete_attr5",
      "emutualTrustPathTempDelete_attr6",
      "emutualTrustPathTempDelete_attr7",
      "emutualTrustPathTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
Trust::Prov_r3_2_ecaAdd (Ptr<Tuple> emutualTrustPathTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r3_2_ecaAdd triggered");

  Ptr<Tuple> result = emutualTrustPathTemp;

  result = result->Project (
    RULEEXEC,
    strlist ("emutualTrustPathTemp_attr1",
      "emutualTrustPathTemp_attr5",
      "emutualTrustPathTemp_attr6",
      "emutualTrustPathTemp_attr7",
      "emutualTrustPathTemp_attr8"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Insert (result);
}

void
Trust::Prov_r3_2_ecaDel (Ptr<Tuple> emutualTrustPathTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r3_2_ecaDel triggered");

  Ptr<Tuple> result = emutualTrustPathTempDelete;

  result = result->Project (
    RULEEXEC,
    strlist ("emutualTrustPathTempDelete_attr1",
      "emutualTrustPathTempDelete_attr5",
      "emutualTrustPathTempDelete_attr6",
      "emutualTrustPathTempDelete_attr7",
      "emutualTrustPathTempDelete_attr8"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4",
      "ruleExec_attr5"));

  Delete (result);
}

void
Trust::Prov_r3_3_ecaAdd (Ptr<Tuple> emutualTrustPathTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r3_3_ecaAdd triggered");

  Ptr<Tuple> result = emutualTrustPathTemp;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    EMUTUALTRUSTPATH,
    strlist ("Local",
      "emutualTrustPathTemp_attr3",
      "emutualTrustPathTemp_attr4",
      "emutualTrustPathTemp_attr5",
      "emutualTrustPathTemp_attr6",
      "emutualTrustPathTemp_attr1",
      "Local"),
    strlist ("emutualTrustPath_attr1",
      "emutualTrustPath_attr2",
      "emutualTrustPath_attr3",
      "emutualTrustPath_attr4",
      "emutualTrustPath_attr5",
      "emutualTrustPath_attr6",
      RN_DEST));

  Send (result);
}

void
Trust::Prov_r3_3_ecaDel (Ptr<Tuple> emutualTrustPathTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r3_3_ecaDel triggered");

  Ptr<Tuple> result = emutualTrustPathTempDelete;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    EMUTUALTRUSTPATHDELETE,
    strlist ("Local",
      "emutualTrustPathTempDelete_attr3",
      "emutualTrustPathTempDelete_attr4",
      "emutualTrustPathTempDelete_attr5",
      "emutualTrustPathTempDelete_attr6",
      "emutualTrustPathTempDelete_attr1",
      "Local"),
    strlist ("emutualTrustPathDelete_attr1",
      "emutualTrustPathDelete_attr2",
      "emutualTrustPathDelete_attr3",
      "emutualTrustPathDelete_attr4",
      "emutualTrustPathDelete_attr5",
      "emutualTrustPathDelete_attr6",
      RN_DEST));

  Send (result);
}

void
Trust::Prov_r3_4_ecaAdd (Ptr<Tuple> emutualTrustPath)
{
  RAPIDNET_LOG_INFO ("Prov_r3_4_ecaAdd triggered");

  Ptr<Tuple> result = emutualTrustPath;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    MUTUALTRUSTPATH,
    strlist ("Local",
      "emutualTrustPath_attr2",
      "emutualTrustPath_attr3"),
    strlist ("mutualTrustPath_attr1",
      "mutualTrustPath_attr2",
      "mutualTrustPath_attr3"));

  Insert (result);
}

void
Trust::Prov_r3_4_ecaDel (Ptr<Tuple> emutualTrustPathDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r3_4_ecaDel triggered");

  Ptr<Tuple> result = emutualTrustPathDelete;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    MUTUALTRUSTPATH,
    strlist ("Local",
      "emutualTrustPathDelete_attr2",
      "emutualTrustPathDelete_attr3"),
    strlist ("mutualTrustPath_attr1",
      "mutualTrustPath_attr2",
      "mutualTrustPath_attr3"));

  Delete (result);
}

void
Trust::Prov_r3_5_ecaAdd (Ptr<Tuple> emutualTrustPath)
{
  RAPIDNET_LOG_INFO ("Prov_r3_5_ecaAdd triggered");

  Ptr<Tuple> result = emutualTrustPath;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("mutualTrustPath")),
                VarExpr::New ("emutualTrustPath_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("emutualTrustPath_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("emutualTrustPath_attr3")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "emutualTrustPath_attr4",
      "emutualTrustPath_attr6",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Insert (result);
}

void
Trust::Prov_r3_5_ecaDel (Ptr<Tuple> emutualTrustPathDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r3_5_ecaDel triggered");

  Ptr<Tuple> result = emutualTrustPathDelete;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("mutualTrustPath")),
                VarExpr::New ("emutualTrustPathDelete_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("emutualTrustPathDelete_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("emutualTrustPathDelete_attr3")))));

  result->Assign (Assignor::New ("Score",
    ValueExpr::New (RealValue::New (-1))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "emutualTrustPathDelete_attr4",
      "emutualTrustPathDelete_attr6",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Delete (result);
}

void
Trust::Prov_edb_1Eca1Ins (Ptr<Tuple> trust)
{
  RAPIDNET_LOG_INFO ("Prov_edb_1Eca1Ins triggered");

  Ptr<Tuple> result = trust;

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("trust_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("trust")),
                VarExpr::New ("trust_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("trust_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("trust_attr3")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result->Assign (Assignor::New ("Score",
    VarExpr::New ("trust_attr3")));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "RID",
      "RLoc",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Insert (result);
}

void
Trust::Prov_edb_1Eca1Del (Ptr<Tuple> trust)
{
  RAPIDNET_LOG_INFO ("Prov_edb_1Eca1Del triggered");

  Ptr<Tuple> result = trust;

  result->Assign (Assignor::New ("RLoc",
    VarExpr::New ("trust_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("trust")),
                VarExpr::New ("trust_attr1")),
              ValueExpr::New (StrValue::New (","))),
            VarExpr::New ("trust_attr2")),
          ValueExpr::New (StrValue::New (","))),
        VarExpr::New ("trust_attr3")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result->Assign (Assignor::New ("Score",
    VarExpr::New ("trust_attr3")));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    PROV,
    strlist ("Local",
      "VID",
      "RID",
      "RLoc",
      "Score"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4",
      "prov_attr5"));

  Delete (result);
}

void
Trust::Prep1_eca (Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO ("Prep1_eca triggered");

  Ptr<Tuple> result = provQuery;

  result->Assign (Assignor::New ("Prov",
    FPEdb::New (
      VarExpr::New ("provQuery_attr3"),
      VarExpr::New ("provQuery_attr1"))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      FSize::New (
        VarExpr::New ("provQuery_attr4")),
      ValueExpr::New (Int32Value::New (4)))));

  result = result->Project (
    PRETURN,
    strlist ("provQuery_attr5",
      "provQuery_attr2",
      "provQuery_attr3",
      "Prov",
      "provQuery_attr5"),
    strlist ("pReturn_attr1",
      "pReturn_attr2",
      "pReturn_attr3",
      "pReturn_attr4",
      RN_DEST));

  Send (result);
}

void
Trust::Prep2_eca (Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO ("Prep2_eca triggered");

  Ptr<Tuple> result = provQuery;

  result->Assign (Assignor::New ("Prov",
    ValueExpr::New (StrValue::New ("c"))));

  result = result->Select (Selector::New (
    Operation::New (RN_GT,
      FMember::New (
        VarExpr::New ("provQuery_attr4"),
        VarExpr::New ("provQuery_attr3")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    PRETURN,
    strlist ("provQuery_attr5",
      "provQuery_attr2",
      "provQuery_attr3",
      "Prov",
      "provQuery_attr5"),
    strlist ("pReturn_attr1",
      "pReturn_attr2",
      "pReturn_attr3",
      "pReturn_attr4",
      RN_DEST));

  Send (result);
}

void
Trust::Prep3_eca (Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO ("Prep3_eca triggered");

  Ptr<Tuple> result = provQuery;

  result = result->Select (Selector::New (
    Operation::New (RN_LTE,
      FSize::New (
        VarExpr::New ("provQuery_attr4")),
      ValueExpr::New (Int32Value::New (4)))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FMember::New (
        VarExpr::New ("provQuery_attr4"),
        VarExpr::New ("provQuery_attr3")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    PTEMPQUERY,
    strlist ("provQuery_attr1",
      "provQuery_attr2",
      "provQuery_attr3",
      "provQuery_attr4",
      "provQuery_attr5"),
    strlist ("pTempQuery_attr1",
      "pTempQuery_attr2",
      "pTempQuery_attr3",
      "pTempQuery_attr4",
      "pTempQuery_attr5"));

  SendLocal (result);
}

void
Trust::Prep4_eca (Ptr<Tuple> pTempQuery)
{
  RAPIDNET_LOG_INFO ("Prep4_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROV)->Join (
    pTempQuery,
    strlist ("prov_attr2", "prov_attr1"),
    strlist ("pTempQuery_attr3", "pTempQuery_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("prov_attr3"),
      VarExpr::New ("pTempQuery_attr3"))));

  result = AggWrapList::New ()->Compute (result, pTempQuery, "prov_attr3");

  result = result->Project (
    TEMPLIST,
    strlist ("pTempQuery_attr1",
      "pTempQuery_attr2",
      "pTempQuery_attr3",
      "pTempQuery_attr4",
      "pTempQuery_attr5",
      "list"),
    strlist ("tempList_attr1",
      "tempList_attr2",
      "tempList_attr3",
      "tempList_attr4",
      "tempList_attr5",
      "tempList_attr6"));

  SendLocal (result);
}

void
Trust::Edb1_eca (Ptr<Tuple> tempList)
{
  RAPIDNET_LOG_INFO ("Edb1_eca triggered");

  Ptr<Tuple> result = tempList;

  result->Assign (Assignor::New ("Prov",
    FPEdb::New (
      VarExpr::New ("tempList_attr3"),
      VarExpr::New ("tempList_attr1"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("tempList_attr6")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    PRETURN,
    strlist ("tempList_attr5",
      "tempList_attr2",
      "tempList_attr3",
      "Prov",
      "tempList_attr5"),
    strlist ("pReturn_attr1",
      "pReturn_attr2",
      "pReturn_attr3",
      "pReturn_attr4",
      RN_DEST));

  Send (result);
}

void
Trust::Idb1_eca (Ptr<Tuple> tempList)
{
  RAPIDNET_LOG_INFO ("Idb1_eca triggered");

  Ptr<Tuple> result = tempList;

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FSize::New (
        VarExpr::New ("tempList_attr6")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    PQLIST,
    strlist ("tempList_attr1",
      "tempList_attr2",
      "tempList_attr3",
      "tempList_attr4",
      "tempList_attr6"),
    strlist ("pQList_attr1",
      "pQList_attr2",
      "pQList_attr3",
      "pQList_attr4",
      "pQList_attr5"));

  Insert (result);
}

void
Trust::Idb2_eca (Ptr<Tuple> tempList)
{
  RAPIDNET_LOG_INFO ("Idb2_eca triggered");

  Ptr<Tuple> result = tempList;

  result->Assign (Assignor::New ("Buf",
    FEmpty::New (
)));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FSize::New (
        VarExpr::New ("tempList_attr6")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    PRESULTTMP,
    strlist ("tempList_attr1",
      "tempList_attr2",
      "tempList_attr5",
      "tempList_attr3",
      "Buf"),
    strlist ("pResultTmp_attr1",
      "pResultTmp_attr2",
      "pResultTmp_attr3",
      "pResultTmp_attr4",
      "pResultTmp_attr5"));

  Insert (result);
}

void
Trust::Idb3_eca (Ptr<Tuple> tempList)
{
  RAPIDNET_LOG_INFO ("Idb3_eca triggered");

  Ptr<Tuple> result = tempList;

  result->Assign (Assignor::New ("N",
    ValueExpr::New (Int32Value::New (1))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FSize::New (
        VarExpr::New ("tempList_attr6")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    PITERATE,
    strlist ("tempList_attr1",
      "tempList_attr2",
      "N",
      "tempList_attr5"),
    strlist ("pIterate_attr1",
      "pIterate_attr2",
      "pIterate_attr3",
      "pIterate_attr4"));

  SendLocal (result);
}

void
Trust::Idb4_eca (Ptr<Tuple> pIterate)
{
  RAPIDNET_LOG_INFO ("Idb4_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PQLIST)->Join (
    pIterate,
    strlist ("pQList_attr2", "pQList_attr1"),
    strlist ("pIterate_attr2", "pIterate_attr1"));

  result->Assign (Assignor::New ("N",
    Operation::New (RN_PLUS,
      VarExpr::New ("pIterate_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_LT,
      VarExpr::New ("pIterate_attr3"),
      FSize::New (
        VarExpr::New ("pQList_attr5")))));

  result = result->Project (
    PITERATE,
    strlist ("pIterate_attr1",
      "pIterate_attr2",
      "N",
      "pIterate_attr4"),
    strlist ("pIterate_attr1",
      "pIterate_attr2",
      "pIterate_attr3",
      "pIterate_attr4"));

  SendLocal (result);
}

void
Trust::Idb5_eca (Ptr<Tuple> pIterate)
{
  RAPIDNET_LOG_INFO ("Idb5_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PQLIST)->Join (
    pIterate,
    strlist ("pQList_attr2", "pQList_attr1"),
    strlist ("pIterate_attr2", "pIterate_attr1"));

  result->Assign (Assignor::New ("RID",
    FItem::New (
      VarExpr::New ("pQList_attr5"),
      VarExpr::New ("pIterate_attr3"))));

  result->Assign (Assignor::New ("NQID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("pIterate_attr2")),
        VarExpr::New ("RID")))));

  result = result->Select (Selector::New (
    Operation::New (RN_LTE,
      VarExpr::New ("pIterate_attr3"),
      FSize::New (
        VarExpr::New ("pQList_attr5")))));

  result = result->Project (
    ERULEQUERY,
    strlist ("pIterate_attr1",
      "NQID",
      "pIterate_attr2",
      "pQList_attr3",
      "RID",
      "pQList_attr4",
      "pIterate_attr4"),
    strlist ("eRuleQuery_attr1",
      "eRuleQuery_attr2",
      "eRuleQuery_attr3",
      "eRuleQuery_attr4",
      "eRuleQuery_attr5",
      "eRuleQuery_attr6",
      "eRuleQuery_attr7"));

  SendLocal (result);
}

void
Trust::Idb6_eca (Ptr<Tuple> eRuleQuery)
{
  RAPIDNET_LOG_INFO ("Idb6_eca triggered");

  Ptr<Tuple> result = eRuleQuery;

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("eRuleQuery_attr1")));

  result->Assign (Assignor::New ("P2",
    FAppend::New (
      VarExpr::New ("eRuleQuery_attr4"))));

  result->Assign (Assignor::New ("P",
    FConcat::New (
      VarExpr::New ("eRuleQuery_attr6"),
      VarExpr::New ("P2"))));

  result = result->Project (
    RULEQUERY,
    strlist ("eRuleQuery_attr1",
      "eRuleQuery_attr2",
      "eRuleQuery_attr5",
      "P",
      "$1"),
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "ruleQuery_attr3",
      "ruleQuery_attr4",
      "ruleQuery_attr5"));

  SendLocal (result);
}

void
Trust::Idb7_eca (Ptr<Tuple> rReturn)
{
  RAPIDNET_LOG_INFO ("Idb7_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PRESULTTMP)->Join (
    rReturn,
    strlist ("pResultTmp_attr1"),
    strlist ("rReturn_attr1"));

  result->Assign (Assignor::New ("Buf2",
    FAppend::New (
      VarExpr::New ("rReturn_attr4"))));

  result->Assign (Assignor::New ("Buf",
    FConcat::New (
      VarExpr::New ("pResultTmp_attr5"),
      VarExpr::New ("Buf2"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("rReturn_attr2"),
      FSha1::New (
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("")),
            VarExpr::New ("pResultTmp_attr2")),
          VarExpr::New ("rReturn_attr3"))))));

  result = result->Project (
    PRESULTTMP,
    strlist ("rReturn_attr1",
      "pResultTmp_attr2",
      "pResultTmp_attr3",
      "pResultTmp_attr4",
      "Buf"),
    strlist ("pResultTmp_attr1",
      "pResultTmp_attr2",
      "pResultTmp_attr3",
      "pResultTmp_attr4",
      "pResultTmp_attr5"));

  Insert (result);
}

void
Trust::Idb8Eca0Ins (Ptr<Tuple> pResultTmp)
{
  RAPIDNET_LOG_INFO ("Idb8Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PQLIST)->Join (
    pResultTmp,
    strlist ("pQList_attr2", "pQList_attr3", "pQList_attr1"),
    strlist ("pResultTmp_attr2", "pResultTmp_attr4", "pResultTmp_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("pResultTmp_attr5")),
      FSize::New (
        VarExpr::New ("pQList_attr5")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FSize::New (
        VarExpr::New ("pResultTmp_attr5")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EPRETURN,
    strlist ("pResultTmp_attr1",
      "pResultTmp_attr2"),
    strlist ("ePReturn_attr1",
      "ePReturn_attr2"));

  SendLocal (result);
}

void
Trust::Idb8Eca1Ins (Ptr<Tuple> pQList)
{
  RAPIDNET_LOG_INFO ("Idb8Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PRESULTTMP)->Join (
    pQList,
    strlist ("pResultTmp_attr2", "pResultTmp_attr4", "pResultTmp_attr1"),
    strlist ("pQList_attr2", "pQList_attr3", "pQList_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("pResultTmp_attr5")),
      FSize::New (
        VarExpr::New ("pQList_attr5")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FSize::New (
        VarExpr::New ("pResultTmp_attr5")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EPRETURN,
    strlist ("pQList_attr1",
      "pQList_attr2"),
    strlist ("ePReturn_attr1",
      "ePReturn_attr2"));

  SendLocal (result);
}

void
Trust::Idb9_eca (Ptr<Tuple> ePReturn)
{
  RAPIDNET_LOG_INFO ("Idb9_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PRESULTTMP)->Join (
    ePReturn,
    strlist ("pResultTmp_attr2", "pResultTmp_attr1"),
    strlist ("ePReturn_attr2", "ePReturn_attr1"));

  result->Assign (Assignor::New ("Prov",
    FPIdb::New (
      VarExpr::New ("pResultTmp_attr5"),
      VarExpr::New ("ePReturn_attr1"))));

  result = result->Project (
    PRETURN,
    strlist ("pResultTmp_attr3",
      "ePReturn_attr2",
      "pResultTmp_attr4",
      "Prov",
      "pResultTmp_attr3"),
    strlist ("pReturn_attr1",
      "pReturn_attr2",
      "pReturn_attr3",
      "pReturn_attr4",
      RN_DEST));

  Send (result);
}

void
Trust::Rv1_eca (Ptr<Tuple> ruleQuery)
{
  RAPIDNET_LOG_INFO ("Rv1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RULEEXEC)->Join (
    ruleQuery,
    strlist ("ruleExec_attr2", "ruleExec_attr1"),
    strlist ("ruleQuery_attr3", "ruleQuery_attr1"));

  result = result->Project (
    RQLIST,
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "ruleExec_attr4",
      "ruleExec_attr3",
      "ruleExec_attr5",
      "ruleQuery_attr4"),
    strlist ("rQList_attr1",
      "rQList_attr2",
      "rQList_attr3",
      "rQList_attr4",
      "rQList_attr5",
      "rQList_attr6"));

  Insert (result);
}

void
Trust::Rv2_eca (Ptr<Tuple> ruleQuery)
{
  RAPIDNET_LOG_INFO ("Rv2_eca triggered");

  Ptr<Tuple> result = ruleQuery;

  result->Assign (Assignor::New ("Buf",
    FEmpty::New (
)));

  result = result->Project (
    RRESULTTMP,
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "ruleQuery_attr5",
      "ruleQuery_attr3",
      "Buf"),
    strlist ("rResultTmp_attr1",
      "rResultTmp_attr2",
      "rResultTmp_attr3",
      "rResultTmp_attr4",
      "rResultTmp_attr5"));

  Insert (result);
}

void
Trust::Rv3_eca (Ptr<Tuple> ruleQuery)
{
  RAPIDNET_LOG_INFO ("Rv3_eca triggered");

  Ptr<Tuple> result = ruleQuery;

  result->Assign (Assignor::New ("N",
    ValueExpr::New (Int32Value::New (1))));

  result = result->Project (
    RITERATE,
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "N"),
    strlist ("rIterate_attr1",
      "rIterate_attr2",
      "rIterate_attr3"));

  SendLocal (result);
}

void
Trust::Rv4_eca (Ptr<Tuple> rIterate)
{
  RAPIDNET_LOG_INFO ("Rv4_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RQLIST)->Join (
    rIterate,
    strlist ("rQList_attr2", "rQList_attr1"),
    strlist ("rIterate_attr2", "rIterate_attr1"));

  result->Assign (Assignor::New ("N",
    Operation::New (RN_PLUS,
      VarExpr::New ("rIterate_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_LT,
      VarExpr::New ("rIterate_attr3"),
      FSize::New (
        VarExpr::New ("rQList_attr5")))));

  result = result->Project (
    RITERATE,
    strlist ("rIterate_attr1",
      "rIterate_attr2",
      "N"),
    strlist ("rIterate_attr1",
      "rIterate_attr2",
      "rIterate_attr3"));

  SendLocal (result);
}

void
Trust::Rv5_eca (Ptr<Tuple> rIterate)
{
  RAPIDNET_LOG_INFO ("Rv5_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RQLIST)->Join (
    rIterate,
    strlist ("rQList_attr2", "rQList_attr1"),
    strlist ("rIterate_attr2", "rIterate_attr1"));

  result->Assign (Assignor::New ("VID",
    FItem::New (
      VarExpr::New ("rQList_attr5"),
      VarExpr::New ("rIterate_attr3"))));

  result->Assign (Assignor::New ("NQID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("rIterate_attr2")),
        VarExpr::New ("VID")))));

  result = result->Project (
    EPROVQUERY,
    strlist ("rIterate_attr1",
      "NQID",
      "VID",
      "rQList_attr6"),
    strlist ("eProvQuery_attr1",
      "eProvQuery_attr2",
      "eProvQuery_attr3",
      "eProvQuery_attr4"));

  SendLocal (result);
}

void
Trust::Rv6_eca (Ptr<Tuple> eProvQuery)
{
  RAPIDNET_LOG_INFO ("Rv6_eca triggered");

  Ptr<Tuple> result = eProvQuery;

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("eProvQuery_attr1")));

  result = result->Project (
    PROVQUERY,
    strlist ("eProvQuery_attr1",
      "eProvQuery_attr2",
      "eProvQuery_attr3",
      "eProvQuery_attr4",
      "$1"),
    strlist ("provQuery_attr1",
      "provQuery_attr2",
      "provQuery_attr3",
      "provQuery_attr4",
      "provQuery_attr5"));

  SendLocal (result);
}

void
Trust::Rv7_eca (Ptr<Tuple> pReturn)
{
  RAPIDNET_LOG_INFO ("Rv7_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RRESULTTMP)->Join (
    pReturn,
    strlist ("rResultTmp_attr1"),
    strlist ("pReturn_attr1"));

  result->Assign (Assignor::New ("Buf2",
    FAppend::New (
      VarExpr::New ("pReturn_attr4"))));

  result->Assign (Assignor::New ("Buf",
    FConcat::New (
      VarExpr::New ("rResultTmp_attr5"),
      VarExpr::New ("Buf2"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("pReturn_attr2"),
      FSha1::New (
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("")),
            VarExpr::New ("rResultTmp_attr2")),
          VarExpr::New ("pReturn_attr3"))))));

  result = result->Project (
    RRESULTTMP,
    strlist ("pReturn_attr1",
      "rResultTmp_attr2",
      "rResultTmp_attr3",
      "rResultTmp_attr4",
      "Buf"),
    strlist ("rResultTmp_attr1",
      "rResultTmp_attr2",
      "rResultTmp_attr3",
      "rResultTmp_attr4",
      "rResultTmp_attr5"));

  Insert (result);
}

void
Trust::Rv8Eca0Ins (Ptr<Tuple> rResultTmp)
{
  RAPIDNET_LOG_INFO ("Rv8Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RQLIST)->Join (
    rResultTmp,
    strlist ("rQList_attr2", "rQList_attr1"),
    strlist ("rResultTmp_attr2", "rResultTmp_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("rResultTmp_attr5")),
      FSize::New (
        VarExpr::New ("rQList_attr5")))));

  result = result->Project (
    ERRETURN,
    strlist ("rResultTmp_attr1",
      "rResultTmp_attr2",
      "rQList_attr3",
      "rQList_attr4"),
    strlist ("eRReturn_attr1",
      "eRReturn_attr2",
      "eRReturn_attr3",
      "eRReturn_attr4"));

  SendLocal (result);
}

void
Trust::Rv8Eca1Ins (Ptr<Tuple> rQList)
{
  RAPIDNET_LOG_INFO ("Rv8Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RRESULTTMP)->Join (
    rQList,
    strlist ("rResultTmp_attr2", "rResultTmp_attr1"),
    strlist ("rQList_attr2", "rQList_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("rResultTmp_attr5")),
      FSize::New (
        VarExpr::New ("rQList_attr5")))));

  result = result->Project (
    ERRETURN,
    strlist ("rQList_attr1",
      "rQList_attr2",
      "rQList_attr3",
      "rQList_attr4"),
    strlist ("eRReturn_attr1",
      "eRReturn_attr2",
      "eRReturn_attr3",
      "eRReturn_attr4"));

  SendLocal (result);
}

void
Trust::Rv9_eca (Ptr<Tuple> eRReturn)
{
  RAPIDNET_LOG_INFO ("Rv9_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RRESULTTMP)->Join (
    eRReturn,
    strlist ("rResultTmp_attr2", "rResultTmp_attr1"),
    strlist ("eRReturn_attr2", "eRReturn_attr1"));

  result->Assign (Assignor::New ("Prov",
    FPRule::New (
      VarExpr::New ("rResultTmp_attr5"),
      VarExpr::New ("eRReturn_attr1"),
      VarExpr::New ("eRReturn_attr3"),
      VarExpr::New ("eRReturn_attr4"))));

  result = result->Project (
    RRETURN,
    strlist ("rResultTmp_attr3",
      "eRReturn_attr2",
      "rResultTmp_attr4",
      "Prov",
      "rResultTmp_attr3"),
    strlist ("rReturn_attr1",
      "rReturn_attr2",
      "rReturn_attr3",
      "rReturn_attr4",
      RN_DEST));

  Send (result);
}

