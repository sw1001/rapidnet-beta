ECA Rule prov_ra_1Eca0Ins ACTION_REMOTE_SEND<etrustEventTemp(@RLOC, Local, P1, P2, RID, RWeight, R, List)> :- EVENT_INSERT<trustPath(@Local, P1, P2)>, PID1 := f_sha1(((((trustPath+ Local)+ ,)+ P1)+ ,)+ P2), List := f_append(PID1), RLOC := Local, RWeight := 1, R := ra, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_ra_1Eca0Del ACTION_REMOTE_SEND<etrustEventTempDelete(@RLOC, Local, P1, P2, RID, RWeight, R, List)> :- EVENT_DELETE<trustPath(@Local, P1, P2)>, PID1 := f_sha1(((((trustPath+ Local)+ ,)+ P1)+ ,)+ P2), List := f_append(PID1), RLOC := Local, RWeight := 1, R := ra, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_ra_2_ecaAdd ACTION_ADD<ruleExec(@RLOC, RID, RWeight, R, List)> :- EVENT_RECV<etrustEventTemp(@RLOC, Local, P1, P2, RID, RWeight, R, List)>.
ECA Rule prov_ra_2_ecaDel ACTION_DELETE<ruleExec(@RLOC, RID, RWeight, R, List)> :- EVENT_RECV<etrustEventTempDelete(@RLOC, Local, P1, P2, RID, RWeight, R, List)>.
ECA Rule prov_ra_3_ecaAdd ACTION_REMOTE_SEND<etrustEvent(@Local, P1, P2, RID, RWeight, RLOC)> :- EVENT_RECV<etrustEventTemp(@RLOC, Local, P1, P2, RID, RWeight, R, List)>.
ECA Rule prov_ra_3_ecaDel ACTION_REMOTE_SEND<etrustEventDelete(@Local, P1, P2, RID, RWeight, RLOC)> :- EVENT_RECV<etrustEventTempDelete(@RLOC, Local, P1, P2, RID, RWeight, R, List)>.
ECA Rule prov_ra_4_ecaAdd ACTION_ADD<trustEvent(@Local, P1, P2)> :- EVENT_RECV<etrustEvent(@Local, P1, P2, RID, RWeight, RLOC)>.
ECA Rule prov_ra_4_ecaDel ACTION_DELETE<trustEvent(@Local, P1, P2)> :- EVENT_RECV<etrustEventDelete(@Local, P1, P2, RID, RWeight, RLOC)>.
ECA Rule prov_ra_5_ecaAdd ACTION_ADD<prov(@Local, VID, RID, RLOC, Score)> :- EVENT_RECV<etrustEvent(@Local, P1, P2, RID, RWeight, RLOC)>, VID := f_sha1(((((trustEvent+ Local)+ ,)+ P1)+ ,)+ P2), Score := -1.
ECA Rule prov_ra_5_ecaDel ACTION_DELETE<prov(@Local, VID, RID, RLOC, Score)> :- EVENT_RECV<etrustEventDelete(@Local, P1, P2, RID, RWeight, RLOC)>, VID := f_sha1(((((trustEvent+ Local)+ ,)+ P1)+ ,)+ P2), Score := -1.
ECA Rule prov_r1_1Eca0Ins ACTION_REMOTE_SEND<etrustPathTemp(@RLOC, Local, P1, P2, RID, RWeight, R, List)> :- EVENT_INSERT<trust(@Local, P1, P2)>, PID1 := f_sha1(((((trust+ Local)+ ,)+ P1)+ ,)+ P2), List := f_append(PID1), RLOC := Local, RWeight := 1, R := r1, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r1_1Eca0Del ACTION_REMOTE_SEND<etrustPathTempDelete(@RLOC, Local, P1, P2, RID, RWeight, R, List)> :- EVENT_DELETE<trust(@Local, P1, P2)>, PID1 := f_sha1(((((trust+ Local)+ ,)+ P1)+ ,)+ P2), List := f_append(PID1), RLOC := Local, RWeight := 1, R := r1, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r1_2_ecaAdd ACTION_ADD<ruleExec(@RLOC, RID, RWeight, R, List)> :- EVENT_RECV<etrustPathTemp(@RLOC, Local, P1, P2, RID, RWeight, R, List)>.
ECA Rule prov_r1_2_ecaDel ACTION_DELETE<ruleExec(@RLOC, RID, RWeight, R, List)> :- EVENT_RECV<etrustPathTempDelete(@RLOC, Local, P1, P2, RID, RWeight, R, List)>.
ECA Rule prov_r1_3_ecaAdd ACTION_REMOTE_SEND<etrustPath(@Local, P1, P2, RID, RWeight, RLOC)> :- EVENT_RECV<etrustPathTemp(@RLOC, Local, P1, P2, RID, RWeight, R, List)>.
ECA Rule prov_r1_3_ecaDel ACTION_REMOTE_SEND<etrustPathDelete(@Local, P1, P2, RID, RWeight, RLOC)> :- EVENT_RECV<etrustPathTempDelete(@RLOC, Local, P1, P2, RID, RWeight, R, List)>.
ECA Rule prov_r1_4_ecaAdd ACTION_ADD<trustPath(@Local, P1, P2)> :- EVENT_RECV<etrustPath(@Local, P1, P2, RID, RWeight, RLOC)>.
ECA Rule prov_r1_4_ecaDel ACTION_DELETE<trustPath(@Local, P1, P2)> :- EVENT_RECV<etrustPathDelete(@Local, P1, P2, RID, RWeight, RLOC)>.
ECA Rule prov_r1_5_ecaAdd ACTION_ADD<prov(@Local, VID, RID, RLOC, Score)> :- EVENT_RECV<etrustPath(@Local, P1, P2, RID, RWeight, RLOC)>, VID := f_sha1(((((trustPath+ Local)+ ,)+ P1)+ ,)+ P2), Score := -1.
ECA Rule prov_r1_5_ecaDel ACTION_DELETE<prov(@Local, VID, RID, RLOC, Score)> :- EVENT_RECV<etrustPathDelete(@Local, P1, P2, RID, RWeight, RLOC)>, VID := f_sha1(((((trustPath+ Local)+ ,)+ P1)+ ,)+ P2), Score := -1.
ECA Rule prov_r2_1Eca0Ins ACTION_REMOTE_SEND<etrustPathTemp(@RLOC, Local, P1, P3, RID, RWeight, R, List)> :- EVENT_INSERT<trust(@Local, P1, P2)>, trustPath(@Local, P2, P3), PID1 := f_sha1(((((trust+ Local)+ ,)+ P1)+ ,)+ P2), List := f_append(PID1), PID2 := f_sha1(((((trustPath+ Local)+ ,)+ P2)+ ,)+ P3), List2 := f_append(PID2), List := f_concat(List, List2), P1 != P3, RLOC := Local, RWeight := 1, R := r2, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r2_1Eca0Del ACTION_REMOTE_SEND<etrustPathTempDelete(@RLOC, Local, P1, P3, RID, RWeight, R, List)> :- EVENT_DELETE<trust(@Local, P1, P2)>, trustPath(@Local, P2, P3), PID1 := f_sha1(((((trust+ Local)+ ,)+ P1)+ ,)+ P2), List := f_append(PID1), PID2 := f_sha1(((((trustPath+ Local)+ ,)+ P2)+ ,)+ P3), List2 := f_append(PID2), List := f_concat(List, List2), P1 != P3, RLOC := Local, RWeight := 1, R := r2, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r2_1Eca3Ins ACTION_REMOTE_SEND<etrustPathTemp(@RLOC, Local, P1, P3, RID, RWeight, R, List)> :- EVENT_INSERT<trustPath(@Local, P2, P3)>, trust(@Local, P1, P2), PID1 := f_sha1(((((trust+ Local)+ ,)+ P1)+ ,)+ P2), List := f_append(PID1), PID2 := f_sha1(((((trustPath+ Local)+ ,)+ P2)+ ,)+ P3), List2 := f_append(PID2), List := f_concat(List, List2), P1 != P3, RLOC := Local, RWeight := 1, R := r2, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r2_1Eca3Del ACTION_REMOTE_SEND<etrustPathTempDelete(@RLOC, Local, P1, P3, RID, RWeight, R, List)> :- EVENT_DELETE<trustPath(@Local, P2, P3)>, trust(@Local, P1, P2), PID1 := f_sha1(((((trust+ Local)+ ,)+ P1)+ ,)+ P2), List := f_append(PID1), PID2 := f_sha1(((((trustPath+ Local)+ ,)+ P2)+ ,)+ P3), List2 := f_append(PID2), List := f_concat(List, List2), P1 != P3, RLOC := Local, RWeight := 1, R := r2, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r3_1Eca0Ins ACTION_REMOTE_SEND<emutualTrustPathTemp(@RLOC, Local, P1, P2, RID, RWeight, R, List)> :- EVENT_INSERT<trustEvent(@Local, P1, P2)>, trustPath(@Local, P2, P1), PID1 := f_sha1(((((trustEvent+ Local)+ ,)+ P1)+ ,)+ P2), List := f_append(PID1), PID2 := f_sha1(((((trustPath+ Local)+ ,)+ P2)+ ,)+ P1), List2 := f_append(PID2), List := f_concat(List, List2), RLOC := Local, RWeight := 0.8, R := r3, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r3_1Eca0Del ACTION_REMOTE_SEND<emutualTrustPathTempDelete(@RLOC, Local, P1, P2, RID, RWeight, R, List)> :- EVENT_DELETE<trustEvent(@Local, P1, P2)>, trustPath(@Local, P2, P1), PID1 := f_sha1(((((trustEvent+ Local)+ ,)+ P1)+ ,)+ P2), List := f_append(PID1), PID2 := f_sha1(((((trustPath+ Local)+ ,)+ P2)+ ,)+ P1), List2 := f_append(PID2), List := f_concat(List, List2), RLOC := Local, RWeight := 0.8, R := r3, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r3_1Eca3Ins ACTION_REMOTE_SEND<emutualTrustPathTemp(@RLOC, Local, P1, P2, RID, RWeight, R, List)> :- EVENT_INSERT<trustPath(@Local, P2, P1)>, trustEvent(@Local, P1, P2), PID1 := f_sha1(((((trustEvent+ Local)+ ,)+ P1)+ ,)+ P2), List := f_append(PID1), PID2 := f_sha1(((((trustPath+ Local)+ ,)+ P2)+ ,)+ P1), List2 := f_append(PID2), List := f_concat(List, List2), RLOC := Local, RWeight := 0.8, R := r3, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r3_1Eca3Del ACTION_REMOTE_SEND<emutualTrustPathTempDelete(@RLOC, Local, P1, P2, RID, RWeight, R, List)> :- EVENT_DELETE<trustPath(@Local, P2, P1)>, trustEvent(@Local, P1, P2), PID1 := f_sha1(((((trustEvent+ Local)+ ,)+ P1)+ ,)+ P2), List := f_append(PID1), PID2 := f_sha1(((((trustPath+ Local)+ ,)+ P2)+ ,)+ P1), List2 := f_append(PID2), List := f_concat(List, List2), RLOC := Local, RWeight := 0.8, R := r3, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r3_2_ecaAdd ACTION_ADD<ruleExec(@RLOC, RID, RWeight, R, List)> :- EVENT_RECV<emutualTrustPathTemp(@RLOC, Local, P1, P2, RID, RWeight, R, List)>.
ECA Rule prov_r3_2_ecaDel ACTION_DELETE<ruleExec(@RLOC, RID, RWeight, R, List)> :- EVENT_RECV<emutualTrustPathTempDelete(@RLOC, Local, P1, P2, RID, RWeight, R, List)>.
ECA Rule prov_r3_3_ecaAdd ACTION_REMOTE_SEND<emutualTrustPath(@Local, P1, P2, RID, RWeight, RLOC)> :- EVENT_RECV<emutualTrustPathTemp(@RLOC, Local, P1, P2, RID, RWeight, R, List)>.
ECA Rule prov_r3_3_ecaDel ACTION_REMOTE_SEND<emutualTrustPathDelete(@Local, P1, P2, RID, RWeight, RLOC)> :- EVENT_RECV<emutualTrustPathTempDelete(@RLOC, Local, P1, P2, RID, RWeight, R, List)>.
ECA Rule prov_r3_4_ecaAdd ACTION_ADD<mutualTrustPath(@Local, P1, P2)> :- EVENT_RECV<emutualTrustPath(@Local, P1, P2, RID, RWeight, RLOC)>.
ECA Rule prov_r3_4_ecaDel ACTION_DELETE<mutualTrustPath(@Local, P1, P2)> :- EVENT_RECV<emutualTrustPathDelete(@Local, P1, P2, RID, RWeight, RLOC)>.
ECA Rule prov_r3_5_ecaAdd ACTION_ADD<prov(@Local, VID, RID, RLOC, Score)> :- EVENT_RECV<emutualTrustPath(@Local, P1, P2, RID, RWeight, RLOC)>, VID := f_sha1(((((mutualTrustPath+ Local)+ ,)+ P1)+ ,)+ P2), Score := -1.
ECA Rule prov_r3_5_ecaDel ACTION_DELETE<prov(@Local, VID, RID, RLOC, Score)> :- EVENT_RECV<emutualTrustPathDelete(@Local, P1, P2, RID, RWeight, RLOC)>, VID := f_sha1(((((mutualTrustPath+ Local)+ ,)+ P1)+ ,)+ P2), Score := -1.
ECA Rule prov_edb_1Eca1Ins ACTION_ADD<prov(@Local, VID, RID, RLoc, Score)> :- EVENT_INSERT<trust(@Local, P1, P2)>, RLoc := Local, VID := f_sha1(((((trust+ Local)+ ,)+ P1)+ ,)+ P2), RID := VID, Score := P2.
ECA Rule prov_edb_1Eca1Del ACTION_DELETE<prov(@Local, VID, RID, RLoc, Score)> :- EVENT_DELETE<trust(@Local, P1, P2)>, RLoc := Local, VID := f_sha1(((((trust+ Local)+ ,)+ P1)+ ,)+ P2), RID := VID, Score := P2.
ECA Rule prep1_eca ACTION_REMOTE_SEND<pReturn(@Ret, QID, VID, Prov)> :- EVENT_RECV<provQuery(@X, QID, VID, P, Ret)>, f_size(P) > 4, Prov := f_pEDB(VID, X).
ECA Rule prep2_eca ACTION_REMOTE_SEND<pReturn(@Ret, QID, VID, Prov)> :- EVENT_RECV<provQuery(@X, QID, VID, P, Ret)>, f_member(P, VID) > 0, Prov := c.
ECA Rule prep3_eca ACTION_LOCAL_SEND<pTempQuery(@X, QID, VID, P, Ret)> :- EVENT_RECV<provQuery(@X, QID, VID, P, Ret)>, f_size(P) <= 4, f_member(P, VID) == 0.
ECA Rule prep4_eca ACTION_LOCAL_SEND<tempList(@X, QID, VID, P, Ret, LIST< RID >)> :- EVENT_RECV<pTempQuery(@X, QID, VID, P, Ret)>, prov(@X, VID, RID, RLoc, Score), RID != VID.
ECA Rule edb1_eca ACTION_REMOTE_SEND<pReturn(@Ret, QID, VID, Prov)> :- EVENT_RECV<tempList(@X, QID, VID, P, Ret, List)>, f_size(List) == 0, Prov := f_pEDB(VID, X).
ECA Rule idb1_eca ACTION_ADD<pQList(@X, QID, VID, P, List)> :- EVENT_RECV<tempList(@X, QID, VID, P, Ret, List)>, f_size(List) != 0.
ECA Rule idb2_eca ACTION_ADD<pResultTmp(@X, QID, Ret, VID, Buf)> :- EVENT_RECV<tempList(@X, QID, VID, P, Ret, List)>, f_size(List) != 0, Buf := f_empty().
ECA Rule idb3_eca ACTION_LOCAL_SEND<pIterate(@X, QID, N, Ret)> :- EVENT_RECV<tempList(@X, QID, VID, P, Ret, List)>, f_size(List) != 0, N := 1.
ECA Rule idb4_eca ACTION_LOCAL_SEND<pIterate(@X, QID, N, Ret)> :- EVENT_RECV<pIterate(@X, QID, N1, Ret)>, pQList(@X, QID, VID, P, List), N1 < f_size(List), N := N1+ 1.
ECA Rule idb5_eca ACTION_LOCAL_SEND<eRuleQuery(@X, NQID, QID, VID, RID, P, Ret)> :- EVENT_RECV<pIterate(@X, QID, N, Ret)>, pQList(@X, QID, VID, P, List), N <= f_size(List), RID := f_item(List, N), NQID := f_sha1((+ QID)+ RID).
ECA Rule idb6_eca ACTION_LOCAL_SEND<ruleQuery(@X, QID, RID, P, $1)> :- EVENT_RECV<eRuleQuery(@X, QID, OQID, VID, RID, P1, Ret)>, $1 := X, P2 := f_append(VID), P := f_concat(P1, P2).
ECA Rule idb7_eca ACTION_ADD<pResultTmp(@X, QID, Ret, VID, Buf)> :- EVENT_RECV<rReturn(@X, NQID, RID, Prov)>, pResultTmp(@X, QID, Ret, VID, Buf1), NQID == f_sha1((+ QID)+ RID), Buf2 := f_append(Prov), Buf := f_concat(Buf1, Buf2).
ECA Rule idb8Eca0Ins ACTION_LOCAL_SEND<ePReturn(@X, QID)> :- EVENT_INSERT<pResultTmp(@X, QID, Ret, VID, Buf)>, pQList(@X, QID, VID, P, List), f_size(Buf) == f_size(List), f_size(Buf) != 0.
ECA Rule idb8Eca1Ins ACTION_LOCAL_SEND<ePReturn(@X, QID)> :- EVENT_INSERT<pQList(@X, QID, VID, P, List)>, pResultTmp(@X, QID, Ret, VID, Buf), f_size(Buf) == f_size(List), f_size(Buf) != 0.
ECA Rule idb9_eca ACTION_REMOTE_SEND<pReturn(@Ret, QID, VID, Prov)> :- EVENT_RECV<ePReturn(@X, QID)>, pResultTmp(@X, QID, Ret, VID, Buf), Prov := f_pIDB(Buf, X).
ECA Rule rv1_eca ACTION_ADD<rQList(@X, QID, R, RWeight, List, P)> :- EVENT_RECV<ruleQuery(@X, QID, RID, P, Ret)>, ruleExec(@X, RID, RWeight, R, List).
ECA Rule rv2_eca ACTION_ADD<rResultTmp(@X, QID, Ret, RID, Buf)> :- EVENT_RECV<ruleQuery(@X, QID, RID, P, Ret)>, Buf := f_empty().
ECA Rule rv3_eca ACTION_LOCAL_SEND<rIterate(@X, QID, N)> :- EVENT_RECV<ruleQuery(@X, QID, RID, P, Ret)>, N := 1.
ECA Rule rv4_eca ACTION_LOCAL_SEND<rIterate(@X, QID, N)> :- EVENT_RECV<rIterate(@X, QID, N1)>, rQList(@X, QID, R, RWeight, List, P), N1 < f_size(List), N := N1+ 1.
ECA Rule rv5_eca ACTION_LOCAL_SEND<eProvQuery(@X, NQID, VID, P)> :- EVENT_RECV<rIterate(@X, QID, N)>, rQList(@X, QID, R, RWeight, List, P), VID := f_item(List, N), NQID := f_sha1((+ QID)+ VID).
ECA Rule rv6_eca ACTION_LOCAL_SEND<provQuery(@X, QID, VID, P, $1)> :- EVENT_RECV<eProvQuery(@X, QID, VID, P)>, $1 := X.
ECA Rule rv7_eca ACTION_ADD<rResultTmp(@X, QID, Ret, RID, Buf)> :- EVENT_RECV<pReturn(@X, NQID, VID, Prov)>, rResultTmp(@X, QID, Ret, RID, Buf1), NQID == f_sha1((+ QID)+ VID), Buf2 := f_append(Prov), Buf := f_concat(Buf1, Buf2).
ECA Rule rv8Eca0Ins ACTION_LOCAL_SEND<eRReturn(@X, QID, R, RWeight)> :- EVENT_INSERT<rResultTmp(@X, QID, Ret, RID, Buf)>, rQList(@X, QID, R, RWeight, List, P), f_size(Buf) == f_size(List).
ECA Rule rv8Eca1Ins ACTION_LOCAL_SEND<eRReturn(@X, QID, R, RWeight)> :- EVENT_INSERT<rQList(@X, QID, R, RWeight, List, P)>, rResultTmp(@X, QID, Ret, RID, Buf), f_size(Buf) == f_size(List).
ECA Rule rv9_eca ACTION_REMOTE_SEND<rReturn(@Ret, QID, RID, Prov)> :- EVENT_RECV<eRReturn(@X, QID, R, RWeight)>, rResultTmp(@X, QID, Ret, RID, Buf), Prov := f_pRULE(Buf, X, R, RWeight).
